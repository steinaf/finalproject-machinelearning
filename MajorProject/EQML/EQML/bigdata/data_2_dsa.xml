<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<data>
    <topic>
        <text>data structures and algorithms</text>
        <query>
            <text>data structures and algorithms questions</text>
            <linkList>
                <link>http://stackoverflow.com/questions/58354/algorithm-data-structure-design-interview-questions</link>
                <link>http://interactivepython.org/courselib/static/pythonds/</link>
                <link>http://javarevisited.blogspot.com/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html</link>
                <link>http://cs.brown.edu/courses/cs016/</link>
                <link>http://www.wiziq.com/tutorial/109408-Data-Structures-and-Algorithms-Model-Question</link>
                <link>http://www.cl.cam.ac.uk/teaching/exams/pastpapers/t-DataStructuresandAlgorithms.html</link>
                <link>http://www.psexam.com/MCQs-from-Data-Structures-and-Algorithms/data-structures-a-algorithms-multiple-choice-questions-mcqs-objective-set-2.html</link>
                <link>http://technical-interview.com/datastructures.aspx</link>
                <link>http://www.javaworld.com/javaworld/jw-05-2003/jw-0502-java101.html</link>
                <link>http://www.slideshare.net/careermonk/data-structures-and-algorithms-for-gate-solutions-to-all-previous-gate-questions-since-1991</link>
                <link>http://www.geeksforgeeks.org/data-structures-and-algorithms-set-22/</link>
                <link>http://www.cs.miami.edu/~geoff/Courses/MTH517-00S/ExamQuestions.html</link>
                <link>http://joel.inpointform.net/software-development/algorithms-and-data-structure-interview-preparation-guide/</link>
                <link>http://www.careercup.com/categories</link>
                <link>http://www.dcc.uchile.cl/~rbaeza/handbook/hbook.html</link>
                <link>http://www.amazon.com/Structures-Algorithms-Interview-Questions-Likely/dp/1456569716</link>
                <link>http://stackoverflow.com/questions/5504856/algorithms-and-data-structures</link>
                <link>http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/</link>
                <link>http://www.springer.com/?SGWID=4-102-45-168599-p43141324</link>
            </linkList>
            <sectionList>
                <section>
                    <text>Algorithm/Data Structure Design Interview Questions - Stack Overflow Stack Exchange log in | careers 2.0 | chat | meta | about | faq Stack Overflow * Questions * Tags * Users * Badges * Unanswered * Ask Question Algorithm/Data Structure Design Interview Questions [closed]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>up vote 23 down vote favorite 42 What are some simple algorithm or data structure related &quot;white boarding&quot; problems that you find effective during the candidate screening process?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I have some simple ones that I use to validate problem solving skills and that can be simply expressed but have some opportunity for the application of some heuristics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One of the basics that I use for junior developers is:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a C# method that takes a string which contains a set of words (a sentence) and rotates those words X number of places to the right.
When a word in the last position of the sentence is rotated it should show up at the front of the resulting string.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When a candidate answers this question I look to see that they available .NET data structures and methods (string.Join, string.Split, List, etc...) to solve the problem.
I also look for them to identify special cases for optimization.
Like the number of times that the words need to be rotated isn't really X it's X % number of words.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What are some of the white board problems that you use to interview a candidate and what are some of the things you look for in an answer (do not need to post the actual answer).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>algorithm data-structures share |improve this question edited Sep 19 '08 at 15:01 community wiki 4 revs, 2 users 100% spoon16 closed as not constructive bycasperOne ♦ Dec 3 '11 at 9:02 As it currently stands, this question is not a good fit for our Q&amp;A format.
We expect answers to be supported by facts, references, or specific expertise, but this question will likely solicit debate, arguments, polling, or extended discussion.
If you feel that this question can be improved and possibly reopened,see the FAQ for guidance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>11 Answers active oldest votes up vote 16 down vote I enjoy the classic &quot;what's the difference between a LinkedList and an ArrayList (or between a linked list and an array/vector) and why would you choose one or the other?&quot;
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The kind of answer I hope for is one that includes discussion of:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* insertion performance * iteration performance * memory allocation/reallocation impact * impact of removing elements from the beginning/middle/end * how knowing (or not knowing) the maximum size of the list can affect the decision share |improve this answer answered Sep 12 '08 at 5:25 David Citron 6,03273154 Here are detailed instructions: chaoticjava.com/posts/linkedlist-vs-arraylist – Akshar Prabhu Desai Nov 25 '11 at 18:02 @AksharPrabhuDesai - I would not suggest reading that linked blog entry as a good way to learn about LinkedList vs ArrayList.
The author makes some misleading statements (especially regarding ArrayList resize behavior) and omits some key points (some of which were admittedly filled in by Stephen Colebourne in the blog comments). – David Citron Jan 22 '12 at 21:12 @DavidCitron can you point to some blog/article that includes the discussion of all the bulletted points in your answer below. – Geek Jul 19 '12 at 13:13 up vote 10 down vote Once when I was interviewing for Microsoft in college, the guy asked me how to detect a cycle in a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Having discussed in class the prior week the optimal solution to the problem, I started to tell him.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>He told me, &quot;No, no, everybody gives me that solution.
Give me a different one.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I argued that my solution was optimal.
He said, &quot;I know it's optimal.
Give me a sub-optimal one.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>At the same time, it's a pretty good problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 5:35 Jim Puls 20.4k34365 2   +1 What a lesson!
I assume they cared more about how you would come up with the answer, rather than the answer itself, optimal or not. – Terry Li Oct 7 '11 at 18:33 4   I would say, hash the address of the nodes,and put them in map. if you encounter a node that has already been mapped. bingo!.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>– Kshitij Banerjee Feb 1 '12 at 21:17 1   Right, but that takes O(N) extra memory. – Jim Puls Feb 2 '12 at 1:49 Another way is simply to keep a start and a current pointer.
Where current moves from (next to start to end) and start moves between start and current.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For each iteration of current, check all nodes between start and current.
If next encounters null, there is no cycle if ever next is equal to start, then we have a cycle –  fayyazkl May 28 '12 at 6:05 Here's an option for an out of the box solution - lets say that you know you can iterate over the list at some rate (# nodes/sec) and know how much memory is allocated to this list and sizeof the nodes, then you should get to the end of the list within a time proprotional to the ratio of those two, so stopwatch it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Gets complicated, taking into account task preemtions, cache effects, vm, and that all the allocated memory isnt probably for the list so maybe compute it as a worst case, but this could be a creative alternative showing some mental flexability. – DavidNeiss Apr 5 at 15:14 up vote 9 down vote When interviewing recently, I was often asked to implement a data structure, usually LinkedList or HashMap.
Both of these are easy enough to be doable in a short time, and difficult enough to eliminate the clueless.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 12:26 Bill the Lizard ♦ 109k83297558 sir, this is gonna be a little embarrassing, I posted a question asked by an interviewer, hoping to get some help, but nobody answered it with being viewed 50+ times.
I really hope that you can spare a little time helping me about it, here is the link:stackoverflow.com/q/7425400/888051 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Thank you very much. – Alcott Sep 15 '11 at 5:07 up vote 7 down vote This doesn't necessarily touch on OOP capabilities but in our last set of interviews we used a selection of buggy code from theBug of the Month list.
Watching the candidates find the bugs shows their analytical capabilities, shows the know how to interpret somebody elses code share |improve this answer answered Sep 24 '08 at 12:05 Harry great idea indeed. – Sidra Sultana Jan 24 '12 at 5:24 up vote 6 down vote * Write a method that takes a string, and returns true if that string is a number.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(anything with regex as the most effective answer for an interview) * Please write an abstract factory method, that doesn't contain a switch and returns types with the base type of &quot;X&quot;.
(Looking for patterns, looking for reflection, looking for them to not side step and use an if else if) * Please split the string &quot;every;thing|;|else|;|in|;|he;re&quot; by the token &quot;|;|&quot;.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(multi character tokens are not allowed at least in .net, so looking for creativity, the best solution is a total hack) share |improve this answer edited Mar 9 '10 at 21:55 answered Sep 12 '08 at 5:22 DevelopingChris 9,15874685 5   &quot;Write a method that takes a string, and returns true if that string is a number.
(anything with regex as the most efficient answer).&quot;
I'm sure that ideal for your work, but where I work if you answered that question with a regex solution that would be considered very bad.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Efficient in terms of programmer time, but not run time.
Context is important, even for such simple problems. – jheriko Mar 7 '10 at 15:33 1   I'm looking for efficient use of the white board and my time in the interview.
Agreed regex's are not for most things.
For such a contrived example, would you really place runtime constraints like that?
In general .net where my expertise lies, you aren't scrutinizing your code to the clock cycle.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you were, you wouldn't really be able to have it be managed. –  DevelopingChris Mar 9 '10 at 21:50 2   What is the hack for 3rd ?
Replacing |;| with some other character that doesn't appear in the string?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>– Akshar Prabhu Desai Nov 25 '11 at 20:27 2   @AksharPrabhuDesai yes, usually with something like the pi or theta, so that its out of the typical input, for this case – DevelopingChris Dec 9 '11 at 15:40 up vote 4 down vote Graphs are tough, because most non-trivial graph problems tend to require a decent amount of actual code to implement, if more than a sketch of an algorithm is required.
A lot of it tends to come down to whether or not the candidate knows the shortest path and graph traversal algorithms, is familiar with cycle types and detection, and whether they know the complexity bounds.
I think a lot of questions about this stuff comes down to trivia more than on the spot creative thinking ability.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I think problems related to trees tend to cover most of the difficulties of graph questions, but without as much code complexity.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I like the Project Euler problem that asks to find the most expensive path down a tree (16/67); common ancestor is a good warm up, but a lot of people have seen it.
Asking somebody to design a tree class, perform traversals, and then figure out from which traversals they could rebuild a tree also gives some insight into data structure and algorithm implementation.
The Stern-Brocot programming challenge is also interesting and quick to develop on a board ( http://online-judge.uva.es/p/v100/10077.html ).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer edited Sep 22 '08 at 12:52 answered Sep 15 '08 at 14:41 Aaron N. Tubbs 73156 SSSP = Single Source Shortest Path; APSP = All Pair Shortest Path; DFS = Depth First Search; BFS = Breadth First Search – Binil Thomas Sep 16 '08 at 3:49 up vote 3 down vote I like to go over a code the person actually wrote and have them explain it to me.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 6:21 dotmad 1441 up vote 3 down vote Follow up any question like this with: &quot;How could you improve this code so the developer who maintains it can figure out how it works easily?&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 13:39 Jon Dewees 1,62031729 up vote 3 down vote A trivial one is to ask them to code up a breadth-first search of a tree from scratch.
Yeah, if you know what you're doing it is trivial.
But a lot of programmers don't know how to tackle it.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One that I find more useful still is as follows.
I've given this in a number of languages, here is a Perl version.
First I give them the following code sample:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text># @a and @b are two arrays which are already populated. my @int; OUTER: for my $x (@a) { for my $y (@b) { if ($x eq $y) { push @int, $x; next OUTER; } } } Then I ask them the following questions.
I ask them slowly, give people time to think, and am willing to give them nudges:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is in @int when this code is done? * This code is put into production and there is a performance problem that is tracked back to this code.
Explain the potential performance problem.
(If they are struggling I'll ask how many comparisons it takes if @a and @b each have 100,000 elements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I amnot looking for specific terminology, just a back of the envelope estimate.) * Without code, suggest to make this faster.
(If they propose a direction that is easy to code, I'll ask them to code it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If they think of a solution that will result in @int being changed in any way (eg commonly order), I'll push to see whether they realize that they shouldn't code the fix before checking whether that matters.)
If they come up with a slightly (or very) wrong solution, the following silly data set will find most mistakes you run across:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>@a = qw( hello world hello goodbye earthlings ); @b = qw( earthlings say hello earthlings ); I'd guess that about 2/3 of candidates fail this question.
I have yet to encounter a competent programmer who had trouble with it.
I've found that people with good common sense and very little programming background do better on this than average programmers with a few years of experience.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I would suggest using these questions as filters.
Don't hire someone because they can answer these.
But if they can't answer these, then don't hire them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer edited Sep 18 '08 at 7:04 answered Sep 18 '08 at 4:35 user11318 3,7331223 up vote 3 down vote Implement a function that, given a linked list that may be circular, swaps the first two elements, the third with the fourth, etc...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 24 '08 at 11:46 Xavier Nodet 2,0351127 up vote 2 down vote Asking them to write a recursive algorithm for a well known iterative solution (i.e. Fibonacci etc. -- we give them an iterative function, if needed) and then have them compute the run time for it.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Many times the recursive function involves a tree data structure.
The number of times the person has failed to recognize that baffles me.
It becomes slightly difficult to calculate the run time until you can see that it's a tree structure...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I find that this problem covers many areas.
Namely, their code-reading ability (if they are given an iterative function), code-writing ability (since they write a recursive function), algorithm, data-structure (for run-time)...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 18 '08 at 4:40 Swati 5,91921637 Not the answer you're looking for?
Browse other questions tagged algorithm data-structures or ask your own question .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>tagged algorithm  × 28836 data-structures  ×  7850 asked 4 years ago viewed 79374 times active 3 years ago Get the weekly newsletter!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Top questions and answers * Important announcements * Unanswered questions see an example newsletter Linked 12 design a system supporting massive data storage and query Related 38 Algorithms and data structures that are not mainstream?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>6 How to Deal with Algorithm/Data Structures Problems in Interview Process?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>3 Data Structure Interview Question 0 Data structure/Algorithm for Streaming Data and identifying topics 3 4 program design interview questions 10 Data structures question 5 Interview Question: Data structure for a large social network 1 questions on data structure design for vectors?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 Question regarding Algorithm Design Manual - Data Structure for the Dictionary 5 How to prove a lower bound logn for a data structure?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>about | faq | blog | chat | data | legal | privacy policy | jobs | advertising info |mobile | contact us | feedback ■ stackoverflow.com   ■ api/apps   ■ careers 2.0   ■ serverfault.com   ■ superuser.com   ■ meta   ■ area 51   ■ webapps   ■ gaming   ■ ubuntu   ■ webmasters   ■ cooking   ■ game development   ■ math   ■  photography   ■ stats   ■ tex   ■  english   ■ theoretical cs   ■ programmers   ■ unix   ■ apple   ■ wordpress   ■ physics   ■ home improvement   ■ gis   ■  electrical engineering   ■ android   ■ security   ■ bicycles   ■ dba   ■  drupal   ■ sharepoint   ■ scifi &amp; fantasy   ■ ux   ■ skeptics   ■ rpg   ■  judaism   ■ mathematica   ■ travel   rev 2013.4.12.642 site design / logo © 2013 stack exchange inc; user contributions licensed undercc-wiki with attribution required Stack Overflow works best with JavaScript enabled Welcome to Problem Solving with Algorithms and Data Structures — Problem Solving with Algorithms and Data Structures Navigation * index * next | * Problem Solving with Algorithms and Data Structures » * logout | Table Of Contents * Welcome to Problem Solving with Algorithms and Data Structures * Introduction * Analysis * Basic Data Structures * Recursion * Sorting and Searching * Trees and Tree Agorithms * Graphs and Graph Algorithms * Acknowledgements * Indices and tables Next topic Introduction Runestone Links * Report a Problem * About Runestone * Instructors Page Follow @iRunestone Quick search Enter search terms or a module, class or function name.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Welcome to Problem Solving with Algorithms and Data Structures¶ By Brad Miller and David Ranum, Luther College Introduction¶ * Introduction * Objectives * Getting Started * What Is Computer Science?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Review of Basic Python * Summary * Key Terms * Discussion Questions * Programming Exercises Analysis¶ * Algorithm Analysis * Objectives * What Is Algorithm Analysis?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Performance of Python Data Structures * Summary * Key Terms * Discussion Questions * Programming Exercises Basic Data Structures¶ * Basic Data Structures * Objectives * What Are Linear Structures?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Stacks * What is a Stack?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Stack Abstract Data Type * Implementing a Stack in Python * Simple Balanced Parentheses * Balanced Symbols (A General Case)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Converting Decimal Numbers to Binary Numbers * Infix, Prefix and Postfix Expressions * Queues * What Is a Queue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Queue Abstract Data Type * Implementing a Queue in Python * Simulation: Hot Potato * Simulation: Printing Tasks * Deques * What Is a Deque?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Deque Abstract Data Type * Implementing a Deque in Python * Palindrome-Checker * Lists * The Unordered List Abstract Data Type * Implementing an Unordered List: Linked Lists * The Ordered List Abstract Data Type * Implementing an Ordered List * Summary * Key Terms * Discussion Questions * Programming Exercises Recursion¶ * Recursion * Objectives * What Is Recursion?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Calculating the Sum of a List of Numbers * The Three Laws of Recursion * Converting an Integer to a String in Any Base * Stack Frames: Implementing Recursion * Visualizing Recursion * Sierpinski Triangle * Complex Recursive Problems * Tower of Hanoi * Exploring a Maze * Dynamic Programming * Summary * Key Terms * Discussion Questions * Programming Exercises Sorting and Searching¶ * Sorting and Searching * Objectives * Searching * Sorting * The Bubble Sort * The Selection Sort * The Insertion Sort * The Shell Sort * The Merge Sort * The Quick Sort * Searching and Sorting * Summary * Key Terms * Discussion Questions * Programming Exercises Trees and Tree Agorithms¶ * Trees * Objectives * Examples of Trees * Vocabulary and Definitions * Implementation * List of Lists Representation * Nodes and References * Binary Tree Applications * Parse Tree * Tree Traversals * Priority Queues with Binary Heaps * Binary Heap Operations * Binary Heap Implementation * Binary Search Trees * Search Tree Operations * Search Tree Implementation * Search Tree Analysis * Balanced Binary Search Trees * AVL Tree Performance * AVL Tree Implementation * Summary of Map ADT Implementations * Summary * Key Terms * Discussion Questions * Programming Exercises Graphs and Graph Algorithms¶ * Graphs * Objectives * Vocabulary and Definitions * The Graph Abstract Data Type * Breadth First Search * The Word Ladder Problem * Building the Word Ladder Graph * Implementing Breadth First Search * Breadth First Search Analysis * Depth First Search * The Knight’s Tour Problem * Building the Knight’s Tour Graph * Implementing Knight’s Tour * Knight’s Tour Analysis * General Depth First Search * Depth First Search Analysis * Topological Sorting * Strongly Connected Components * Shortest Path Problems * Dijkstra’s Algorithm * Analysis of Dijkstra’s Algorithm * Prim’s Spanning Tree Algorithm * Summary * Key Terms * Discussion Questions * Programming Exercises Acknowledgements¶ Indices and tables¶ * Index * Module Index * Search Page Navigation * index * next | * Problem Solving with Algorithms and Data Structures » * logout | © Copyright 2012, Brad Miller, David Ranum.
Created usingSphinx 1.1.3.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Top 15 Data Structures and Algorithm Interview Questions for Java programmer - Answers Javarevisited Blog about Java Program Tutorial Example How to, Unix Linux commands, Interview Questions, FIX Protocol, Tibco RV tutorials, Equities trading system, MySQL Friday, March 15, 2013 Top 15 Data Structures and Algorithm Interview Questions for Java programmer - Answers Data structures and algorithm questions are important part of any programming job interview, be it a Java interview, C++ interview or any other programming language.
Since data structures is core programming concept, its mandatory for all programmers, to know basic data structures like stack, linked list, queue, array, tree and graph.
Though tree and graph are on tough side, I still see programmers to get familiar will all these.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any list of programming job interview questions isincomplete without questions from data structures and algorithms.
Similarly while going on questions from data structure you may get some programming exercise as well e.g. swapping numbers without temp variable .Linked list and arrays are favorite topics in any data structure interview, questions like reversing linked list, traversing linked list or deleting nodes from linked list, which involves algorithm and data structures are quite common.
Similarly, finding duplicates in array, finding missing numbers, sorting arrays are very popular.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You can also expect questions from stack, queue, array, linked list, tree, graph andHashMap are most common in any data structure interview.
In this tutorial, we will see couple of data structure questions answers from these topic.
Let us know, if you have any interesting questions from data structures and algorithm, which you faced during any Java interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structures and Algorithm Interview Questions for Java Programmers This is combined list of questions from various data structure e.g. array, linked list, stack or queue.
It includes some coding questions as well, which gel with data structures.  Question 1 : How to find middle element of linked list in one pass?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One of the most popular question from data structures and algorithm, mostly asked on telephonic interview.
Since many programmer know that, in order to find length of linked list we need to first traverse through linkedlist till we find last node, which is pointing to null, and then in second pass we can find middle element by traversing only half of length.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They get confused when interviewer ask him to do same job in one pass.
In order to find middle element of linked list in one pass you need to maintain two pointer, one increment at each node while other increments after two nodes at a time, by having this arrangement, when first pointer reaches end, second pointer will point to middle element of linked list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>See this trick to find middle element of linked list in single pass for more details.
Question 2 : How to find if linked list has loop ?
This question has bit of similarity with earlier algorithm and data structure interview question.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I mean we can use two pointer approach to solve this problem.
If we maintain two pointers, and we increment one pointer after processing two nodes and other after processing every node, we are likely to find a situation where both the pointers will be pointing to same node.
This will only happen if linked list has loop.
Question 3 : How to find 3rd element from end in a linked list in one pass?
This is another frequently asked linked list interview question.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This question is exactly similarto finding middle element of linked list in single pass .If we apply same trick of maintaining two pointers and increment other pointer, when first has moved upto 3rd element, than when first pointer reaches to the end of linked list, second pointer will be pointing to the 3rd element from last in a linked list.
Question 4 : In an integer array, there is 1 to 100 number, out of one is duplicate, how to find ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is a rather simple data structures question, especially for this kind of.
In this case you can simply add all numbers stored in array, and total sum should be equal ton(n+1)/2.
Now just subtract actual sum to expected sum, and that is your duplicate number.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Of course there is a brute force way of checking each number against all other numbers, but that will result in performance of O(n&lt;s&gt;2) which is not good.
By the way this trick will not work if array have multiple duplicates or its not numbers forming arithmetic progression.
Here is example of one wayto find duplicate number in array .
Question 6 : How to reverse String in Java ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is one of my favorite question.
SinceString is one of the most important type in programming, you expect lot of question related to String any data structure interview.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are many ways to reverse Sting in Java or any other programming language, and interviewer will force you to solve this problem by using without API i.e. without usingreverse() method of StringBuffer.
In follow-up he may ask to reverse String using recursion as well.
See 3 ways to reverse String in Java to learn reversing String using both loops andrecursion in Java .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 7 : Write a Java program to sort a array using Bubble Sort algorithm?
I have always send couple of questions from searching and sorting in data structure interviews.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Bubble sort is one of the simplest sorting algorithm but if you ask anyone to implement on the spot it gives you an opportunity to gauge programming skills of a candidate.
See How to sort array using Bubble Sort in Java forcomplete solution of this datastrucutre interview question.
Question 8 : What is difference between Stack and Queue data structure ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One of the classical datastrucutre interview question.
I guess every one know, No?
Any way main difference is that Stack is LIFO(Last In First Out) data structure while Queue is a FIFO(First In First Out) data structure.
Question 9 : How do you find duplicates in array if there is more than one duplicate?
Sometime this is asked as follow-up question of earlier datastrucutre interview question, related to finding duplicates in Array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One way of solving this problem is usinga Hashtable or HashMap datastructure.
You can traverse through array, and store each number as key and number of occurrence as value.
At the end of traversal you can find all duplicate numbers, for which occurrence is more than one.
In Java if a number already exists in HashMap then calling get(index) will return number otherwise it return null. this property can be used to insert or update numbers inHashMap.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 10 : What is difference between Singly Linked List and Doubly Linked List data structure?
This is another classical interview question on data structure, mostly asked on telephonic rounds.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Main difference between singly linked list and doubly linked list is ability to traverse.
In a single linked list, node only points towards next node, and there is no pointer to previous node, which means you can not traverse back on a singly linked list.
On the other hand doubly linked list maintains two pointers, towards next and previous node, which allows you to navigate in both direction in any linked list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 11 : Write Java program to print Fibonacci series ?
This is not a data structures question, but a programming one, which many times appear during data structure interview.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Fibonacci series is a mathematical series, where each number is sum of previous two numbers e.g. 1,1, 2, 3, 5, 8, 13, 21.
Interviewer is often interested in two things, a function which returns nth number in Fibonacci series and solving this problem using recursion in Java.
Though, its easy question, recursion part often confuses beginners.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>See this link to find nth Fibonacci number in Java .
Question 12 : Write Java program to check if a number is palindrome or not?
This is similar to previous question, not directly related to data structures, but quite popular along with other questions.
A number is called palindrome, if reverse of number is equal to number itself.
Interviewer ask to solve this problem without taking help from Java API or any open source library.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any way it’s simple question, you can use division operator (/) and remainder operator (%) to solve this question.
Just remember, division operator can be used to get rid of last digit e.g. 1234/10 will give you 123, and modulus operator can give you last digit e.g. 1234%10 will return 4.
By the way, here isa Java program check if number is palindrome or not .
Question 13 : What is binary search tree?
This is a data structure question from Tree data structures.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Binary Search Tree has some special properties e.g. left nodes contains items whose value is less than root , right sub tree contains keys with higher node value than root, and there should not be any duplicates in the tree.
Apart from definition, interview can ask you to implement binary search tree in Java and questions on tree traversal e.g. IN order, preorder, and post order traversals are quite popular data structure question.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 14 : How to reverse linked list using recursion and iteration?
This is another good question on data structures.
There are many algorithm to reverse linked list and you can search of them using google.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I am thinking of writing another blog post to explain linked list reversal and will share with you later.
Question 15 : Write a Java program to implement Stack in Java?
You can implement Stack by using array or linked list.
This question expect you to implement standard method provided by stack data structure e.g.push() and pop().  Both push() and pop() should be happen at top of stack, which you need to keep track.
It’s also good if you can implement utility methods likecontains(), isEmpty() etc.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By the way JDK has java.util.Stack class and you can check it’s code to get an idea.
You can also check Effective Java book , where Josh Bloch has explains how an incorrect implementation of stack can cause memory leak in Java.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>That's all on this list of data structure interview questions and answers.
This is one topic, which is always asked in any programming interview, doesn't matter if you are C, C++, or Java developer, basic knowledge of data structure like array, linked list, stack, queue, tree are must to clear any programming interview.
Relate Java Interview Questions from Javarevisited Blog Top 15 multithreading and concurrency Interview Questions from Investment banks Top 10 Garbage Collection Interview Questions in Java 10 Java Generics Interview Questions for Programmers 10 JDBC Interview questions for Java developers Top 10 Spring Framework Interview questions for J2EE developer Please share with your friends if like this article Posted by Javin Paul at 7:09 AM Email This BlogThis!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Share to Twitter Share to Facebook Labels:core java , core java interview question ,data structure and algorithm ,programming 10 comments:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Heisenberg said...
Great post Javin!
Really helpful.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I was recently asked following questions in interviews.
I have found answers via Google search, but it would be great to know your comments on these questions.
1. Write your own HashMap/Hashtable implementation in Java 2.
How to implement your own LinkedList (without using any Java API)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 16, 2013 at 12:58 AM Javin @ Must Override Eclipse Error said... @Heisenberg, Thanks for sharing those questions, they are real good.
You can implement HashMap by using Array, because only provide constant time access, if you know index.
Key is to writing hash function to minimize collision.
Similarly, you can implement linked list by creating some class e.g. Node, which holds data and keep track of next node.
By the way, I will try to blog answers in more details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 16, 2013 at 2:30 AM SARAL SAXENA said...
Hi Javin, Gr8 artcile once again regarding second question ( How to find if linked list has loop ?), I want to add the following thing...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1) To determine if linked list has a loop or not..
You can detect it by simply running two pointers through the list.
Start the first pointer A on the first node and the second pointer B on the second node.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Advance the first pointer by one every time through the loop, advance the second pointer by two.
If there is a loop, they will eventually point to the same node.
If there's no loop, you'll eventually hit the end with the advance-by-two pointer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Consider the following loop:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>head -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 &lt;s&gt; | | | +------------------------+ Starting A at 1 and B at 2, they take on the following values:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A B = = 1 2 2 4 3 6 4 8 5 4 6 6 Because they're equal, and B should always be beyond A (because it's advancing by two as opposed to the advance-by-one behaviour of A), it means you've discovered a loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The pseudo-code will go something like this:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>def hasLoop (pointer nodeA): # nodeA is first element # Empty lest has no loops.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if nodeA == NULL: return false # Set nodeB to second element.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>nodeB = nodeA.next # Until end of list with nodeB.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>while nodeB != NULL: # Advance nodeA by one, nodeB by two (with end-list check).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>nodeA = nodeA.next if nodeB.next == NULL: return false nodeB = nodeB.next.next # If same, we have a loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if nodeA == nodeB: return true endwhile # Exited without loop maens no loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>return false enddef 2) The second query is to the point at which loop started...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Once you know a node within the loop, finding the first node is easy.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Leave one pointer A on that node and advance the other B by one.
Then use a third node C, initially set to the head.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Then you just advance B continuously.
If you find it equal to C, then C is the start of your loop.
On the other hand, if B ends up wrapping around to A again, then C is before your loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In that case, advance C and B by one and keep going.
Eventually, C will enter the loop and be met by B, at which point you're done.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(C goes this way).
C -&gt;&gt; A (this is where A and B | | first met). v v head -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 &lt;s&gt; | | | +------------------------+ (B runs through this loop, every time it reaches A, you advance C; when it reaches C, that's your first loop node).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 17, 2013 at 4:21 AM SARAL SAXENA said...
Javin Regarding Q3 (How to find 3rd element from end in a linked list in one pass)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One approach could be in terms of pseudo ode could also be The first node in you list I am assuming is called head.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So set a pointer to head, we'll call it current Node current = head; Then make another pointer that points three positions ahead Node threeAhead = head.next.next.next; Then write a loop that first checks to see if threeAhead.next is null, if it is not:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>threeAhead = threeAhead.next; curr = curr.next; When threeAhead.next becomes null, you are three positions from the end with current.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>so finally if you know what the length of the list is before you start, node = first; for (i = 0; i &lt; length - N_FROM_END; i++) { node = node.next; } result = node.value In java ..java.util.LinkedList: linkedList.get(linkedList.size() - 3)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>but if you don't now the length..
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>nodes = new Node[N_FROM_END]; node = first; for (i = 0; node != null; i++) { nodes[i % N_FROM_END] = node; node = node.next; } result = nodes[i % N_FROM_END].value or something like that.
(Check the boundary conditions ... and account for the list length being less than N_FROM_END.)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 17, 2013 at 5:31 AM Javin @ method override error in eclipse java 5 said... @Saral Saxena, Great comment and thanks for your pseudo code, I see it helps.
I will try to cover question of detecting linked list with loop, may be another post.
Once again, thanks for adding value.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Javin March 18, 2013 at 5:56 AM Anonymous said... @Javin and Saral, can u guys please have a look if below method is correct for Queation 2 (loop detection in linkedlist)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>public static void isListInLoop(LinkedList.Node head, Node tail) { LinkedList.Node nodeA = head.next(); LinkedList.Node nodeB = head.next().next(); int counter = 0; while(nodeB.next() != null) { if( nodeA.equals(nodeB) ) break; nodeB = nodeB.next(); } System.out.println(&quot;Loop detected...&quot;); } March 22, 2013 at 9:03 PM Anonymous said...
For Question 3 another solution could be (with java.util.LinkedList), public static void get3rdElementFromEnd () { java.util.LinkedList ll = new java.util.LinkedList(); ll.add(&quot;A&quot;); ll.add(&quot;B&quot;); ll.add(&quot;C&quot;); ll.add(&quot;D&quot;); ll.add(&quot;E&quot;); ll.add(&quot;F&quot;); ll.add(&quot;G&quot;); int threeAhead=0, threeBack=0; System.out.println(&quot;ll.size = &quot;+ll.size()); if(ll.size() &gt; 3) { for(String s : ll) { threeAhead++; if(threeAhead &gt; 3 ) threeBack++; } int i = threeAhead - threeBack; System.out.println(&quot;-- i = &quot;+i); if( i == 3 ) { System.out.println(&quot;Third Element From End = &quot;+ll.get(threeBack)); } } } Please comment if this solution is not perfect at any point.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 22, 2013 at 11:06 PM Anonymous said...
Hi guys, recently in an interview I was asked how would you reverse a linked list?
I answered that I would have a new list, iterate the original linked list and add elements of this list at head of new list.
Interviewer was not convinced with my answer.
Anyway I thought of writing a program to prove this...here is complete program.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>package example.datastructure; public class LinkedlistExample { public static void main(String[] args) { Node head = new Node(); for (int i =3;i&lt;=10;i++) { insertAtTail(head, new Node(&quot;&quot;+i, null)); } for (int i =2;i&gt;0;i--) { insertAtHead(head, new Node(&quot;&quot;+i, null)); } traverseList(head); reverseList(head); traverseList(head); deleteNode(head, &quot;10&quot;); traverseList(head); } /* * Add element at tail of list. * */ static void insertAtTail(Node head, Node node) { if (head.next == null) { head.next=node; System.out.println(&quot;Linked list is empty insertAtLast&quot;); return; } Node lastNode = head.next; while(lastNode.next!
=null) { lastNode=lastNode.next; } lastNode.next=node; } /* * delete a node matching data. * */ static void deleteNode(Node head, String data) { if (head.next == null) { System.out.println(&quot;Linked list is empty in deleteNode&quot;); return; } Node lastNode = head.next; Node previousNode = head; while(lastNode!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>=null) { if(lastNode.data.equals(data)) { break; } previousNode = lastNode; lastNode=lastNode.next; } previousNode.next=lastNode.next; } /* * Add element at head of list * */ static void insertAtHead(Node head, Node node) { if (head.next == null) { head.next=node; System.out.println(&quot;Linked list is empty insertAtHead&quot;); return; } node.next=head.next; head.next=node; } static void traverseList(Node head) { Node lastNode = head.next; if (head.next == null) { System.out.println(&quot;Linked list is empty in traverseList&quot;); } System.out.print(&quot;Data: &quot;); while(lastNode!
=null) { System.out.print(&quot; &quot; + lastNode.data); lastNode=lastNode.next; } System.out.println(); } /* * Reverse a linked list. * */ static void reverseList(Node head) { if (head.next == null) { System.out.println(&quot;Linked list is empty in reverseList&quot;); } /* * Create a linked list by adding elements of original list at head of new list. * */ Node newHead = new Node(); Node lastNode = head.next; Node tempNode; while(lastNode!
=null) { tempNode = lastNode; lastNode=lastNode.next; tempNode.next=newHead.next; newHead.next=tempNode; } head.next = newHead.next; } } class Node { String data; Node next; Node() {} Node(String data, Node next) { this.data=data; this.next= next; } } Output: Linked list is empty insertAtLast Data: 1 2 3 4 5 6 7 8 9 10 Data: 10 9 8 7 6 5 4 3 2 1 Data: 9 8 7 6 5 4 3 2 1 Please suggest if anything wrong in this code.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Thanks, Prashant March 28, 2013 at 10:13 PM Anonymous said...
Some more codes..1) Find middle element 2) find nth element 3) Find and remove loop in list package example.datastructure; public class LinkedlistExample { public static void main(String[] args) { Node head = new Node(); for (int i =3;i&lt;=10;i++) { insertAtTail(head, new Node(&quot;&quot;+i, null)); } for (int i =2;i&gt;0;i--) { insertAtHead(head, new Node(&quot;&quot;+i, null)); } findMiddleElement(head); findNthElementfromlast(head,4); // Create , detect and remove loop from list head = new Node(); createListHavingLoop(head); findAndRemoveLoopNode(head); traverseList(head); } static void removeLoopNode(Node loopNode, Node head) { Node node1 = head; Node node2 = null; while (true) { node2 = loopNode; while (node2.next !
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>= loopNode &amp;&amp; node2.next !
= node1) { node2 = node2.next; } if (node2.next == node1) { break; } else { node1= node1.next; } } node2.next=null; } static void findAndRemoveLoopNode(Node head) { if (head.next == null) { System.out.println(&quot;Linked list is empty findLoopNode&quot;); return; } Node currentNode = head.next; Node startNode=head; Node lastNode=head.next.next; while(lastNode!
=null) { currentNode = currentNode.next; if (lastNode.next !
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>= null) { lastNode = lastNode.next.next; } if(lastNode == currentNode) { startNode = startNode.next; System.out.println(&quot;Loop Node is :&quot; + currentNode.data); removeLoopNode(currentNode, head); return; } } System.out.println(&quot;Loop node does not exist&quot;); } static void createListHavingLoop(Node head) { Node node1= new Node(&quot;1&quot;, null); Node node2= new Node(&quot;2&quot;, null); Node node3= new Node(&quot;3&quot;, null); Node node4= new Node(&quot;4&quot;, null); Node node5= new Node(&quot;5&quot;, null); Node node6= new Node(&quot;6&quot;, null); Node node7= new Node(&quot;7&quot;, null); Node node8= new Node(&quot;8&quot;, null); Node node9= new Node(&quot;9&quot;, null); Node node10= new Node(&quot;10&quot;, node4); insertAtTail(head, node1); insertAtTail(head, node2); insertAtTail(head, node3); insertAtTail(head, node4); insertAtTail(head, node5); insertAtTail(head, node6); insertAtTail(head, node7); insertAtTail(head, node8); insertAtTail(head, node9); insertAtTail(head, node10); } static void findNthElementfromlast(Node head, int nthFromLast) { if (head.next == null) { System.out.println(&quot;Linked list is empty findNthElementfromlast&quot;); return; } Node currentNode = head.next; Node tempNode=head; Node lastNode = null; for (int i=1; i&lt;=nthFromLast;i++) { tempNode = tempNode.next; } lastNode=tempNode; while(lastNode.next!
=null) { if (lastNode.next !
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>= null) { lastNode = lastNode.next;} currentNode = currentNode.next; } System.out.println(nthFromLast + &quot; element from last is : &quot; + currentNode.data); } static void findMiddleElement(Node head) { if (head.next == null) { System.out.println(&quot;Linked list is empty findMiddleElement&quot;); return; } int length = 0; Node middleNode = head; Node lastNode= head.next; while(lastNode!
=null) { length++; if(length % 2 == 0) { middleNode = middleNode.next; } lastNode = lastNode.next; } if (length %2 ==1) { middleNode = middleNode.next; } System.out.println(&quot;Middle element is : &quot; + middleNode.data); } } Thanks, Prashant March 29, 2013 at 5:08 AM shaique said...
Thanks Javin Paul .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>April 4, 2013 at 3:09 AM Post a Comment Newer Post Older Post Home Subscribe to: Post Comments (Atom)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Loading Recent Posts Follow Us Follow @javinpaul Subscribe by email:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By Javin Paul Subscribe To This Blog Free Posts Atom Posts Comments Atom Comments Followers Blog Archive * ▼  2013 (61) * ►  April (9) * ▼  March (16) * How to Convert and Print Byte array to Hex String ...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 10 Exception handling Best Practices in Java Progr...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to Reverse Array in Java - Int and String Arra...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to check if two String are Anagram in Java - P...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to generate MD5 Hash in Java - String Byte Arr...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 10 Famous Laws of Computer Programming and Softwar...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can we Overload and Override Static methods in Jav...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Top 15 Data Structures and Algorithm Interview Que...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Difference between Struts 1 and Struts 2 framework...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Bitwise and BitShift Operators in Java - AND, OR, ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Difference between Singleton Pattern vs Static Cla...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to Increase Console Buffer Size in Eclipse IDE...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* ReentrantLock Example in Java, Difference between ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 5 books to learn Spring framework and Spring MVC f...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to create Immutable Class and Object in Java -...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to write Unit Test in Java using JUnit4 in Ecl...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* ►  February (18) * ►  January (18) * ►  2012 (218) * ►  December (52) * ►  November (8) * ►  October (15) * ►  September (8) * ►  August (9) * ►  July (9) * ►  June (12) * ►  May (10) * ►  April (14) * ►  March (28) * ►  February (18) * ►  January (35) * ►  2011 (145) * ►  December (28) * ►  November (14) * ►  October (14) * ►  September (22) * ►  August (11) * ►  July (7) * ►  June (9) * ►  May (6) * ►  April (10) * ►  March (4) * ►  February (10) * ►  January (10) * ►  2010 (33) * ►  December (4) * ►  October (29)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>References * Java API documentation JDK 6 * Spring framework doc * Struts * ANT * Maven * JDK 7 API * MySQL * Linux * Eclipse Copyright by Javin Paul 2012.
Powered byBlogger .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* About Me * Privacy Policy Redirecting...
Data Structures and Algorithms Model Question JavaScript is disabled on your browser.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Enable JavaScript to use this site.Learn more * Sign In * Join Now * Contact Sales USA: +1NoSkype-919-647-4727 Europe: +44NoSkype-(0)-20-7193-6503 Asia: +91NoSkype-99-898-57-176 or Let us call you * Support * Try the Virtual Classroom Try Virtual Classroom now Request a Demo * Home * Product Features * Case Studies * Blog * Courses * Plans and Pricing * Courses  * Courses * Teachers * Classes * Tutorials * Tests Data Structures and Algorithms Model Question   Embed   Request Download   Add to Favourites In your Favourites Post to: &lt;http://www.facebook.com/sharer.php?
u=http://go.wiziq.com/1rcm&amp;t=Data Structures and Algorithms Model Question&gt; &lt;http://twitter.com/home?
status=Data Structures and Algorithms Model Question http://go.wiziq.com/1rcm&gt; Description Model Question!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures * Lists * stacks * Queues Comments Your comment has been posted successfully.
Presentation Transcript Upload Content | Embed Content Want to learn?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sign up and browse through relevant courses.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Login with Facebook or fill this simple form Name: Your Email: Password: Country: [Select]
United States Afghanistan Albania Algeria Angola Antigua and Barbuda Argentina Armenia Australia Austria Azerbaijan Bahamas Bahrain Bangladesh Barbados Belarus Belgium Belize Benin Bermuda Bhutan Bolivia Bosnia and Herzegovina Botswana Brazil Brunei Bulgaria Burkina Faso Burundi Cambodia Cameroon Canada Cape verde Caribbean Nations Central African Republic Chad Chile China Colombia Congo (Brazzaville) Congo, Democratic Republic of Cook Islands Costa Rica Croatia Cuba Cyprus Czech Republic Denmark Djibouti Dominica Dominican Republic Ecuador Egypt El Salvador Equatorial Guinea Eritrea Estonia Ethiopia Faroe Islands Federated States of Micronesia Fiji Finland France French Polynesia Gabon Gambia Georgia Germany Ghana Gibraltar Greece Greenland Grenada Guatemala Guinea Guinea-Bissau Guyana Haiti Honduras Hong Kong Hungary Iceland India Indonesia Iran Iraq Ireland Israel Italy Ivory Coast Jamaica Japan Jordan Kazakhstan Kenya Kiribati Korea - North Korea - South Kuwait Kyrgyzstan Laos Latvia Lebanon Lesotho Liberia Libya Liechtenstein Lithuania Luxembourg Macedonia Madagascar Malawi Malaysia Maldives Mali Malta Marshall Islands Mauritania Mauritius Mexico Micronesia, Federated States of Moldova Monaco Mongolia Montenegro Morocco Mozambique Myanmar Namibia Nauru Nepal Netherlands Netherlands Antilles New Zealand Nicaragua Niger Nigeria Norway Oman Pakistan Palau Panama Papua New Guinea Paraguay Peru Philippines Poland Portugal Puerto Rico Qatar Romania Russia Russian Federation Rwanda Saint Kitts and Nevis Saint Lucia Saint Vincent and the Grenadines Samoa San Marino Sao Tome and Principe Saudi Arabia Scotland Senegal Serbia Seychelles Sierra Leone Singapore Slovak Republic Slovakia Slovenia Solomon Islands Somalia South Africa Spain Sri Lanka Sudan Sultanate of Oman Suriname Swaziland Sweden Switzerland Syria Taiwan Tajikistan Tanzania Thailand Timor-Leste Togo Tonga Trinidad and Tobago Tunisia Turkey Turkmenistan Tuvalu Uganda Ukraine United Arab Emirates United Kingdom Uruguay Uzbekistan Vanuatu Vatican City Venezuela Viet Nam Western Sahara Yemen Zambia Zimbabwe Contact no.: Mobile Landline Country code Number Subjects you are interested in:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Back to select subject [Select]
IIT-JEE/AIEEE Bank PO/Clerical/Promotions IAS/UPSC/Public Services GRE GMAT SAT/CAT Programming/Internet Others Word verification: (Enter the text as shown in image)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sign Up Already a member?
Sign In I agree to WizIQ's User Agreement &amp; Privacy Policy Vasantha Vivek Professor 38 Followers Tutorials : 18 Send message Follow this Member Following ( Unfollow ) Your Facebook Friends on WizIQ Related Content 6.087-07 Pointers , string arrays, Stacks and Queues byLearnOnline Through OCW 867 Views Data Structure Introduction by Pardeep 3385 Views 6.837-9 Acceleration Data Structures by LearnOnline Through OCW 1216 Views STACKS IN DATA STRUCTURE by yogesh 56947 Views 1 Introduction to Data Structures and Algorithms byIT 3464 Views Explore Similar Courses Learn Data Structures And its Applications Price:Rs.7500 Rs.4995 SAVE 33% Data Structure and its Applications Price:Rs.10000 Rs.5000 Introductory Offer For sales enquiry, call us at USA +1NoSkype-919-647-4727 Europe +44NoSkype-(0)-20-7193-6503 Asia +91NoSkype-99-898-57-176 or Let us call you Connect * Information * Help * WizIQ training classes and webinars * e-Teaching Community * Contact Support * Support Forum * Blog * Whitepapers &amp; E-books * About Us * Product * Complete Feature Set * Virtual Classroom * Create a Course * Create Tests * Upload Content * Request a Demo * Integrations * Developer API * Virtual Classroom for Moodle * Blackboard Learn™ Building Block * Learn * Enroll in Online Courses * View Online Tutorials * Practice Online Tests * Public Updates * Popular Courses * The English Language * Other Languages * Bank Jobs Exams * Internet &amp; Technology * UPSC IAS (Civil Services) Exams © 2013 WizIQ Inc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All rights reserved.
Privacy Policy | Terms and conditions Computer Laboratory: Past exam papers: Data Structures and Algorithms Skip to content  | Access key help Search * Advanced search * A–Z * Contact us Computer Laboratory * Computer Laboratory * Teaching * Exams * Past exam papers * Data Structures and Algorithms * Lecture timetables * Courses 2012–13 * Supervisions * Academic exchanges * Part IB group projects * Part II projects * Part III and ACS projects * Continuing to Part III * Exams * Examination dates * Examination results * Examiners' reports * Plagiarism and collusion * Purchase of calculators * Data Retention Policy * Past exam papers * Solution notes * Directors of Studies * Managed Cluster Facility * Part III and MPhil machines * Online services * Installing Linux * MATLAB * ACS Handbook Past exam papers: Data Structures and Algorithms * 1993 Paper 3 Question 7 * 1993 Paper 3 Question 8 * 1993 Paper 4 Question 8 * 1993 Paper 10 Question 7 * 1993 Paper 10 Question 8 * 1993 Paper 11 Question 8 * 1994 Paper 3 Question 6 * 1994 Paper 3 Question 7 * 1994 Paper 4 Question 6 * 1994 Paper 4 Question 7 * 1994 Paper 10 Question 7 * 1994 Paper 10 Question 8 * 1994 Paper 11 Question 6 * 1995 Paper 3 Question 5 (Same as Paper 10 Question 5) * 1995 Paper 3 Question 6 (Same as Paper 10 Question 6) * 1995 Paper 4 Question 5 (Same as Paper 11 Question 5) * 1996 Paper 3 Question 5 (Same as Paper 10 Question 5) * 1996 Paper 3 Question 6 (Same as Paper 10 Question 6) * 1996 Paper 4 Question 5 (Same as Paper 11 Question 5) * 1997 Paper 3 Question 5 (Same as Paper 10 Question 5) * 1997 Paper 3 Question 6 (Same as Paper 10 Question 6) * 1997 Paper 4 Question 5 (Same as Paper 11 Question 5) * 1998 Paper 3 Question 5 (Same as Paper 10 Question 5) * 1998 Paper 3 Question 6 (Same as Paper 10 Question 6) * 1998 Paper 4 Question 5 (Same as Paper 11 Question 5) * 1999 Paper 3 Question 6 (Same as Paper 10 Question 6) * 1999 Paper 4 Question 5 (Same as Paper 11 Question 5) * 1999 Paper 5 Question 1 (Same as Paper 12 Question 1) * 1999 Paper 6 Question 1 * 2000 Paper 3 Question 5 (Same as Paper 10 Question 6) * 2000 Paper 4 Question 6 (Same as Paper 11 Question 5) * 2000 Paper 5 Question 1 (Same as Paper 12 Question 1) * 2000 Paper 6 Question 1 * 2001 Paper 3 Question 5 (Same as Paper 10 Question 6) * 2001 Paper 4 Question 5 (Same as Paper 11 Question 5) * 2001 Paper 5 Question 1 (Same as Paper 12 Question 1) * 2001 Paper 6 Question 1 * 2002 Paper 3 Question 3 (Same as Paper 10 Question 5) * 2002 Paper 4 Question 4 (Same as Paper 11 Question 4) * 2002 Paper 5 Question 1 (Same as Paper 12 Question 1) * 2002 Paper 6 Question 1 (Same as Paper 13 Question 1) * 2003 Paper 3 Question 3 (Same as Paper 10 Question 4) * 2003 Paper 4 Question 3 (Same as Paper 11 Question 4) * 2003 Paper 5 Question 1 (Same as Paper 12 Question 1) * 2003 Paper 6 Question 1 (Same as Paper 13 Question 1) * 2004 Paper 3 Question 3 (Same as Paper 10 Question 4) * 2004 Paper 4 Question 3 (Same as Paper 11 Question 4) * 2004 Paper 5 Question 1 (Same as Paper 12 Question 1) * 2004 Paper 6 Question 1 (Same as Paper 13 Question 1) * 2005 Paper 3 Question 2 (Same as Paper 10 Question 3) * 2005 Paper 4 Question 3 (Same as Paper 11 Question 4) * 2005 Paper 5 Question 1 (Same as Paper 12 Question 1) * 2005 Paper 6 Question 1 (Same as Paper 13 Question 1) * 2006 Paper 3 Question 2 (Same as Paper 10 Question 3) * 2006 Paper 4 Question 3 * 2006 Paper 5 Question 1 (Same as Paper 12 Question 1) * 2006 Paper 6 Question 1 (Same as Paper 13 Question 1) * 2007 Paper 10 Question 10 * 2007 Paper 11 Question 9 * 2008 Paper 10 Question 9 * 2008 Paper 11 Question 7 * © 2012 Computer Laboratory, University of Cambridge Information provided by pagemaster@cl.cam.ac.uk Data structures &amp; Algorithms - Multiple Choice Questions (MCQs) - Objective Set 2 | Data Structures and Algorithms Menu Search Login Desktop Version   Close * Home * MCQ Quiz * MCQ Bank * Class Notes * Contact Us   PS Exam Data structures &amp; Algorithms - Multiple Choice Questions (MCQs) - Objective Set 2 Multiple Choice Questions (MCQs) - Data Structures and Algorithms Following are the multiple choice questions (MCQs) or objective questions from Data Structures and Algorithms.
The questions are set from the topics such as arrays, records, pointers, linked lists, stacks, queues, recursion, trees, sorting and searching.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Set - 2 1.
The memory address of the first element of an array is called a. floor address b. foundation address c. first address d. base address   2.
The memory address of fifth element of an array can be calculated by the formula a.
LOC(Array[5]=Base(Array)+w(5-lower bound), where w is the number of words per memory cell for the array b.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>LOC(Array[5])=Base(Array[5])+(5-lower bound), where w is the number of words per memory cell for the array c.
LOC(Array[5])=Base(Array[4])+(5-Upper bound), where w is the number of words per memory cell for the array d.
None of above   3.
Which of the following data structures are indexed structures?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a. linear arrays b. linked lists c. both of above d. none of above   4.
Which of the following is not the required condition for binary search algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a.
The list must be sorted b. there should be the direct access to the middle element in any sublist c.
There must be mechanism to delete and/or insert elements in list d. none of above   5.
Which of the following is not a limitation of binary search algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a. must use a sorted array b. requirement of sorted array is expensive when a lot of insertion and deletions are needed c. there must be a mechanism to access middle element directly d. binary search algorithm is not efficient when the data elements are more than 1000.   6.
Two dimensional arrays are also called a. tables arrays b. matrix arrays c. both of above d. none of above   7.
A variable P is called pointer if a.
P contains the address of an element in DATA. b.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>P points to the address of first element in DATA c.
P can store only memory addresses d.
P contain the DATA and the address of DATA   8.
Which of the following data structure can't store the non-homogeneous data elements?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a.
Arrays b.
Records c.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Pointers d.
None   9.
Which of the following data structure store the homogeneous data elements?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a.
Arrays b.
Records c.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Pointers d.
None   10.
Each data item in a record may be a group item composed of sub-items; those items which are indecomposable are called a. elementary items b. atoms c. scalars d. all of above   11.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The difference between linear array and a record is a.
An array is suitable for homogeneous data but hte data items in a record may have different data type b.
In a record, there may not be a natural ordering in opposed to linear array. c.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A record form a hierarchical structure but a lienear array does not d.
All of above   12.
Which of the following statement is false?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a.
Arrays are dense lists and static data structure b. data elements in linked list need not be stored in adjecent space in memory c. pointers store the next data element of a list d. linked lists are collection of the nodes that contain information part and next pointer   13.
Binary search algorithm can not be applied to a. sorted linked list b. sorted binary trees c. sorted linear array d. pointer array   14.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When new data are to be inserted into a data structure, but there is no available space; this situation is usually called a. underflow b. overflow c. housefull d. saturated   15.
The situation when in a linked list START=NULL is a. underflow b. overflow c. housefull d. saturated   16.
Which of the following is two way list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a. grounded header list b. circular header list c. linked list with header and trailer nodes d. none of above   17.
Which of the following name does not relate to stacks?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a.
FIFO lists b.
LIFO list c.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Piles d.
Push-down lists   18.
The term &quot;push&quot; and &quot;pop&quot; is related to the a. array b. lists c. stacks d. all of above   19.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A data structure where elements can be added or removed at either end but not in the middle a.
Linked lists b.
Stacks c.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Queues d.
Deque   20.
When inorder traversing a tree resulted E A C K F H D B G; the preorder traversal would return a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>FAEKCDBHG b.
FAEKCDHGB c.
EAFKHDCBG d.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>FEAKDCHBG   Answers   1.
The memory address of the first element of an array is called d. base address   2.
The memory address of fifth element of an array can be calculated by the formula a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>LOC(Array[5]=Base(Array)+w(5-lower bound), where w is the number of words per memory cell for the array   3.
Which of the following data structures are indexed structures? a. linear arrays   4.
Which of the following is not the required condition for binary search algorithm? c.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There must be mechanism to delete and/or insert elements in list   5.
Which of the following is not a limitation of binary search algorithm? d. binary search algorithm is not efficient when the data elements are more than 1000.   6.
Two dimensional arrays are also called c. both of above   7.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A variable P is called pointer if a.
P contains the address of an element in DATA.   8.
Which of the following data structure can't store the non-homogeneous data elements? a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Arrays   9.
Which of the following data structure store the non-homogeneous data elements? b.
Records   10.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Each data item in a record may be a group item composed of sub-items; those items which are indecomposable are called d. all of above   11.
The difference between linear array and a record is d.
All of above   12.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Which of the following statement is false? c. pointers store the next data element of a list   13.
Binary search algorithm can not be applied to a. sorted linked list   14.
When new data are to be inserted into a data structure, but there is no available space; this situation is usually called b. overflow   15.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The situation when in a linked list START=NULL is a. underflow   16.
Which of the following is two way list? d. none of above   17.
Which of the following name does not relate to stacks? a.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>FIFO lists   18.
The term &quot;push&quot; and &quot;pop&quot; is related to the c. stacks   19.
A data structure where elements can be added or removed at either end but not in the middle d.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Deque   20.
When inorder traversing a tree resulted E A C K F H D B G; the preorder traversal would return b.
FAEKCDHGB   &lt; Prev   Next &gt; Desktop Version | Top |You are here: MCQ Bank Data Structures and Algorithms Data structures &amp; Algorithms - Multiple Choice Questions (MCQs) - Objective Set 2 Privacy Policy | Feeds | Contact Us | NUPT Photos   PS Exam is all about Computer Science and Computer Jobs Exam Preparation, for those who are pursuing Career in Information Technology Field! 
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Our revenue source is advertisements and provide you Free Multiple Choice Questions, Free Quizes, Ebooks and Class Notes, Questions and Answers, Resources to help you prepare better, all for FREE.
This site uses Google Adsense and other third party advertisements.
The links with double underline are advertisements from Infolinks.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1- Data Structures Interview Questions Technical Interview Home Added Recently Data Structures Puzzles Google &amp; Microsoft C/C++ Questions Java Interview Questions Quantitative Problems Algorithms Featured Articles Amazon Interview Question Compaq Interview Question Technical Interview Interview Process Introduction Questions Object Oriented Google Pages Fundamental Questions Resume Tips Links Contact Us Submit Question/Answer Please enable JavaScript to view this page content properly.
Data Structures Questions and Answers for Technical Interviews Please enable JavaScript to view this page content properly.   * Data Structures Interview Question: Classify the Hashing Functions based on the various methods by ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures Interview Question: What are the major data structures used in the following areas :RDBMS ...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures Interview Question: Trees: :What is almost complete binary tree?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Algorithms Interview Question: Given two numbers m and n, write a method to return the first number r that isdivisible by both ....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tree Interview Question: How would you check if a binary tree is balanced ?
Write a C/C++ program * Tree Interview Question: Write a C program to delete a tree (i.e, free up its nodes)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tree Interview Question: Write a C program to determine the number of elements (or size) in a tree.  * Tree Interview Question: Write a C program to find the depth or height of a tree .
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How to create a copy of a linked list ?
Write a C program to create a copy of a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How to compare two linked lists ?
Write a C program to compare two linked lists.  * C/C++ Data Structures Interview Question:If you are using C language to implement theheterogeneous linked list , what pointer type will you use?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How would you detect a loop in a linked list?
Write a C program to detect a loop in a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How do you find the middle of a linked list?
Write a C program to return the middle of a linked list * C/C++ Data Structures Interview Question:How do you reverse a linked list without using any C pointers?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data StructuresInterview Question:How to declare a structure of a linked list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures: Generic Linked List : Write a C program to implement a Generic Linked List....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures: Breadth First Search : Write code for doing a breadth first search in a Tree data structure...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures: Implement a Queue using an Array .
Make efficient use of the space in the array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List: Loop/Cycle Detection: Given the head pointer to a singly linked list with a loop or cycle in it...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List: Merged List Problem: There are 2 singly linked lists (list1 and list2)...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List:Find the middle element: Given a singly linked list, find the node in the middle...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List:  Find n-th element from the tail : Given a singly linked list find the n-th node from the back...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures: What are the advantages and disadvantages of B-star trees over Binary trees...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Next Page   * C/C++ Data Structures:Sort a linked list * C/C++ Data Structures:Reverse a string * C/C++ Data Structures:Insert a node in a sorted linked list * C Data Structures:Doubly Linked List :How do you reverse a doubly linked list?....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C Data Structures:Singly Linked List :How do you reverse a singly linked list?....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Java Data Structures: Teddy Bears Puzzle : the game starts when I give you some bears.
You can then give back some bears...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Java Data Structures: binary search of the array :  Implement the body of the following function using a binary search of the array...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* JAVA Data Structures: spanning Tree : What is a spanning Tree?Does the minimum spanning tree of a graph give...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* JAVA Data Structures: JAVA: Suppose that I have the following declarations...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* JAVA Data Structures: JAVA: What are the steps to inserting a new item at the head..
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Google: arrangement of blocks : You are given N blocks of height 1â€¦N.
In how many ways can you arrange these blocks...There are four people who want to cross a bridge; they all begin on the same side.
You have 17 minutes to get them all across to the other side.
It is night, and they have one flashlight.
A maximum of two people can cross the bridge at one time.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any party that crosses, either one or two people, must have the flashlight with them.
The flashlight must be walked back and forth; it cannot be thrown, for example.
Person 1 takes 1 minute to cross the bridge, person 2 takes 2 minutes, person 3 takes 5 minutes, and person 4 takes 10 minutes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A pair must walk together at the rate of the slower personâ€™s pace.
For example, if person 1 and person 4 walk across first, 10 minutes have elapsed when they get to the other side of the bridge.
If person 4 returns the flashlight, a total of 20 minutes have passed and you have failed the mission.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Solution What pointer type is used to implement the heterogeneous linked list in C?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Solution   What is the minimum number of queues needed to implement the priority queue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Solution    Which data structure is used to perform recursion?  Solution What are some of the applications for the tree data structure?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Solution   Please enable JavaScript to view this page content properly.
Technical-Interview.com Â© 2006 - 2011 Technical-Interview.com .
All rights reserved Datastructures and algorithms, Part 1 - JavaWorld InfoWorld: Modernizing IT JavaWorld: Solutions for Java Developers   * Research Centers * + Core Java * Client-side Java * Design Patterns * Java Language * Java Platform APIs * Java Programming Concepts * Swing/GUI Programming * Threads/Concurrency * + Enterprise Java * Ajax/RIA/Web 2.0 * Architecture &amp; Scalability * Enterprise Best Practices * Java &amp; XML * Java Web Development * Web Services &amp; SOAs * + Mobile Java * + Tools &amp; Methods * Application Servers * Data Management/RDBMS * Enterprise Middleware * Java IDEs * Java Security * Open Source Tools * Scripting/Other Languages * Software Development Lifecycle * Software Development Methodologies * Testing &amp; Debugging * Web Application Frameworks * + JavaWorld Archives * Design Techniques * How-to Java * Java 101 * Java Design Patterns * Java Q&amp;A * Java Tips * Java Traps * Server-side Java * Under the Hood * Site Resources * Featured Articles * News &amp; Views * Community * Java Q&amp;A * JW Blogs * Podcasts * Site Map * Newsletters * Whitepapers * RSS Feeds * About JavaWorld * Advertise * Write for JW * * JW's Most Read Recommended: Why Scala is a step up for JVM development JW's Top 5 * Java 101: Catching up with the Java Date and Time API * What do software developers do all day?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* With Spock, code testing is only logical * Open source Java iOS tools compared * 8 things you might not know about Android (InfoWorld)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Featured White Papers * CASE STUDY: Paltalk - 0 to 15 Languages in Months * Measuring Risk to Improve Java Software Quality * The MeetMe Story * 5 Keys to Translation Management – An Evaluation Guide * How to Prepare Your Website for Translation &amp; Localization * Do You Really Get Classloaders?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Pragmatic Continuous Delivery with Jenkins, Nexus, and LiveRebel * Your Next Java Web App: Less XML, No Long Restarts, Fewer Hassles * Coding with JRebel, Java Forever Changed * 2012 Developer Productivity Report: Java Tools, Tech, Devs, and Data Newsletter sign-up View all newsletters Enterprise Java Newsletter Stay up to date on the latest tutorials and Java community news posted on JavaWorld Sponsored Links * Graph databases are 1000x faster than relational.
Learn More!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Career opportunities at Harman- Careers That'll Rock Your Socks Off.
Learn More!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Developer-friendly Java PDF libraries by Qoppa Software Live Demos * Stop blaming your app!
Diagnose Java performance issues.
Free tool &gt; * UrbanCode: Go From Continuous Integration to Continuous Delivery Learn More!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sponsored Links Optimize with a SATA RAID Storage Solution Range of capacities as low as $1250 per TB.
Ideal if you currently rely on servers/disks/JBODs JavaWorld.com Datastructures and algorithms, Part 1 Explore datastructures, algorithms, flowcharts, pseudocode, and arrays By Jeff Friesen, JavaWorld.com, 05/02/03 * Print * Feedback * .
Computer science emphasizes two important topics: datastructures and algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Those topics are important because the choices you make for a program's datastructures and algorithms affect that program's memory usage (for datastructures) and CPU time (for algorithms that interact with those datastructures).
When choosing a datastructure or algorithm, you sometimes discover an inverse relationship between memory usage and CPU time: the less memory a datastructure uses, the more CPU time associated algorithms need to process the datastructure'sdata items, which are primitive type values or objects, via references.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Also, the more memory a datastructure uses, the less CPU time associated algorithms need to process the data items—and faster algorithms result.
This inverse relationship appears in Figure 1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Figure 1.
The inverse relationship between memory usage and CPU time An example of the inverse relationship between memory usage and CPU time involves the one-dimensional array and doubly-linked list datastructures, and their insertion/deletion algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For any given list of data items, a one-dimensional array occupies less memory than a doubly linked list: a doubly linked list needs to associate links with data items to find each data item's predecessor and successor, which requires extra memory.
In contrast, a one-dimensional array's insertion/deletion algorithms are slower than a doubly linked list's equivalent algorithms: inserting a data item into or deleting a data item from a one-dimensional array requires data item movement to expose an empty element for insertion or close an element made empty by deletion.
(I explore one-dimensional arrays later in this article, and doubly linked lists in next month's article.)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This article initiates a two-part series that explores datastructures and algorithms.
The article begins with a presentation of basic concepts and continues with a tour of the array datastructure.
You learn about one-dimensional, two-dimensional, and ragged arrays, plus linear-search, bubble-sort, binary-search, and matrix-multiplication array-oriented algorithms.
The article ends by asserting that Java's arrays are objects.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Note: You can download the source code that accompanies this article from Resources .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Datastructure and algorithm basics Before we explore specific datastructures and algorithms, we need to examine three basic questions: What is a datastructure?
What is an algorithm?
How do you represent an algorithm?
Knowledge of those concepts helps you understand this series.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What is a datastructure?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Datastructures have been around since the structured programming era.
A definition from that era: a datastructure is a set of types, a designated type from that type set, a set of functions, and a set of axioms.
That definition implies that a datastructure is a type with implementation.
In our object-oriented programming era,type with implementation means class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The datastructure is a class definition is too broad because it embraces Employee, Vehicle, Account, and many other real-world entity-specific classes as datastructures.
Although those classes structure various data items, they do so to describe real-world entities (in the form of objects) instead of describing container objects for other entity (and possibly container) objects.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This containment idea leads to a more appropriate datastructure definition: a datastructure is a container class that provides storage for data items, and capabilities for storing and retrieving data items.
Examples of container datastructures: arrays, linked lists, stacks, and queues.
(I will explore the linked-list, stack, and queue datastructures next month.)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 1 * 2 * 3 * 4 * 5 * 6 * 7 * Next &gt; * Print * Feedback More from JavaWorld * Sockets programming in Java: A tutorial * Smartly load your properties * Using JavaScript and forms More from CITEworld * BYOD Trends to Explode over Next 2 Years * Don't forget the basics when looking towards IT's future * A global perspective on consumerization of IT Resources * Download this article's source code and resource files http://www.javaworld.com/javaworld/jw-05-2003/java101/jw-0502-java101.zip * For a glossary specific to this article, homework, and more, see the Java 101 study guide that accompanies this article http://www.javaworld.com/javaworld/jw-05-2003/jw-0502-java101guide.html * Chapter 10 of the Java Language Specification, James Gosling, Bill Joy, Guy Steele, Gilad Bracha (Sun Microsystems, 2000) http://java.sun.com/docs/books/jls/second_edition/html/arrays.doc.html * The official UML homepage http://www.uml.org/ * For more on sorting algorithms, read Alex Blewitt's &quot;Sort It Out&quot; ( JavaWorld, December 2002) http://www.javaworld.com/javaworld/jw-12-2002/jw-1227-sort.html * Review Jeff's previous Java 101 column&quot;Regular Expressions Simplify Pattern-Matching Code&quot; (JavaWorld, February 2003) http://www.javaworld.com/javaworld/jw-02-2003/jw-0207-java101.html * Check out past Java 101 articles http://www.javaworld.com/javaworld/topicalindex/jw-ti-java101.html * Browse the Core Java section of JavaWorld's Topical Index http://www.javaworld.com/channel_content/jw-core-index.shtml * Need some Java help?
Visit our Java Beginner discussion http://forums.idg.net/webx?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>50@@.ee6b804 * Java experts answer your toughest Java questions in JavaWorld's Java Q&amp;A column http://www.javaworld.com/javaworld/javaqa/javaqa-index.html * For Tips 'N Tricks, see http://www.javaworld.com/javaworld/javatips/jw-javatips.index.html * Sign up for JavaWorld's free weekly Core Java email newsletter http://www.javaworld.com/subscribe Sponsored Links The Top Java Security Pitfalls &amp; How to Avoid Them: A Practical Guide Java out of memory error?
Use heaps up to 512GB without GC pauses.
Click here for pauseless GC white paper.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Stop blaming your app!
Diagnose Java performance issues.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Free tool »   RESEARCH CENTERS: Java Standard Edition | Java Enterprise Edition | Java Micro Edition | Development Tools About Us | Advertise | Contact Us | Terms of Service/Privacy Copyright , 2006-2008 Network World, Inc.
All rights reserved. * RESEARCH CENTERS Core Java Enterprise Java Mobile Java Tools &amp; Methods JavaWorld Archives * IDG Network CFOworld CIO CITEworld Computerworld CSO * DEMO IDG Connect IDG Knowledge Hub IDG TechNetwork IDG Ventures * InfoWorld ITworld JavaWorld LinuxWorld Macworld * Network World PC World TechHive Technology Briefcase About Us | Advertise | Contact Us | Terms of Service/Privacy | AdChoices Copyright , 2006-2013 Infoworld, Inc.
All rights reserved.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structures and Algorithms For GATE: Solutions to all previous ...
SlideShare * Upload * Browse   * Popular * Downloaded * Liked * Videos * Featured * Go Pro * Login * Signup * Email * Like * Liked × * Save * Private Content * Embed * Loading embed code… * We have emailed the verification/download link to &quot;&quot;.
Login to your email and click the link to download the file directly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To request the link at a different email address, update it here.
Close Validation messages.
Success message.
Fail message.
Check your bulk/spam folders if you can't find our mail.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* * Loading   ‹ ›     /15     * Related * More * Lect 8(pointers) Zaheer Abbas 490 views Like Liked * Lect 9(pointers) Zaheer Abbas 322 views Like Liked * Ch6 pointers (latest) 392 views Like Liked * Pointer in c++ part2 554 views Like Liked * Chp3(pointers ref) 174 views Like Liked * Pointers in C/C++ 171 views Like Liked * Chapter 13.1.8 89 views Like Liked * Introduction to pointers and memory management in C 8258 views Like Liked * 09 1 Pointers 904 views Like Liked * Scope, binding, papameter passing techniques 1067 views Like Liked * Unit4 Slides 986 views Like Liked * Pointers 179 views Like Liked * Pointers (Pp Tminimizer) 2764 views Like Liked * Pointers in C 1526 views Like Liked * Lecturer23 pointersin c.ppt 3447 views Like Liked * C++ Beginner S Guide C H04 1139 views Like Liked * Advanced+pointers 625 views Like Liked * oop Lecture 17 164 views Like Liked * Savitch Ch 09 689 views Like Liked * Savitch ch 09 125 views Like Liked * Ponters 348 views Like Liked * Ponters 419 views Like Liked * Pointer 1970 views Like Liked * C programming session 05 645 views Like Liked * Unit3 C 260 views Like Liked * C Language Unit-3 687 views Like Liked * C material 990 views Like Liked * L03-ajc-C-arrays 527 views Like Liked * Pointers 329 views Like Liked * Pointers 250 views Like Liked * Pointers c imp 265 views Like Liked * Pointers 109 views Like Liked * The Function Pointer Tutorials 1073 views Like Liked * C interview-questions-techpreparation 118 views Like Liked * C interview-questions-techpreparation 119 views Like Liked * C interview-questions-techpreparation 241 views Like Liked * C tutorial[1] 340 views Like Liked * The ultimate C Like Liked * Data structures and algorithms made easy Like Liked * Peeling Design Patterns Like Liked * The ultimate C 125 views Like Liked * Data structures and algorithms made easy 1834 views Like Liked * Peeling Design Patterns 171 views Like Liked * Coding interview questions 91 views Like Liked * Data structures and algorithms made easy java 949 views Like Liked Follow Author * * Tweet * * * Pin It * Wordpress + Follow Data Structures and Algorithms For GATE: Solutions to all previous GATE questions since 1991 by CareerMonk Publications on Oct 13, 2012 * 1,861 views Data structures and algorithms for gate More… Data structures and algorithms for gate Less Accessibility * View text version Categories * * Books Upload Details Uploaded via SlideShare as Adobe PDF Usage Rights © All Rights Reserved Flagged as inappropriate Flag as inappropriate Flag as inappropriate Select your reason for flagging this presentation as inappropriate.
If needed, use thefeedback form to let us know more details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>None Pornographic Defamatory Illegal/Unlawful Spam Other Terms Of Service Violation Cancel File a copyright complaint Statistics Likes 0 Downloads 68 Comments 0 Embed Views 0 Views on SlideShare 1,861 Total Views 1,861 * No comments yet * Notes on Slide 1 Subscribe to comments Post Comment Edit your comment Cancel More… Data Structures and Algorithms For GATE: Solutions to all previous GATE questions since 1991 Document Transcript * DATA STRUCTURES ANDALGORITHMS FOR GATE-To All Hard Working GATE Aspirants * Copyright© by All rights reserved.
Designed byCopyright© Career Monk Publications.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All rights reserved.All rights reserved.
No part of this book may be reproduced in any form or by any electronic or mechanicalmeans, including information storage and retrieval systems, without written permission from the publisher orauthor * AcknowledgementsI would like to express my gratitude to many people who saw me through this book, to all those who providedsupport, talked things over, read, wrote, offered comments, allowed me to quote their remarks and assisted inthe editing, proofreading and design.
In particular, I would like to thank the following individuals. [ ], for his encouragement during my stay at . [ ], [ , ] forspending their valuable time in reviewing the book, suggestions and encouragement. &amp; [Founders of ], for approaching me for teaching at their training centers. , and have contributed greatly to the quality of this book.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I thank all offor your help and suggestions.Last but not least, I would like to thank of , &amp; [ ], [ of ], [ , ],[ ], [ , ]&amp; for helping me andmy family during our studies. - M-Tech, Founder of * A stone is broken by the last stroke.
This does not mean that first stroke was useless.
Success is a result of continuous daily effort. --Stand up, be bold, be strong.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Take the whole responsibility on your own shoulders, and know that you are the creator of your own destiny. -- * PrefaceDear Reader,Please Hold on!
I know many people do not read preface.
But I would like to strongly recommend readingpreface of this book at least.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This preface has from regular prefaces.This book assumes you have some basic knowledge about computer science.
Main objective of the book is not togive you the theorems and proofs about and .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I have followed a pattern ofimproving the problem solutions with different complexities (for each problem, you observe multiple solutionswith different improved complexities).
Basically, it’s an enumeration of possible solutions.
With this approach,even if we get a new question it gives us a way to think about all possible solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For all other topics, it willact as a refreshment.
This book is very much useful for interview preparation, competitive exams preparation,campus preparations.This book is aimed for GATE students.
We have tried to solve all problems related to and from the last twenty years papers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Each solution has explanation associated with it and this givesthe confidence for readers about the correctness of the solutions.
As a if you read complete bookwith good understanding, I am sure you will challenge the interviewers and that is the objective of this book.This book is very much useful for the of and during their academicpreparations.
All the chapters of this book contain theory and their related problems as many as possible.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If youread as a preparing for competition exams for Computer Science/Information Technology], the contentof this book covers the topics in full details.
While writing the book, an intense care has beentaken to help students who are preparing for these kinds of exams.In all the chapters you will see more importance given to and analyzing them instead ofconcentrating more on theory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For each chapter, first you will see the basic required theory and then followedby problems.For many of the problems, solutions are provided with different complexities.
We start with solution and slowly move towards the possible for that problem.
For each problemwe will try to understand how much time the algorithm is taking and how much memory the algorithm istaking.It is that, at least one complete reading of this book is required to get full understanding of allthe topics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the subsequent readings, you can directly go to any chapter and refer.
Even though, enoughreadings were given for correcting the errors, due to human tendency there could be some minor typos in thebook.
If any such typos found, they will be updated at .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I request you to constantlymonitor this site for any corrections, new problems and solutions.
Also, please provide your valuablesuggestions at: .
Wish you all the best.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Have a nice reading. - M-Tech, Founder of * ForewordWith the availability of different books on Data Structures and/or Algorithms, their design and analysis with ageneral or language based orientation; one would be in gross error to think that this book is one more to the list.Keeping in view the GATE and other competitive exams perspective in mind and critical time managementrequirement, the author has taken the approach of embedding theoretical concepts through efficient problemsolving.The different topics related to data structures and algorithms and their intricate interdependency have beendealt with comprehensive eloquence and subtle clarity.The topics coverage in the book spans from primitive to advanced data structures, their characteristics, theirspace and time complexity analysis, the different algorithmic paradigms/classifications, application areas andproblems and their analysis.Each topic is explained through a problem solving approach so that at the end, the reader is well equipped to beable to apply to any type of problem solving requirement and distinctly choose one strategy or type from theother.The book also includes solved GATE questions of last twenty years which works as a mock exam practice planefor the reader.
It is a very handy and must have book for any reader aiming for competitive exams of alluniversities and boards and as well as for campus recruitment.
It can also serve as a reference text-book forsoftware developers, who wanted to design and implement efficient algorithms. . , . * Table of Contents1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Programming Basics ---------------------------------------------------------------------- 92.
Introduction ----------------------------------------------------------------------------- 303.
Recursion and Backtracking ------------------------------------------------------------ 524.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Linked Lists ----------------------------------------------------------------------------- 575.
Stacks ------------------------------------------------------------------------------------ 936.
Queues---------------------------------------------------------------------------------- 1137.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Trees ------------------------------------------------------------------------------------ 1238.
Priority Queue and Heaps ------------------------------------------------------------- 1939.
Disjoint Sets ADT ---------------------------------------------------------------------- 21110.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Graph Algorithms ---------------------------------------------------------------------- 22011.
Sorting ---------------------------------------------------------------------------------- 25912.
Searching ------------------------------------------------------------------------------- 28013.
Selection Algorithms ------------------------------------------------------------------- 30414.
Symbol Tables -------------------------------------------------------------------------- 31115.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Hashing --------------------------------------------------------------------------------- 31316.
String Algorithms ---------------------------------------------------------------------- 32917.
Algorithms Design Techniques -------------------------------------------------------- 35018.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Greedy Algorithms --------------------------------------------------------------------- 35319.
Divide and Conquer Algorithms ------------------------------------------------------ 36320.
Dynamic Programming ---------------------------------------------------------------- 37721.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Complexity Classes --------------------------------------------------------------------- 41522.
Miscellaneous Concepts --------------------------------------------------------------- 422 * Other Titles by Success keys for Big Job Hunters Data Structures and Algorithms Made Easy (C/C++) Data Structures and Algorithms Made Easy in Java Coding Interview Questions Peeling Design Patterns * Data Structures and Algorithms For GATE Programming Basics Chapter-1 PROGRAMMING BASICSThe objective of this chapter is to explain the importance of analysis of algorithms, their notations, relationships andsolving as many problems as possible.
We first concentrate on understanding the basic elements of algorithms,importance of analysis and then slowly move towards analyzing the algorithms with different notations and finally theproblems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>After completion of this chapter you should be able to find the complexity of any given algorithm(especially recursive functions).1.1 VariablesBefore going to the definition of variables, let us relate them to old mathematical equations.
All of us have solvedmany mathematical equations since childhood.
As an example, consider the below equation:We don’t have to worry about the use of above equation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The important thing that we need to understand is, theequation has some names ( and ) which hold values (data).
That means, the ( and ) are the place holdersfor representing data.
Similarly, in computer science we need something for holding data and are thefacility for doing that.1.2 Data typesIn the above equation, the variables and can take any values like integral numbers ( , etc...), real numbers( etc…) or just and .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To solve the equation, we need to relate them to kind of values they can take and is the name being used in computer science for this purpose.A in a programming language is a set of data with values having predefined characteristics.
Examples ofdata types are: integer, floating point unit number, character, string etc...Computer memory is all filled with zeros and ones.
If we have a problem and wanted to code it, it’s very difficult toprovide the solution in terms of zeros and ones.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To help users, programming languages and compilers are providing thefacility of data types.For example, takes bytes (actual value depends on compiler), takes bytes etc… This says that, inmemory we are combining bytes ( bits) and calling it as .
Similarly, combining bytes ( bits) andcalling it as .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A data type reduces the coding effort.
Basically, at the top level, there are two types of data types:  System defined data types (also called data types)  User defined data typesSystem defined data types (Primitive data types)Data types which are defined by system are called data types.
The primitive data types which are providedby many programming languages are: int, float, char, double, bool, etc… The number of bits allocated for eachprimitive data type depends on the programming languages, compiler and operating system.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For the same primitivedata type, different languages may use different sizes.
Depending on the size of the data types the total available values(domain) will also changes.
For example, “ &quot; may take bytes or bytes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If it takes bytes ( bits) then the total1.1 Variables 9 * Data Structures and Algorithms For GATE Programming Basicspossible values are - to + (- -1).
If it takes, bytes ( bits), then the possible values arebetween to (- -1).
Same is the case with remaining data types too.User defined data typesIf the system defined data types are not enough then most programming languages allows the users to define their owndata types called as user defined data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Good example of user defined data types are: structures in andclasses in .For example, in the below case, we are combining many system defined data types and called it as user defined datatype with name “ &quot;.
This gives more flexibility and comfort in dealing with computer memory. struct newType { int data1; float data 2; … char data; };1.3 Data StructureBased on the above discussion, once we have data in variables, we need some mechanism for manipulating that data tosolve problems. is a particular way of storing and organizing data in a computer so that it can be usedefficiently.
That means, a is a specialized format for organizing and storing data.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>General datastructure types include arrays, files, linked lists, stacks, queues, trees, graphs and so on.
Depending on the organizationof the elements, data structures are classified into two types: 1) Elements are accessed in a sequential order but it is not compulsory to store all elements sequentially (say, Linked Lists). : Linked Lists, Stacks and Queues.
2) : Elements of this data structure are stored/accessed in a non-linear order. : Trees and graphs.1.4 Abstract Data Types (ADTs)Before defining abstract data types, let us consider the different view of system defined data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We all know that,by default, all primitive data types (int, float, et..) supports basic operations like addition, subtraction etc… The systemis providing the implementations for the primitive data types.
For user defined data types also we need to defineoperations.
The implementation for these operations can be done when we want to actually use them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>That means, ingeneral user defined data types are defined along with their operations.To simplify the process of solving the problems, we generally combine the data structures along with their operationsand are called (ADTs).
An ADT consists of parts: 1.
Declaration of data 2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Declaration of operationsCommonly used ADTs : Linked Lists, Stacks, Queues, Priority Queues, Binary Trees, Dictionaries, Disjoint Sets(Union and Find), Hash Tables, Graphs, and many other.
For example, stack uses LIFO (Last-In-First-Out) mechanismwhile storing the data in data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The last element inserted into the stack is the first element that gets deleted.Common operations of it are: creating the stack, pushing an element onto the stack, popping an element from stack,finding the current top of the stack, finding number of elements in the stack etc...While defining the ADTs do not care about implementation details.
They come in to picture only when we want touse them.
Different kinds of ADTs are suited to different kinds of applications, and some are highly specialized tospecific tasks.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By the end of this book, we will go through many of them and you will be in a position to relate the datastructures to the kind of problems they solve.1.3 Data Structure 10 * Data Structures and Algorithms For GATE Programming Basics1.5 Memory and Variables Address Memory Value 0 Memory Value 1 2 ... … … … …First let’s understand the way memory is organized in a computer.
We can treat the memory as an array of bytes.
Eachlocation is identified by an address (index to array).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In general, the address is not a valid memory location.
It isimportant to understand that the address of any byte (location) in memory is an integer.
In the below diagram valuedepends on the main memory size of the system.To read or write any location, CPU accesses it by sending its address to the memory controller.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When we create avariable (for example, in : ), the compiler allocates a block of contiguous memory locations and its size dependson the size of the variable.
The compiler also keeps an internal tag that associates the variable name with the addressof the first byte allocated to it (sometimes called as ).
So when we want to access that variable like this: , the compiler knows where that variable is located and it writes the value .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value 0 Memory Value 1 2 ...
X … … 2000 …Size of a Variable: operator is used to find size of the variable (how much memory a variable occupies).
Forexample, on some computers, ( ) gives the value .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means an integer needs contiguous bytes in memory.If the address of would be , then the actual memory locations used by are: and .Address of a Variable: In language, we can get the address of a variable using operator ( ).
The belowcode prints the address of variable.
In general, addresses are printed in hexadecimal as they are compact and alsoeasy to understand if the addresses are big.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value 0 Memory Value X 1 2 ...
&amp;XAddress of X … … is 2000 2000 … int X; printf(&quot;The address is: %un&quot;, &amp;X);1.5 Memory and Variables 11 * Data Structures and Algorithms For GATE Programming Basics1.6 PointersPointers are also variables which can hold the address of another variable.Declaration of Pointers: To declare a pointer, we have to specify the type of the variable it will point to.
That meanswe need to specify the type of the variable whose address it’s going to hold.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The declaration is very simple.
Let us seesome examples of pointer declarations below: int *ptr1; float *ptr2; unsigned int *ptr3; char *ptr4; void *ptr5;Here is a pointer that can point to an variable, can point to a , to an , andto a .
Finally is a pointer that can point to anything.
These pointers are called pointers, and there aresome restrictions on what we can do with void pointers.Pointers Usage: As we said, pointers hold addresses.
That means, we can assign the address of a variable to it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let usconsider the below sample code: int X = 10; int *ptr = &amp;X;Here, we first declare an integer named and initialize it to the value .
Then we create a pointer to namedand assign the address of to it.
This is called, “ .&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A common operation we can dowith a pointer is what is called and it is a way to access the contents of the memory that it points to.
Theindirection operator is represented by the asterisk symbol.
Do not confuse this operator with the use of the sameasterisk symbol in the declaration of pointers, they are not the same thing.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value &amp;ptrAddress of 0 Memory Value ptr is 2 1 ptr 2 2000 … … &amp;XAddress of X X 2000 is 2000 …If we would like to access the contents of the memory where points to, we would do it like this: Let’s see asmall code that shows pointer indirections. int X = 10; int *ptr = &amp;X; printf(&quot;X contains the value %dn&quot;, X); printf(&quot;ptr points to %pn&quot;, ptr); printf(&quot;there lies the value %dn&quot;, *ptr); *ptr = 25; printf(&quot;now X contains the value %dn&quot;, X);Here we first declare and just like before.
Then we print (which is ), followed by , i.e., the contents ofthe variable which is an address; the address of .
And finally we print , which is the value of the memorylocation where points to (again 10, since it points to the location occupied by the variable in memory).Finally we change the contents of the location where points to by writing , this means assign the value to wherever is pointing to.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Note that when we do that, what actually happening is modifying the value of .1.6 Pointers 12 * Data Structures and Algorithms For GATE Programming BasicsThis is because, holds the address of , and changing the contents of the memory at that address changes the valueof .One limitation of pointers, i.e. pointers that can point to any type, is that they cannot be .
This isbecause of the fact that each variable type takes different amount of memory.
On a -bit computer for exampleusually an int needs bytes, while a short bytes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So in order to read the actual value stored there, the compiler has toknow how many consecutive memory locations to read in order to get the full value.Pointer Manipulation: Another very useful thing we can do with pointers is to perform arithmetic operations on them.This might be obvious to the careful reader, since we said that pointers are just integers.
However, there are a fewsmall differences on pointer arithmetic that make their use even more intuitive and easy.
Try the following code: char *cptr = (char*)2; printf(&quot;cptr before: %p &quot;, cptr); cptr++; printf(&quot;and after: %pn&quot;, cptr);We declare a pointer named and assign the address to it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We print the contents of the pointer (i.e. the address ), increment it, and print again.
Sure enough the first time it prints and then , and that was exactly what weexpected.
However try this one as well: int *iptr = (int*)2; printf(&quot;iptr before: %p &quot;, iptr); iptr++; printf(&quot;and after: %pn&quot;, iptr);Now the output, on my computer, is before: and after: Why does this pointer point to the address 6 afterincremented it by one and not to as the previous pointer?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The answer lies with what we said about thevariables.
An int is bytes on my computer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means that if we have an int at the address , then that int occupiesthe memory locations and .
So in order to access to the next int we have to look at the address and .Thus when we add one to a pointer, it is not the same as adding one to any integer, it means give me a pointer to thenext variable which for variables of type int, in this case, is bytes ahead.The reason that in the first example with the char pointer, the actual address after incrementing, was one more thanthe previous address is because the size of char is exactly .
So the next char can indeed be found on the next address.Another limitation of void pointers is that we cannot perform arithmetic on them, since the compiler cannot knowhow many bytes ahead is the next variable located.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So void pointers can only be used to keep addresses that we have toconvert later on to a specific pointer type, before using them.Arrays and Pointers: There is a strong connection between arrays and pointers.
So strong in fact, that most of the timewe can treat them as the same thing.
The name of an array can be considered just as a pointer to the beginning of amemory block as big as the array.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So for example, making a pointer point to the beginning of an array is done inexactly the same way as assigning the contents of a pointer to another: short *ptr; short array[10]; ptr = array;and then we can access the contents of the array through the pointer as if the pointer itself was that array.
Forexample this: is perfectly legal.
Furthermore, we can treat the array itself as a pointer, for example, is equivalent to In general is equivalent to .The only difference between an array, and a pointer to the beginning of an array, is that the compiler keeps some extrainformation for the arrays, to keep track of their storage requirements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example if we get the size of both an arrayand a pointer using the operator, sizeof(ptr) will give us how much space does the pointer itself occupies ( onmy computer), while sizeof array will give us, the amount of space occupied by the whole array (on my computer elements of bytes each).1.6 Pointers 13 * Data Structures and Algorithms For GATE Programming BasicsDynamic Memory Allocation: In the earlier sections, we have seen that pointers can hold addressed of anothervariables.
There is another use of pointers: pointers can hold addresses of memory locations that do not have a specificcompile-time variable name, but are allocated dynamically while the program runs (sometimes such memory is called ).To allocate memory during runtime, language provides us the facility interns of function.
This functionallocates the requested amount of memory, and returns a pointer to that memory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To deallocate that block of memory, supports it by providing function.
This function takes the pointer as an argument.
For example, in the belowcode, an array of 5 integers is allocated dynamically, and then deleted. int count = 5; int *A = malloc(count * sizeof(int)); ……… free(arr);In this example, the calculates the amount of bytes we need to allocate for the array, bymultiplying the number of elements, to the size of each element (i.e. the size of one integer).Function Pointers: Like data, executable code (including functions) also stored in memory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can get the address of afunction.
But the question is what type of pointers we use for that purpose?In general, we use function pointers and they store the address of functions.
Using function pointers we can call thefunction indirectly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But, function pointers manipulation has limitation: limited to assignment and indirection andcannot do arithmetic on function pointers.
Because for function pointers there no ordering (functions can be storedanywhere in memory).
The following example illustrates how to create and use function pointers. int (*fptr)(int); fptr = function1; printf(&quot;function1of 0 is: %dn&quot;, fptr(5)); fptr = function2; printf(&quot;function2 of 0 is: %dn&quot;, fptr(10));First we create a pointer that can point to functions accepting an as an argument and returning int, named .Then we make point to the , and proceed to call it through the pointer, to print the of .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Finally, we change to point to , and call it again in exactly the same manner, to print the of .1.7 Parameter Passing TechniquesBefore starting our discussion on parameter passing techniques, let us concentrate on the terminology we use.Actual and Formal Parameters: Let us assume that a function is called from another function .
In this case, iscalled the “caller function&quot; and is called the “called function or callee function&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Also, the arguments which sendsto are called actual arguments and the parameters of function are called formal arguments.
In the below example,the is called from function. is the caller function and is the called function.
Also, thearguments and are formal arguments and of function are actual arguments. int main() { long i = 1; double j = 2; // Call func with actual arguments i and j. func( i, j ); } // func with formal parameters param1 and param2. void func( long param1, double param2 ){ }1.7 Parameter Passing Techniques 14 * Data Structures and Algorithms For GATE Programming BasicsSemantics of Parameter Passing: Logically, parameter passing uses the following semantics:  IN: Passes info from caller to .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Formal arguments can take values from actual arguments, but cannot send values to actual arguments.  OUT: Callee writes values in the caller.
Formal arguments can send values from actual arguments, but cannot take values from actual arguments.  IN/OUT: Caller tells callee value of variable, which may be updated by callee.
Formal arguments can send values from actual arguments, and also can take values from actual arguments.Language Support for Parameter Passing Techniques Passing Technique Supported by Languages Pass by value Pass by result Pass by value-result , sometimes Pass by reference (achieves through pointers), Pass by namePass by Value: This method uses in-mode semantics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A formal parameter is like a new local variable that exists withinthe scope of the procedure/function/subprogram.
Value of actual parameter is used to initialize the formal parameter.Changes made to formal parameter get transmitted back to the caller.
If pass by value is used then the formalparameters will be allocated on stack like a normal local variable.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This method is sometimes called as .Advantage of this method is that, it allows the actual arguments not to modify.In general the pass by value technique is implemented by copy and it has the following disadvantages:  Inefficiency in storage allocation  Inefficiency in copying value  For objects and arrays, the copy semantics are costlyExample: In the following example, main passes func two values: and .
The function func receives copies of thesevalues and accesses them by the identifiers a and b.
The function func changes the value of a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When control passesback to main, the actual values of and are not changed. void func (int a, int b) { a += b; printf(&quot;In func, a = %d b = %dn&quot;, a, b); } int main(void) { int x = 5, y = 7; func(x, y); printf(&quot;In main, x = %d y = %dn&quot;, x, y); return 0; } The output of the program is: In func, a = 12 b = 7.
In main, x = 5 y = 7Pass by Result: This method uses out-mode semantics.
A formal parameter is a new local variable that exists within thescope of the function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>No value is transmitted from actual arguments to formal arguments.
Just before control istransferred back to the caller, the value of the formal parameter is transmitted back to the actual parameter.
Thismethod is sometimes called asActual parameter be a variable. and are fine but not or .Parameter collisions can occur: That means, suppose let us assume that there is a function If the twoformal parameters in write had different names, which value should go into ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Order in which actual parameters arecopied determines their value.
In general the pass by result technique is implemented by copy and it has the followingdisadvantages:1.7 Parameter Passing Techniques 15 * Follow us on LinkedIn * Follow us on Twitter * Find us on Facebook * Find us on Google+ * Learn About Us * About * Careers * Our Blog * Press * Contact us * Help &amp; Support * Using SlideShare * SlideShare 101 * Terms of Use * Privacy Policy * Copyright &amp; DMCA * Community Guidelines * SlideShare on mobile * Pro &amp; more * Go PRO New * Business Solutions * Developers &amp; API * Developers Section * Developers Group * Engineering Blog * Blog Widgets © 2013 SlideShare Inc.
All rights reserved.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>RSS Feed * × This activity has also been shared with your LinkedIn network  Undo LinkedIn share  Settings * Edit your favorites Cancel Data Structures and Algorithms | Set 22 - GeeksforGeeks | GeeksforGeeks GeeksforGeeks A computer science portal for geeks Log in * Home * Q&amp;A * Interview Corner * Ask a question * Contribute * GATE * Algorithms * C * C++ * Books * About us * Arrays * Bit Magic * C/C++ Puzzles * Articles * GFacts * Linked Lists * MCQ * Misc * Output * Strings * Trees Data Structures and Algorithms | Set 22 March 31, 2010 Following questions have been asked in GATE CS 2005 exam.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1) A program P reads in 500 integers in the range [0..100] exepresenting the scores of 500 students.
It then prints the frequency of each score above 50.
What would be the best way for P to store the frequencies?
(a) An array of 50 numbers (b) An array of 100 numbers (c) An array of 500 numbers (d) A dynamically allocated array of 550 numbers Answer (a) An array of size 50 looks the best option to store number of students for each score.
We need to store frequencies of scores above 50.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can ignore scores below 50 and to index the scores above 50, we can subtract 50 from the score value/ 2) An undirected graph G has n nodes.
Its adjacency matrix is given by an n × n square matrix whose (i) diagonal elements are 0‘s and (ii) non-diagonal elements are 1‘s. which one of the following is TRUE?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(a) Graph G has no minimum spanning tree (MST) (b) Graph G has a unique MST of cost n-1 (c) Graph G has multiple distinct MSTs, each of cost n-1 (d) Graph G has multiple spanning trees of different costs Answer (c) If all non diagonal elements are 1, then every vertex is connected to every other vertex in the graph with an edge of weight 1.
Such a graph has multiple distinct MSTs with cost n-1.
See the below example.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The connected graph:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Below are three Minimum Spanning trees each of cost 2.0.
Minimum Spanning Tree 1 Minimum Spanning Tree 2 Minimum Spanning Tree 3 3) The time complexity of computing the transitive closure of a binary relation on a set of n elements is known to be: a) O(n) b) O(nLogn) c) O(n&lt;s&gt;(3/2)) d) O(n&lt;s&gt;3)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Answer (d) In mathematics, the transitive closure of a binary relation R on a set X is the smallest transitive relation on X that contains R.
If the original relation is transitive, the transitive closure will be that same relation; otherwise, the transitive closure will be a different relation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In computer science the concept of transitive closure can be thought of as constructing a data structure that makes it possible to answer reachability questions.
That is, can one get from node a to node other node b in one or more hops?
A binary relation tells you only that node a is connected to node b, and that node b is connected to node c, etc.
After the transitive closure is constructed in an O(1) operation one may determine that node c is reachable from node a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Warshall’s algorithm can be used to construct the Transitive closure of directed graphs ().
In Warshall’s original formulation of the algorithm, the graph is unweighted and represented by a Boolean adjacency matrix.
Then the addition operation is replaced by logical conjunction (AND) and the minimum operation by logical disjunction (OR).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>References: http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm http://en.wikipedia.org/wiki/Transitive_closure 4.
A Priority-Queue is implemented as a Max-Heap.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Initially, it has 5 elements.
The level-order traversal of the heap is given below: 10, 8, 5, 3, 2 Two new elements &quot;1‘ and &quot;7‘ are inserted in the heap in that order.
The level-order traversal of the heap after the insertion of the elements is: (a) 10, 8, 7, 5, 3, 2, 1 (b) 10, 8, 7, 2, 3, 1, 5 (c) 10, 8, 7, 1, 2, 3, 5 (d) 10, 8, 7, 3, 2, 1, 5 Answer (D)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Original Max-Heap is:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>10 / \ 8 5 / \ 3 2 After Insertion of 1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>10 / \ 8 5 / \ / 3 2 1 After Insertion of 7.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>10 / \ 8 7 / \ / \ 3 2 1 5 Please write comments if you find any of the answers/explanations incorrect, or you want to share more information about the topics discussed above.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You may also like following posts * Data Structures and Algorithms | Set 7 * Data Structures and Algorithms | Set 8 * Data Structures and Algorithms | Set 12 * Data Structures and Algorithms | Set 15 * Data Structures and Algorithms | Set 17 * * * Tweet * You may also like following posts * Data Structures and Algorithms | Set 7 * Data Structures and Algorithms | Set 8 * Data Structures and Algorithms | Set 12 * Data Structures and Algorithms | Set 15 * Data Structures and Algorithms | Set 17 Facebook Comments comments 5 comments so far * GeeksforGeeks says: February 24, 2012 at 1:28 PM @All: In question 1, 50 seems to be the correct answer.
We have updated the post with answer as 50.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * Kuushagra says: November 27, 2011 at 5:00 PM array of size 50 can be use with time complexity O(n).Could anything be better than this?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * raj says: November 9, 2011 at 7:01 PM /* Paste your code here (You may delete these lines if not writing code) */ the reason for talking the 100 integer space is that in 50 integer space you will not be able to count the correct frequency of 50 and if you did, complexity of program will increase...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * lord says: October 8, 2011 at 10:33 PM question no.
1 answer is a. why do we need to waste another 50 integer spaces???
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * shubham.velocity says: September 25, 2011 at 8:46 AM in question 1. since only the frequency of scores above 50 needs to be printed, an array of 50 numbers should be sufficient for it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>thus the answer to the question should be (a).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply Comment Click here to cancel reply.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Name (Required) Email (Required) Website URI Your Comment (Writing code? please paste your code between sourcecode tags) [sourcecode language=&quot;C&quot;] /* Paste your code here (You may delete these lines if not writing code) */ [/sourcecode]
Notify me of followup comments via e-mail.
You can alsosubscribe without commenting.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  * Loading * * Interview Experiences * Advanced Data Structures * Dynamic Programming * Greedy Algorithms * Backtracking * Pattern Searching * Divide &amp; Conquer * Graph * Mathematical Algorithms * Recursion * Java * * * Popular Posts * All permutations of a given string * Memory Layout of C Programs * Understanding “extern&quot; keyword in C * Median of two sorted arrays * Tree traversal without recursion and without stack!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Structure Member Alignment, Padding and Data Packing * Intersection point of two Linked Lists * Lowest Common Ancestor in a BST.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Check if a binary tree is BST or not * Sorted Linked List to Balanced BST * * Follow Subscribe * Recent Comments * praveen on Do we need forward declarations in Java?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* vandermonde on Check if a number is Palindrome * GeeksforGeeks on Dynamic Programming | Set 22 (Box Stacking Problem)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Hill Billy on Dynamic Programming | Set 22 (Box Stacking Problem)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* shek8034 on GS Labs Interview | Set 1 * Ravi on GS Labs Interview | Set 1 * maverick01 on Check if a number is Palindrome * vishwanath on Reverse a Linked List in groups of given size @geeksforgeeks,Some rights reserved        Contact Us Powered by WordPress &amp; MooTools , customized by geeksforgeeks team Data Structures and Algorithms: Sample Exam Questions Data Structures and Algorithms: Sample Exam Questions * Abstract Data Types and C++ * Data Abstraction and Encapsulation * ADTs and C++ * Array Based ADTs * The Array as an ADT * The Polynomial ADT * The Sparse Matrix ADT * Bags, Stacks, and Queues * Algorithms and Performance Analysis * Algorithms * Performance Analysis * Linked Lists * Linked Lists * Linked List Based ADTs * More Linked Lists * Trees * The Tree ADT * Binary Trees * Graphs * The Graph ADT * Graph Algorithms * Activity Networks * Hashing * Static Hashing * Ordered Trees * Selection Trees and Heaps * Search Trees Algorithms and Data Structure Interview Preparation GuideJoel * Home * Software Development * Resume * Contact * Algorithms and Data Structure Interview Preparation Guide Apr 4, 2012 by Joel     No Comments     Posted under: Software Development This article is part of a series I’ve written on senior .net developer interviews.  
The goal of the series is not to provide a list of interview questions that you might be asked, but to provide a list of questions that ensures that you have a comprehensive understanding of .net and software development.  
To read the complete guide, visit Interview Preparation for Senior Software Developers .
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Steve Yegge already wrote an excellent article on what you need to know in terms of algorithms and datastructures (Get that job at Google ) so this post will cover some additional thoughts and how to get the knowledge that Steve is talking about.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Contents * 1 Types of Interviews and Generalizations * 2 How to prepare for algorithms and data structure questions * 2.1 1.
Determine what you don’t know * 2.2 2.
Learn the stuff you don’t know * 2.3 3.
Practice under similar conditions * 3 Thoughts on Questions with a Trick Types of Interviews and Generalizations First, software interviews can be divided into two types : technology focused interviews and interviews focused on software fundamentals.  
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By technology focused interviews, I’m talking about interviews where a question will be based on a vendor’s product such as SQL Server.  
For software fundamental interviews, I’m talking about interviews where questions are more vendor neutral (so databases in general rather than SQL Server).  
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you are going to a technology focused interview, it is quite possible you won’t be asked any questions on algorithms or data structures (which in my opinion is a bad sign of what your co-worker’s abilities might be).
Assuming you will be asked these questions, here are some thoughts about companies that preform each of these types of interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Software Fundamentals Interviews Technology Focused Interviews Google, Amazon, Altera, Yahoo, Apple, Microsoft Typically consulting companies or companies that need to gain expertise in a new area Are more concerned with how intelligent/trainable someone is rather than how many technologies they know.
They are interested in developing employees in relevant areas if the potential is good.
Expect high productivity early on from new employees Senior developers and leads are very knowledgeable May not have experienced leads – hiring may be based on technology buzz words and HR processes rather than software engineering concepts People that work for these companies generally hold co-workers in high regard Co-workers may have less respect for each other These companies generally offer hire salaries and are more competitive about getting good employees (in my experience) May offer a very high salary if technology is niche.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Otherwise, expect salary to be a bit lower.
Not necessarily looking to fill a technology niche that you can be a leader in Often offers more leadership opportunities, especially if niche technology (since there may not be strong senior developers) Job postings mention fundamental concepts like OOP or design patterns and not specific technologies.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The postings may also request experience in one of several languages rather than C# or java specifically Job postings mention years of experience with a specific technology.
Will generally list things like:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Entity Framework (rather than experience with object relational mapping) SQL Server (rather than databases)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For senior positions, questions will start with fundamentals but seniority will be based on answers to open ended design questions (and resume experience) For senior positions, determining seniority the interviewer will probably expect you to know a specific detail about the technology.
The problem with this is that at the senior level, there are many specific questions about the technology and with this type of questioning, the interviewer is trying to find holes (based on his own understanding) rather than your strengths.
Since interview time is limited, occasionally an interviewer will throw in a tough algorithm problem (often involving a trick) and base evaluate your understanding of algorithms based on that.   Note that the points above are just my general observations and do not always hold true.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I’ve had technology specific interviews for consulting companies that definitely contain all the desirable attributes from the software fundamentals section above.
Currently, my preference is for software fundamentals interviews since I find technology focused interviews tend to be all over the place.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are usually a couple questions covering a huge number of technologies and your entire understanding of that technology is based on just one or two questions.
In this situation, it is very easy to have a false negatives and false positives since questions are not comprehensive.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  How to prepare for algorithms and data structure questions So, assuming you are going to get questions on algorithms and data structures, how do you get that knowledge?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1. Determine what you don’t know Read Get that job at Google and see what you don’t know 2.
Learn the stuff you don’t know Get a solid foundation in algorithms and data structures – If you don’t know a lot about algorithms (this was my issue since I didn’t study a lot of computer science in university) or need a brush up, check out the two books below.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>My key criteria for recommending these books is that they are easy to read cover to cover compared to other algorithms books.
The best technique for interviewing is to make a list of all the key algorithms (Algorithms (Sedgewick, Wayne)) and then beside each one, describe how to solve it in just a few sentences.
It doesn’t need to be in detail; just enough so that you know how to start solving the problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Algorithms (Sedgewick, Wayne) -I like head first type books that I can read quickly and remember easily without falling asleep.
I think this is as close as an algorithms book gets being similar to the heads first series in that the explanations are easy to understand and not too dry.
Here are my favourite things about this book.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Relatively clear description on big o notation and calculating complexity * Light read, not scary compared to other algorithm text books, not too much math * Offers simple readable code for all data structures * Does a fantastic job of providing clear descriptions of optimizations for each algorithm.
This really allows you to shine in interviews because you can show off with something that might be new even to the interviewer * Algorithms organized by problem rather than method (for example, there are chapters on graphs, string matching, searching, sorting, etc but no chapters on greedy algorithms, dynamic programming, etc).
Some people may not like this so if you are looking for something that is also pretty easy to read but organized by problem solving approach, I suggest Algorithms (Dasgupta, Papadimitriou, Vazerani) - I did not read this book cover to cover like the one above.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>However, I do use it from time to time as a reference and it is a solid follow up to the Sedgewick, Wayne algorithms book.  It contains more details on algorithm approach than then one above, however, it is not quite as fun to read.   3.
Practice under similar conditions Join TopCoder and do some practice problems and do at least 5 single round marathon (SRM) competitions – You don’t need a super high rank (even division 2 is fine) but you need to be able to effective approach problems.
The things you can expect to be comfortable with after doing about 5 SRMs and reading the editorials after the matches are:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Analizing complexity – you will be surprised how often a brute force solution is enough based on inputs.
This will cause you to ask input constrain questions during the interview which shows that not only can you solve problems in multiple ways, but that you know when to use each approach. * How to categorize types of problems – Is it greedy, or dynamic programming * You will be decent at dynamic programming – Interviewers love DP questions because they can be very tricky (I don’t mean just using memoization for fibinocci).
You will need to correctly identify which states need to be remembered and in cases where there are many candidate states, this is very tricky * In the end, you will approach your interview algorithm problems with confidence.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Just doing practice problems by hand before the interview is not the same since it is so easy to just look up the answer and say “oh yeah, I’m pretty close.
I would totally get that next time&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>SRMs force you to wait a couple days for the answer after the match which really helps learn the methodology Thoughts on Questions with a Trick A trick question is one where you need to have a moment of inspiration to solve the algorithm.
For example, given a sorted array of numbers, determine if there are two that add to 30.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you have not seen the problem before, you might ho and hmm until it clicks.
Have a pointer on each end of the list.
Add the two numbers together.
If the result is greater than 30, move the pointer on the right on position left.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the result is less than 30, move the pointer on the left one to the right.
This O(n) solution does not determine if the candidate knows anything about alogrithms.
It just shows that either the candidate got a moment of clarity at the right time, or has seen the problem before.
In my experience with interviews at tech giants Amazon and Google, I did not receive any trick questions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Trick questions give a lot of false negatives and as far as I’ve seen, mature companies have decided to stop using them.
If you do get asked a trick question and don’t get the answer, don’t feel bad.
Perhaps the company asking it needs to update their hiring policy :)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Tags: personal development Got anything to say?
Go ahead and leave a comment!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Click here to cancel reply.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Mail (will not be published) (required)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Website Comment Related (Personal Development)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Interview Questions for Software Developers * Algorithms and Data Structure Interview Preparation Guide * .Net Interview Questions 3: Framework Core * .Net Interview Questions 5: Management &amp; Leadership * .Net Interview Questions 6: Databases * .Net Interview Questions 7: WPF * .Net Interview Questions 4: Multithreading * New Years Resolutions 2012!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Self Improvement – 12 Week Plan for Coding Speed * 5 Second Book Reviews: Design Patterns, Head First Series, OOA&amp;D, Software Dev, PMP, etc Popular Posts * MVVM vs MVP vs MVC: The differences explained * Burn Down Chart Tutorial: Simple Agile Task Tracking * Algorithms and Data Structure Interview Preparation Guide * .Net Interview Questions 7: WPF * Interview Questions for Software Developers * Solving Traveling Salesman with Ant Colony Optimization in JavaScript * MVVM vs MVP vs MVC: The concise explanation * .Net Interview Questions 4: Multithreading * .Net Interview Questions 3: Framework Core * Explanation of the stack, the heap, and recursion leading to stack overflow * 3 Rules of SDK Design * Garbage Collection FAQ About I am a Toronto based software engineer currently working for Amazon.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>More | Subscribe (RSS) Favourite Links * Best way to find bugs in your code * Don't call yourself a programmer * Google Finance * Our Signal * Programmer Competency Matrix * Stack Overflow * Stock Options Manager * Wikipedia Just go to Theme Options Page and edit copyright textTheme brought to you by Site5.com | Experts in Web Hosting.
Technical Interview Questions | CareerCup CareerCup * Questions * Forum * Salaries * Resume Tips * RSS * Sign In ▼ * Sign In * View Cart Companies A9 (7) Abs india pvt. ltd.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(1) Accenture (29) Achieve Internet (25) Adap.tv (1) Adobe (343) ADP (1) Advisory Board Company (2) Agilent Technologies (20) Akamai (17) Alcatel Lucent (8) Altair Engineering (2) Altera (3) Amazon (3012) AMD (2) Amdocs (14) American Airlines (13) Apache Design (2) Apple (85) AppNexus (1) Argus (1) Aricent (16) Arista Networks (31) Aristocrat Gaming (1) Ask.com (1) Aspire Systems (1) ASU (1) Athena Health (2) Automated Traders Desk (7) Autonomy Zantaz (9) Axiom Sources (2) Baidu (2) Bank of America (11) Barclays Capital (16) Bazaarvoice (8) Big Fish (3) Binecs (2) Bloomberg LP (581) Blue Jeans (2) Bocada (6) Boeing (5) Booking.com (2) Brainware (3) BT (4) Cadence Inc (1) Capgemini (2) CapitalIQ (31) Caritor (2) Cavium Networks (2) CCN (1) CDAC-ACTS (3) CGI-AMS (5) Chegg.com (3) Chelsio Communications (5) Chicago Mercantile Exchange (10) Chronus (7) Cisco Systems (65) Citigroup (11) Citrix Online (10) Citrix System Inc (25) Cloudera (1) Cloudmere, Inc.
(1) CMC LTD (1) Cognzant Technology Solutions (7) Collective (5) Computer Associates (2) Continental (1) Credit Suisse (6) Crompton Greeves (1) CSC (3) CSR (1) Cubic Transportation Systems Limited (1) Daptiv (4) Defense Research and Development Organization of India (1) Deloitte Consulting LLP (7) Delve Networks (2) Denmin Group (4) Deshaw Inc (20) Did-it.com (3) Directi (45) Dover Organization (3) Ebay (58) EFI (8) Egenera (1) Electronic Arts (19) EMC (26) Epic Systems (151) Epsilon (1) Ericsson (7) Eterno Infotech Pvt Ltd (1) Expedia (69) EZ Prints (2) F5 Networks (5) Fabrix (1) Facebook (230) FactSet Research Systems, Inc (10) Fair Issac (3) Fiorano (1) FlexTrade (17) Flipkart (82) Fortinet (4) Future Advisor (1) Future Group, Mumbai (3) Fynanz (1) Gartner (2) Gayatri Vidya Parishad (1) GE (General Electric) (9) Georgia Pacific (1) Global Scholar (5) Globaltech Research (14) Gluster (6) GoDaddy (1) Gold-Tier (2) Goldman Sachs (173) Google (665) Green Bricks (2) Groupon (14) GrubHub (1) Guruji (2) Harman Kadron (1) HCL America (9) HCL (34) Headrun Technologies Pvt Ltd (2) Hewlett Packard (20) Hi5 (6) Highbridge Capital (17) Home Depot (7) Honeywell (2) Huawei (3) Hunan Asset (1) Ibibo (2) IBM (74) Iconologic (3) Igate (5) IIT-D (1) iLabs (4) Imagination Technologies (2) IMG (1) Infibeam (6) Infinium (1) Informatica (11) Infosys (28) Initto (1) InMobi (18) Intel (24) Interactive Brokers (4) Interactive Design (1) Internet Question (1) InterraIT (1) Intuit (8) ION idea (2) ION Trading (1) iPowerFour (1) Iron Mountain (1) Ittiam Systems (7) Ivycomptech (1) Izon (1) Jane Street (4) JDA (2) JP Morgan (16) Juniper Networks (5) Kalido (11) Kaseya (2) Kerkestavni Computecha Corporatci (1) Kingfisher Airlines (3) Kingfisher (1) Kiwox (1) Knewton (1) Knoa Software (2) Knowledge Systems (3) KnowledgeBase (1) Komli Media (3) Kpro Solutions (1) Lab126 (1) Labs247 (5) Laserfiche (4) LexisNexis (2) Lime Labs (1) Linkedin (38) LiteratureBay.com (2) Live Nation (2) LiveRamp (1) Lockheed Martin (7) London Investment Bank (1) Loyom (1) LSI (1) Lunatic Server Solutions (15) MAGMA (18) Manhattan associates (10) MAQ (2) MarketRX (11) Marvell (1) Mathworks (3) McAfee (12) Medio Systems (3) Megasoft (5) Mentor Graphics (2) Micron (7) Microsoft (1674) MicroStrategy (1) MIH (4) Mindtree Wireless India (2) Model N (2) Monitor Group (1) Morgan Stanley (61) Motorola (25) MounzIT (1) Moyer Group (3) mSpot (1) Myntra (3) Myntra.com (3) National Informatics Centre (1) National Instruments (17) Ness (2) NetApp (92) Netflix (1) Nexabion (1) Nextag (2) Nisum Technologies (4) Nivio Technologies (1) Nomura (1) Novell (3) NVIDIA (185) One97 (9) OnMobile (2) Oracle (43) Overstock.com (11) Palantir Technology (1) PayPal (17) Pega (6) Persistent Systems (3) Philips (2) Pinterest (4) PJ Pvt Ltd (1) Pocketgems (2) Polaris (12) PRDS (1) Progress (1) QNX (1) QSI HealthCare (5) Qualcomm (202) Rapleaf (6) Raytheon (4) Real Networks (7) Rebellion Research (8) RelQ Software Company Limited (8) Research In Motion (17) Ricoh (1) RightC (1) Riverbed (35) Roamware (1) RoviCorp (1) Roxar (1) RSA (8) Sabre Holdings (7) Safenet (2) Sage Software (17) Salesforce (10) Samsung (45) Sap Labs (8) Sapient Corporation (5) SAS Research (5) Schneider Electric (5) Search Media (2) Sears Holding (1) Shutterfly (5) Siemens (9) SIG (Susquehanna International Group)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(5) SignPost (2) Sileria Inc.
(1) Singapore Technologies (1) Socialcam (1) Softchoice (11) Sonoa Systems (12) Sophos (25) SRMicro Info Systems (1) Starent Networks (1) StartUp (3) SunGard (6) SWAPTON SOLUTIONS (1) Symantec (31) Symphony Services (9) SynCfusion (1) Synopsys R&amp;D (7) Take Two Interactive (2) Tally Solutions (1) TATA Consultancy Services (3) Tech India Line (1) Techlogix (1) Tejas Networks (9) Tellabs (6) Texas Instruments (5) The Digital Group (1) The Royal Bank of Scotland Chennai (1) thePlatform (3) Thirdware Technologies (1) Thomson Reuters (4) ThoughtWorks (7) TP (1) TRG (1) Tribal Fusion (6) Trilogy (1) Turing Software (2) Twitter (16) Two Sigma (5) United HealthGroup (4) Urban Touch (3) USAA (5) USInternetworking (2) VANS (1) Vanu (4) Vdopia (3) Video Gaming Technologies (1) Vizury (1) VMWare Inc (72) Walmart Labs (16) Watchguard (1) Wichorus (1) Wipro Technologies (11) Wireless Generation (3) WorksApp (2) X (2) Xurmo (2) Yahoo (215) Yatra.com (10) Yelp (1) Zillow (9) Zoosk (1) ZS Associates (2) Zycus (3) Zynga (12) Question Topics Algorithm (3493) Android (3) Application / UI Design (179) Arrays (276) Assembly (3) Automata (3) Behavioral (203) Bit Manipulation (66) Brain Teasers (288) C (504) C++ (457) C# (56) Cache (4) Coding (753) Compiler (1) Computer Architecture &amp; Low Level (103) Data Mining (9) Data Structures (537) Database (132) Debugging (24) Distributed Computing (11) Dynamic Programming (11) Experience (136) Front End Web Development (17) General Questions and Comments (122) Graphics (3) Hash Table (30) Ideas (58) Java (453) JavaScript (2) Knowledge Based (11) Large Scale Computing (24) Linked Lists (163) Linux Kernel (81) Math &amp; Computation (77) Matrix (21) Networking / Web / Internet (75) Object Oriented Design (232) OODesign (2) Operating System (154) Operators (1) Perl (20) PHP (26) Probability (15) Problem Solving (2) Python (6) Questions YOU should ask!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(5) Sales (9) Security (18) Sets (3) Sorting (23) SQL (5) Stacks (10) String Manipulation (108) System Administration (5) System Design (58) Terminology &amp; Trivia (294) test (3) Testing (201) Threads (72) Trees and Graphs (172) Unix (16) XML (10) Job Titles Accountant (10) Analyst (79) Android test engineer (1) Applications Developer (83) Area Sales Manager (3) Associate (19) Computer Scientist (33) Consultant (24) Developer Program Engineer (341) Development Support Engineer (59) Field Sales (16) Financial Application Engineer (3) Financial Software Developer (274) Firmware Engineer (1) Front-end Software Engineer (28) Graphics Programmer (3) Intern (20) iOS Developer (3) Java Developer (60) Member Technical Staff (17) MTS (14) Network Engineer (3) Personnel (3) Principal Software Engineer (2) Product Security Engineer (3) Production Engineer (14) Program Manager (83) Quality Assurance Engineer (40) Research Scientist (1) Reverse Engineering and System Developer (3) Scientific Officer (1) SDE-2 (6) SDE1 (25) Security Analyst (1) Senior Software Development Engineer (19) Site Reliability Engineer (22) Software Analyst (7) Software Architect (4) Software Development Manager (25) Software Engineer / Developer (7003) Software Engineer in Test (723) Software Engineer Intern (12) Software Trainee (6) Solutions Architect (4) Student (3) System Administrator (20) Systems Design Engineer (8) Tech Lead (4) Technical Architect (10) Technical Support Engineer (4) Testing / Quality Assurance (105) Virus Researcher (25) Web Developer (33) Add Question CareerCup is the world's biggest and best source for software engineering interview preparation.See all our resources .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Disable Chat: To disable chat, go to the top right of the &quot;buddy list&quot;, click the settings icon, and then click &quot;Turn Off.&quot;
How Can You Help CareerCup?
Find Out When Gayle / CareerCup / Cracking the Coding Interview is in Your City Top Companies * Amazon (3013) * Microsoft (1675)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Google (666) * Bloomberg LP (581)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Adobe (345) * Facebook (230)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Yahoo (215) * Qualcomm (202)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* NVIDIA (185) * Goldman Sachs (174)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Companies » Top Jobs * Software Engineer / Dev...
(7008)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Software Engineer in Te...
(724)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Developer Program Engin...
(341)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Financial Software Deve...
(274)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Testing / Quality Assur...
(105)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Program Manager (84)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Applications Developer (83)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Analyst (79) * Java Developer (60)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Development Support Eng...
(59)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Jobs » Top Topics * Algorithm (3493)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Coding (753) * Data Structures (537)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C (504) * C++ (457)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Java (453) * Terminology &amp; Trivia (294)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Brain Teasers (288)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Arrays (276) * Object Oriented Design (232)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Topics » What's Going On Report a Bug or Issue Books is a comprehensive book walking you through every aspect of getting a job at a top tech company, while focuses on software engineering interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Videos CareerCup's interview videos give you a real-life look at technical interviews.
In these unscripted videos, watch how other candidates handle tough questions and how the interviewer thinks about their performance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Resume Review Most engineers make critical mistakes on their resumes -- we can fix your resume with our custom resume review service.
And, we use fellow engineers as our resume reviewers, so you can be sure that we &quot;get&quot; what you're saying.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Mock Interviews Our Mock Interviews will be conducted &quot;in character&quot; just like a real interview, and can focus on whatever topics you want.
All our interviewers have worked for Microsoft, Google or Amazon, you know you'll get a true-to-life experience.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Information * Team, Contact &amp; About * Salaries * RSS * Behavioral Preparation Grid * Sample Resumes Products * * * CtCI iPhone App * Videos Services * Mock Interviews * Resume Review * Wiser Profile (LinkedIn Review) Social * CareerCup on Facebook * CtCI on Facebook * Gayle McDowell on Facebook * CareerCup on Twitter * Gayle on Twitter * CareerCup Blog CareerCup.com © 2012 Handbook of Algorithms and Data Structures Handbook of Algorithms and Data Structures Gaston H.
Gonnet Informatik, ETH Zürich Ricardo Baeza-Yates Dept. of Computer Science, Univ. of Chile Warning: This Beta version needs a browser capable of handling tables.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The contents is still under revision, please send comments as indicated below if you find any problem.These WWW pages are not a digital version of the book, nor the complete contents of it.
Here you will find the preface, table of contents, index and all source code of the handbook.
The main goal is to make available through Internet the source code of many algorithms (in C and/or Pascal) that have been already tested.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The printed version of the Handbook includes over a thousand references and details many of the algorithms presented here.
It should be ordered directly to Addison-Wesley or a specialized bookstore.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Preface * Introduction * Basic Concepts * Searching Algorithms * Sorting Algorithms * Selection Algorithms * Arithmetic Algorithms * Text Algorithms * Distributions Derived from Empirical Observation * Asymptotic Expansions * References * Algorithms coded in Pascal and C * Index * Back Cover ©Addison-Wesley Publishing Co. Inc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>These WWW pages were designed by Omar Alonso and Ricardo Baeza-Yates .
For suggestions, comments, and questions about the structure and design of the pages, please send an e-mail toOmar .
For technical questions about the algorithms and data structures in the book, please send an e-mail toRicardo .
If you find any problem in accessing pages or downloading files, please contact the Webmaster .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked: Vibrant Publishers: 9781456569716: Amazon.com: Books Amazon Join Prime * Your Amazon.com * Today's Deals * Gift Cards * Help Shop by Department Search All All DepartmentsAmazon Instant VideoAppliancesApps for AndroidArts, Crafts &amp; SewingAutomotiveBabyBeauty BooksCell Phones &amp; AccessoriesClothing &amp; AccessoriesCollectiblesComputersCredit CardsElectronicsGift Cards StoreGrocery &amp; Gourmet FoodHealth &amp; Personal Care Home &amp; KitchenIndustrial &amp; ScientificJewelryKindle StoreMagazine Subscriptions Movies &amp; TVMP3 MusicMusicMusical InstrumentsOffice ProductsPatio, Lawn &amp; Garden Pet SuppliesShoesSoftwareSports &amp; OutdoorsTools &amp; Home ImprovementToys &amp; Games Video GamesWatches Hello.
Sign in Your Account Join Prime Cart 0 Wish List * Books * Advanced Search * New Releases * Best Sellers * The New York Times® Best Sellers * Children's Books * Textbooks * Sell Your Books * Best Books of the Month Sell Us Your Item For a $1.50 Gift Card Learn more Have one to sell?Sell yours here Tell the Publisher!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I'd like to read this book on Kindle Don't have a Kindle?
Get your Kindle here , or download a FREE Kindle Reading App .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sorry, this item is not available in Image not available for Color: Image not available To view this video download Flash Player   Share your own customer images Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked [Paperback]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Vibrant Publishers (Author) 1.0 out of 5 stars   See all reviews  (2 customer reviews ) Available from these sellers .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We have introduced three different series of books for the three different and much in-demand genre of people.
The Job Interview Questions Series caters to IT professionals specifically college freshman, junior/senior programmers, business analysts, and project managers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Self Learning Management Series is intended to give a jump start to working professionals, whose job roles demand to have the knowledge imparted in a B-school but haven't got a chance to visit one.
The Entrance Exam Series covers GRE, GMAT, SAT, TOEFL and IELTS exams.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>About Job Interview Questions Series As technology now-a-days changes very often, IT Professionals need to be updated with the latest trends in these technologies constantly and more importantly instantly.
Job Interview Questions Series is THE answer to this need.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We believe in delivering quality content and do so by tying up with the best authors around the globe.
This series of books is written by expert authors and programmers who have been conducting interviews since a decade or more and have gathered vast experiences in the world of information technology.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Unlike comprehensive, textbook-sized reference guides, our books include only the required information for job search.
Hence, these books are short, concise and ready-to-use by the working Professionals.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All the books in Job Interview Questions series include about 150 to 250 technical interview questions with answers and proven strategies giving Dozens of examples to respond to these interview questions and 51 HR Questions with Answers and Proven strategies to give specific, impressive answers that help nail the interviews.
Besides these, each book is accompanied by 2 Aptitude Tests available as a download from our website.
We hope to serve our readers by saving them time - by providing them with information that is important, and not bombarding them with data from which they need to pick relevant information.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>About Self Learning Management Series The Self Learning Management series intends to give a jump start to working professionals, whose job roles demand to have the knowledge imparted in a B-school but who haven't got a chance to visit one.
This series is designed to illuminate aspects of management, finance, organization development, consumer behavior, human resources, marketing and business.
Dozens of books available in the market give ample information about these topics that may or may not be required.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The distinctiveness of this series lies in that it gives only the relevant required information bundled in a compact form, uncomplicated to interpret.
This series would cover various management topics in 10 different titles.
Each book includes basic fundamentals, important concepts, standard and well-known principles as well as practical ways of application of the subject matter.
The series will be instrumental in assisting all those who are in the following job roles:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a) Dealing with Human Resources b) Taking financial decisions c) Responsible for Sales and Marketing d) Carrying out the Operational activities in a company e) Directing Business strategies f) Engaged in managerial decision making Customer Reviews 1.0 out of 5 stars (2 ) 1.0 out of 5 stars 5 star 0 4 star 0 3 star 0 2 star 0 1 star 2 See both customer reviews Share your thoughts with other customers Write a customer review Most Helpful Customer Reviews 7 of 7 people found the following review helpful 1.0 out of 5 stars little use for real interview February 18, 2011 By Dalun Bao Format: Paperback|Amazon Verified Purchase This book is just a collection of some of programming concepts, things like &quot;what is tree?&quot;
, &quot;what is double-linked list?&quot;
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>, &quot;what is array?&quot;
etc and provides answer to each question.
It provides no real value for your interview, I think wiki is much better source for those concepts than this book. not recommend to buy this book for your interview Comment |  Was this review helpful to you?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Yes No 6 of 6 people found the following review helpful 1.0 out of 5 stars Poor editing, poor collection of concepts February 27, 2011 By John Format:Kindle Edition| Amazon Verified Purchase I was hoping that this would be a good &quot;refresher&quot; book for some algorithms and data structures that I use regularly, but may not be able to articulate well in an interview.
I was sorely disappointed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Kindle version looks like it was slapped together quickly to seize the market.
Chalked full of grammatical errors and the like, I honestly can't recommend this book in the slightest.
I'll be paging through &quot;Algorithms in a Nutshell&quot; from O'Reilly instead, along with some of my old computer science texts to ensure that my skills are sharp for technical interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you're looking for a good refresher book, save your money and look elsewhere.
Comment |  Was this review helpful to you?
Yes No › See both customer reviews (newest first)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a customer review Search Customer Reviews Only search this product's reviews Start your free trial and join millions of Amazon Prime members who enjoy: Prime Instant Videos Watch over 38,000 movies and TV episodes Free Two-Day Shipping Get fast, free shipping on over 15 million items Kindle Owners' Lending Library Borrow from over 300,000 titles for free &gt; Get started Watch.
Read.
Shop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Relax.
Millions of Amazon Prime members enjoy instant videos, free Kindle books and unlimited free two-day shipping. &gt; Get started * Unlimited Instant Videos * Prime Instant Videos Unlimited streaming of thousands of movies and TV shows with Amazon Prime * Learn More About Amazon Prime * Amazon Instant Video Store Rent or buy hit movies and TV shows to stream or download * Your Video Library Your movies and TV shows stored in the cloud * Watch Anywhere Watch instantly on your Kindle Fire, TV, Blu-ray player, or set-top box * MP3s &amp; Cloud Player * MP3 Music Store Shop over 20 million songs * Music on Kindle Fire Discover how to play your music * Cloud Player for Web Play from any browser * Cloud Player for Android For Android phones and tablets * Cloud Player for iOS For iPhone, iPad and iPod touch * Cloud Player for Home For Sonos and Roku * Amazon Cloud Drive * Your Cloud Drive 5 GB of free storage * Get the Desktop App For Windows and Mac * Cloud Drive Photos for Android For Android phones and tablets * Learn More About Cloud Drive * Kindle E-readers * Kindle Small, light, perfect for reading * Kindle Paperwhite World's most advanced e-reader * Kindle Paperwhite 3G With free 3G wireless * Kindle E-reader Accessories Covers, chargers, sleeves and more * Kindle Store * Kindle Books * Newsstand * Kindle Owners' Lending Library With Prime, Kindle owners read for free * Kindle Fire * Fire All new--faster, twice the memory * Fire HD 7&quot;, Dolby audio, ultra-fast Wi-Fi * Fire HD 8.9&quot; 8.9&quot;, Dolby audio, ultra-fast Wi-Fi * Fire HD 8.9&quot; 4G With ultra-fast 4G LTE wireless * Kindle Fire Accessories Cases, chargers, sleeves and more * Kindle Apps &amp; Resources * Kindle Cloud Reader Read your Kindle books in a browser * Free Kindle Reading Apps For PC, iPad, iPhone, Android, and more * Manage Your Kindle * Appstore for Android * Apps * Games * Test Drive Apps Try thousands of apps and games right now * Amazon Apps Kindle, mobile shopping, MP3, and more * Your Apps and Devices View your apps and manage your devices * Digital Games &amp; Software * Game Downloads For PC and Mac * Free-to-Play Games For PC and Mac * Software Downloads For PC and Mac * Your Games &amp; Software Library * Audible Audiobooks * Audible Membership Get to know Audible * Audible Audiobooks &amp; More * Bestsellers * New &amp; Notable * Listener Favorites * Whispersync for Voice Switch between reading and listening * Books * Books * Kindle Books * Children's Books * Textbooks * Audiobooks * Magazines * Movies, Music &amp; Games * Movies &amp; TV * Blu-ray * Amazon Instant Video * Music * MP3 Downloads * Musical Instruments * Entertainment Collectibles * Video Games * Game Downloads * Electronics * TV &amp; Video * Home Audio &amp; Theater * Camera, Photo &amp; Video * Cell Phones &amp; Accessories * Video Games * MP3 Players &amp; Accessories * Car Electronics &amp; GPS * Appliances * Musical Instruments * Electronics Accessories * Computers * Laptops, Tablets &amp; Netbooks * Desktops &amp; Servers * Computer Accessories &amp; Peripherals External drives, mice, networking &amp; more * Computer Parts &amp; Components * Software * PC Games * Printers &amp; Ink * Office &amp; School Supplies * Home, Garden &amp; Pets * Kitchen &amp; Dining * Furniture &amp; Décor * Bedding &amp; Bath * Appliances * Patio, Lawn &amp; Garden * Arts, Crafts &amp; Sewing * Pet Supplies * Tools, Home Improvement * Home Improvement * Power &amp; Hand Tools * Lamps &amp; Light Fixtures * Kitchen &amp; Bath Fixtures * Hardware * Building Supplies * Grocery, Health &amp; Beauty * Grocery &amp; Gourmet Food * Wine * Natural &amp; Organic * Health &amp; Personal Care * Beauty * Toys, Kids &amp; Baby * Toys &amp; Games * Baby * Kids' Clothing * Baby Clothing * Video Games for Kids * Amazon Mom 20% off diapers, free shipping and more * Baby Registry * Clothing, Shoes &amp; Jewelry * Clothing * Shoes * Handbags * Accessories * Luggage * Jewelry * Watches * Sports &amp; Outdoors * Exercise &amp; Fitness * Outdoor Recreation * Hunting &amp; Fishing * Cycling * Athletic &amp; Outdoor Clothing * Boating &amp; Water Sports * Team Sports * Fan Shop * Sports Collectibles * Golf * All Sports &amp; Outdoors * Automotive * Automotive Parts &amp; Accessories * Automotive Tools &amp; Equipment * Car Electronics &amp; GPS * Tires &amp; Wheels * Motorcycle &amp; ATV * Industrial &amp; Scientific * Industrial Supplies * Lab &amp; Scientific * Janitorial * Safety * Unlimited Instant Videos * MP3s &amp; Cloud Player20 million songs, play anywhere * Amazon Cloud Drive5 GB of free storage * Kindle * Appstore for AndroidGet a premium app for free today * Digital Games &amp; Software * Audible Audiobooks * Books * Movies, Music &amp; Games * Electronics &amp; Computers * Home, Garden &amp; Tools * Grocery, Health &amp; Beauty * Toys, Kids &amp; Baby * Clothing, Shoes &amp; Jewelry * Sports &amp; Outdoors * Automotive &amp; Industrial * ›Full Store Directory * Sign in New customer?
Start here.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Your Account * Your Orders * Your Wish List * Your Recommendations * Your Subscribe &amp; Save Items * Manage Your Kindle * Your Cloud Player Play from any browser * Your Cloud Drive 5 GB of free storage * Prime Instant Videos Unlimited streaming of thousands of movies and TV shows * Your Video Library * Your Games &amp; Software Library * Your Android Apps &amp; Devices Your Shopping Cart is empty.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Give it purpose—fill it with books, DVDs, clothes, electronics, and more.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you already have an account, sign in .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There's a problem previewing your cart right now.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Check your Internet connection and go to your cart , or try again .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Cart (0 items) (0 item) (0 items)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Create a Wish List * Find a Wish List or Registry * Wish from Any Website Add items to your List from anywhere * Wedding Registry * Baby Registry * Kids' Birthdays * Friends &amp; Family Gifting Front Cover  | Table of Contents  | First Pages  | Index  | Back Cover  | Surprise Me!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Search Inside This Book: What Other Items Do Customers Buy After Viewing This Item?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Cracking the Coding Interview: 150 Programming Questions and Solutions  by Gayle Laakmann McDowell Paperback 4.8 out of 5 stars  (159 ) $21.98 * Algorithms For Interviews  by Adnan Aziz Paperback 3.7 out of 5 stars  (20 )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Programming Interviews Exposed: Secrets to Landing Your Next Job, 2nd Edition (Programmer to Programmer)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text> by John Mongan Paperback 4.1 out of 5 stars  (74 )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Programming Problems: A Primer for The Technical Interview  by B.
Green Paperback 4.2 out of 5 stars  (10 ) $13.46 › Explore similar items Like 1365878038 false -1 2 2 1 (2) Forums There are no discussions about this product yet.
Be the first to discuss this product with the community.
Start a Discussion Start a new discussion Topic: First post: Receive e-mail when new posts are made Prompts for sign-in   Guidelines Listmania!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>*   An Introduction to Mathematics &amp; Computation : A list byAllen Goodman *   My Quant Finance Reading List : A list byisulsz &quot;isulsz&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>*   Ultimate computer science : A list by Sam S &quot;Sam&quot; Create a Listmania! list Search Listmania!
So You'd Like to...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Create a guide Search Guides Look for Similar Items by Category * Books &gt; Computers &amp; Technology &gt; Programming &gt;Algorithms * Books &gt; Computers &amp; Technology &gt; Programming &gt;Software Design, Testing &amp; Engineering &gt; Software Development * Books &gt; Education &amp; Reference Get to Know Us * Careers * Investor Relations * Press Releases * Amazon and Our Planet * Amazon in the Community Make Money with Us * Sell on Amazon * Become an Affiliate * Advertise Your Products * Independently Publish with Us * › See all Let Us Help You * Your Account * Shipping Rates &amp; Policies * Amazon Prime * Returns Are Easy * Manage Your Kindle * Help Brazil Canada China France Germany Italy Japan Spain United Kingdom 6pm Score deals on fashion brands AbeBooks Rare Books &amp; Textbooks AfterSchool.com Kids' Sports, Footwear, Dance &amp; Crafts AmazonFresh Groceries &amp; More Right To Your Door AmazonLocal Great Local Deals in Your City AmazonSupply Business, Industrial &amp; Scientific Supplies AmazonWebServices Scalable Cloud Services Askville Community Answers   Audible Download Audio Books BeautyBar.com Prestige Beauty Delivered Book Depository Books With Free Delivery Worldwide Bookworm.com Books For Children Of All Ages Casa.com Kitchen, Storage &amp; Everything Home CreateSpace Indie Print Publishing Made Easy Diapers.com Everything But The Baby DPReview Digital Photography   Fabric Sewing, Quilting &amp; Knitting IMDb Movies, TV &amp; Celebrities Junglee.com Shop Online in India Kindle Direct Publishing Indie Digital Publishing Made Easy MYHABIT Private Fashion Designer Sales Shopbop Designer Fashion Brands Soap.com Health, Beauty &amp; Home Essentials Vine.com Everything to Live Life Green     Wag.com Everything For Your Pet Warehouse Deals Open-Box Discounts Woot Never Gonna Give You Up Yoyo.com A Happy Place To Shop For Toys Zappos Shoes &amp; Clothing     Conditions of Use Privacy Notice Interest-Based Ads © 1996-2013, Amazon.com, Inc. or its affiliates c++ - Algorithms and Data Structures - Stack Overflow Stack Exchange log in | careers 2.0 | chat | meta | about | faq Stack Overflow * Questions * Tags * Users * Badges * Unanswered * Ask Question Algorithms and Data Structures up vote 1 down vote favorite I'm currently halfway through my first algorithm and data structures class.
Unfortunately, my teacher is not very good, and the online book we use is incredibly vague in its descriptions (http://people.cs.vt.edu/~shaffer/Book/) I've manage to maintain an A thus far, mostly due to luck and common sense, but it's starting to get a lot harder now that we are dealing with sorts, searches, and more advanced data structures like graphs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I was wondering if there are any online resources that would help me learn this subject better that you guys would recommend.
I understand the major importance of knowing this topic well, especially when writing efficient code and also when being interviewed for a job, so I'm open to any suggestions that will help me learn and understand algorithms and data structures better.
Thanks.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>c++ algorithm data-structures data share |improve this question asked Mar 31 '11 at 18:56 SkankinJake 287 stackoverflow.com/questions/3665370/… These aren't necessarily for advanced, either – dfb Mar 31 '11 at 19:02 7 Answers active oldest votes up vote 3 down vote accepted This course is great:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/ There are data structure, algorithm and more share |improve this answer answered Mar 31 '11 at 19:02 Alessandro Teruzzi 1,689414 +1 for providing a very good source. – Mahesh Mar 31 '11 at 19:04 I'll trust anything that comes from MIT.
I'll definitely give this a thorough look later.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Thanks! – SkankinJake Mar 31 '11 at 19:22 up vote 2 down vote You probably won't like my answer, but I expect that the most productive thing you could do would be to work on your attitude.
You often find what you're looking for.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So if you're treating your instructor as sub-standard and your book as worthless; you'll get very little out of it.
If you look for your instructor's strengths and get what you can from the book, you'll go far.
I glanced through your text and it didn't seem all that vague to me.
Definitely look at the references provided in other answers, but be positive about the class too.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Mar 31 '11 at 19:08 JCooper 2,901214 1   Sure attitude can be an issue, but the guy might also have a point.
I remember my first data structure and algorithms class (which is a somewhat hard to grasp subject at first).
My teacher had a very strong Russian accent and gave us assignments he used to give to students 4-5 years more advanced in their CS studies as we were.
It was painful.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I learned from books and peers that semester, not from the teacher. – pwny Mar 31 '11 at 19:14 I can definitely see your point.
I'm normally not one to put any blame for how I do in the class on the teacher, but it's just that this topic seems to require a good amount of in depth explaining, which my professor doesn't seem to do.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This often leaves myself and most of the rest of the class confused. – SkankinJake Mar 31 '11 at 19:21 up vote 0 down vote The best book I've ever seen for learning algorithm and data structure is theMIT Introduction to Algorithms.
It's good for you regardless of your level, good for beginners, imtermediate, and advanced learners.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Mar 31 '11 at 19:03 Tamer Shlash 2,414622 up vote 0 down vote Get yourself Skiena's The Algorithm Design Manual .
It's an amazing book and really helped me understand algorithms and data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Mar 31 '11 at 19:04 pwny 1,232414 I'll check it out.
Thanks! – SkankinJake Mar 31 '11 at 19:15 up vote 0 down vote I have found the slides located at: http://www.heppenstall.ca/academics/doc/242/ to be very helpful.
They cover a wide range of data structures and elementary algorithms and include usable pictures to help understand what's going on.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I have no idea who first created the various slides or who might be maintaining the most recent version--they seem to have found their way to many different school's servers and are available in, at least, PDF and PPT formats.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Mar 31 '11 at 19:20 oosterwal 852314 up vote 0 down vote Personally, I've always found the best way to learn something is to try and build it.
Whether it's an algorithm, and new design pattern or a data structure, the process of creating that thing in code has always been the way I've learned best.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Mar 31 '11 at 19:20 Nathanael 1,036312 But what if I don't have the programming experience to do that?
I'm a second year Computer Science major with a pretty good grasp on C++ and C.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Do you think I'd still be able to build some of these things? – SkankinJake Mar 31 '11 at 19:28 @SkankinJake ... check out my link above ...
I was able to read that book without any difficulties after only a semester of C++ ... and after reading it, I was able to write my own implementations of many of the STL data-structures without much difficulty.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Not that mine were any better than the STL's (I still suggest you use that if the right containers are available), but just saying, you'll understand how they work.
The book puts heavy emphasis on data-structures compared to algorithms though, so you may have to find other supplemental material for that end of things. – Jason Mar 31 '11 at 20:02 I'll be sure to give that a read.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Thanks. – SkankinJake Mar 31 '11 at 20:12 You won't build them perfectly =) - that's fine.
The experience of trying to turn an abstract concept into a concrete implementation will help you to grasp the concepts.
Even as a professional developer with a few years experience I still create small test applications to learn new concepts. – Nathanael Mar 31 '11 at 21:33 up vote 0 down vote I particularly liked this book: Data Structures with C++ Using STL by Ford and Topp.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They include quite a bit of source-code (all of it can be downloaded from their website) and nicely step the reader through a thorough nuts-and-bolts implementation of many of the data-structures implemented in the STL, as well as a couple data-structures (like graphs) that aren't present in the STL.
You'll get a good understanding of each data-structure's internal composition from more basic data-types, as well as a generic enough reference that should you ever need to build something yourself, you'll have a very good idea of exactly how these data-structures can be created and composed from simpler data-types (in a generic sense ... i.e., these ideas can be transposed to any other language) and how they should be applied in real-world settings.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It's not so much a reference for the STL itself, as it is a reference on how the data-structures in the STL were implemented (albeit in a more simplistic form ... you won't have to worry about allocators, and many of the other ancillaries in the STL code that can make it a bit hard to read and understand for a beginner).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Hope this helps, Jason share |improve this answer answered Mar 31 '11 at 19:57 Jason 18.1k21436 Your Answer   draft saved draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Stack Exchange Post as a guest Name Email required, but not shown Post as a guest Name Email required, but not shown discard By posting your answer, you agree to theprivacy policy and terms of service .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Not the answer you're looking for?
Browse other questions tagged c++ algorithm data-structures data or ask your own question .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>tagged c++  × 192910 algorithm  × 28836 data-structures  ×  7850 data  × 7480 asked 2 years ago viewed 1242 times active 2 years ago Linked 2 Book to learn advance concepts in Data Structures and Algorithms Related 2423 The Definitive C++ Book Guide and List 15 'Head First' Style Data Structures &amp; Algorithms Book?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>799 What are the lesser known but useful data structures?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>38 Algorithms and data structures that are not mainstream?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>0 Data structure/Algorithm for Streaming Data and identifying topics 27 Learning Algorithms and Data Structures Fundamentals 3 Algorithm and data structure book for beginner?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>-1 Data Structure and algorithm.
Linkedlist 0 Knight's shortest path graph data structure and algorithm 0 Implementing Data Structures and Algorithms in C++ question feed lang-c about | faq | blog | chat | data | legal | privacy policy | jobs | advertising info |mobile | contact us | feedback ■ stackoverflow.com   ■ api/apps   ■ careers 2.0   ■ serverfault.com   ■ superuser.com   ■ meta   ■ area 51   ■ webapps   ■ gaming   ■ ubuntu   ■ webmasters   ■ cooking   ■ game development   ■ math   ■  photography   ■ stats   ■ tex   ■  english   ■ theoretical cs   ■ programmers   ■ unix   ■ apple   ■ wordpress   ■ physics   ■ home improvement   ■ gis   ■  electrical engineering   ■ android   ■ security   ■ bicycles   ■ dba   ■  drupal   ■ sharepoint   ■ scifi &amp; fantasy   ■ ux   ■ skeptics   ■ rpg   ■  judaism   ■ mathematica   ■ travel   rev 2013.4.12.642 site design / logo © 2013 stack exchange inc; user contributions licensed undercc-wiki with attribution required Stack Overflow works best with JavaScript enabled Algorithms and Data Structures Algorithms and Data Structures Research &amp; Reference Material   [Needs a browser such as Netscape-3 or later, with JavaScript 1.1 or later, turnedon!]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>LA home Computing  Algorithms  Bioinformatics  FP ,  λ  Logic ,  π  MML  Prog.Langs Algorithms also see...
Prog'Lang's [Lecture notes ] on algorithms and data structures. * Intro * e.g. * Maths for A+DS * glossary * Strings * Dynamic Programming * Recursion * Sorting * Numerical * 1D &amp; 2D * Lists * Stacks * Queues * Hierarchical Lists * Priority Queues * Tables * Trees * Wff * Graph Algorithms Code forsome of the algorithms discussed exists in various programming languages such as Algol, C, Java, Pascal and Turing (e.g.
'foo.t', for historical reasons).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Bibliography also contains references on algorithms and data structures in journals and books.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Algol68/ * C/ * Java/ * Pascal/ * Turing/ * compared Algorithm: a process or set of rules used for calculation or problem-solving, esp. with a computer.
Program: a series of coded instructions to control the operation of a computer or other machine.[-concise OED '91]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Example Problem: Find the greatest common divisor (GCD) of two integers, m and n.
Euclid's Algorithm:
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>while m is greater than zero: If n is greater than m, swap m and n.
Subtract n from m. n is the GCD Program (in C): int gcd(int m, int n) /* precondition: m&gt;0 and n&gt;0.
Let g=gcd(m,n). */ {while( m &gt; 0 ) { /* invariant: gcd(m,n)=g */ if ( n &gt; m ) { int t = m; m = n; n = t; } /* swap */ /* m &gt;= n &gt; 0 */ m -= n; } return n; } © L .
A l l i s o n The greatest common divisor (GCD) of [  ] and [  ] is [  ]. trace:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Correctness Why do we believe that this algorithm devised thousands of years ago, is correct?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Given m&gt;0 and n&gt;0, let g = gcd(m,n).
(i) If m=n then m=n=gcd(m,n) and the algorithm sets m to zero and returns n, obviously correct.
(ii) Otherwise, suppose m&gt;n.
Then m=p×g and n=q×g where p and q are coprime, from the definition of greatest common divisor.
We claim that gcd(m-n,n)=g.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Now m-n=p×g-q×g=(p-q)g. so we must show that (p-q) and q are coprime.
Ifnot then p-q=a×c and q=b×c for some a,b,c&gt;1.
But then p=q+a×c=b×c+a×c=(a+b)×c and because q=b×c, p and q would not have been coprime ... contradiction.
Hence (p-q) and q are coprime, and gcd(m-n,n)=gcd(m,n).
(iii) If mn and that case has been covered.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So the algorithm is correct, provided that it terminates.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Termination At the start of each iteration of the loop, either n&gt;m or m≥n.
(i) If m≥n, then m is replaced by m-n which is smaller than the previous value of m, and still non-negative.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(ii) If n&gt;m, m and n are exchanged, and at the next iteration case (i) will apply.
So at each iteration, max(m,n) either remains unchanged (for just one iteration) or it decreases.
This cannot go on for ever because m and n are integers (this fact is important), and eventually a lower limit is reached, when m=0 and n=g.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So the algorithm does terminate.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Testing Having proved the algorithm to be correct, one might argue that there is no need to test it.
But there might be an error in the proof or maybe theprogram has been coded wrongly.
Good test values would include:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* special cases where m or n equals 1, or * m, or n, or both equal small primes 2, 3, 5, ..., or * products of two small primes such as p1×p2 and p3×p2, * some larger values, but ones where you know the answers, * swapped values, (x,y) and (y,x), because gcd(m,n)=gcd(n,m).
The objective in testing is to &quot;exercise&quot; all paths through the code, in different combinations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Debugging code be inserted to print the values of m and n at the end of each iteration to confirm that they behave as expected.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Complexity We are interested in how much time and space (computer memory) a computer algorithm uses;i.e. how efficient it is.
This is called time- and space- complexity.
Typically the complexity is a function of the values of the inputs and we would like to know what function.
We can also consider thebest-, average-, and worst-cases.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Time The time to execute one iteration of the loop depends on whether m&gt;n or not, but both cases take constant time: one test, a subtraction and 4 assignments v. one test, a subtraction and one assignment.
So the time taken for one iteration of the loop is bounded by a constant.
The real question then is, how many iterations take place?
The answer depends on m and n.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If m=n, there is just one iteration; this is the best-case.
If n=1, there are m iterations; this is the worst-case (equivalently, if m=1 there are n iterations).
The average-case time-complexity of this algorithm is difficult to analyse.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Space The space-complexity of Euclid's algorithm is a constant, just space for three integers: m, n and t.
We shall see later that this is 'O(1)'.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Exercises * Devise a quicker version of Euclid's algorithm that does not sit in the loop subtracting individual copies of n from m when m&gt;&gt;n.
Much of this material was developed at the Department ofComputer Science, University of Western Australia, c1984 (so it owes a lot toProf.
Jeff Rohl), more at the Department ofComputer Science, Monash University, c1986, later the School of Computer Science and Software Engineering,c1999 on. window on the wide world: The Darwin Awards V:
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Next Evolution Computer Science Education Week Linux  Ubuntu free op. sys.
OpenOffice free office suite, ver 3.4+ The GIMP ~ free photoshop Firefox web browser FlashBlock like it says! © L.
Allison   http://www.allisons.org/ll/   (or as otherwise indicated), Faculty of Information Technology (Clayton), Monash University, Australia 3800 (6/'05 wasSchool of Computer Science and Software Engineering, Fac.
Info.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Tech., Monash University, was Department of Computer Science, Fac.
Comp. &amp; Info.
Tech., '89 was Department of Computer Science, Fac.
Sci., '68-'71 was Department of Information Science, Fac.
Sci. ) Created with &quot;vi (Linux + Solaris)&quot;,  charset=iso-8859-1, fetched Sunday, 14-Apr-2013 04:34:10 EST.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
            </sectionList>
        </query>
        <query>
            <text>data structures and algorithms interview questions</text>
            <linkList>
                <link>http://javarevisited.blogspot.com/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html</link>
                <link>http://www.gointerviews.com/top-50-data-structure-interview-questions/</link>
                <link>http://stackoverflow.com/questions/58354/algorithm-data-structure-design-interview-questions</link>
                <link>http://www.careercup.com/page?pid=data-structures-interview-questions</link>
                <link>http://www.amazon.com/Structures-Algorithms-Interview-Questions-Likely/dp/1456569716</link>
                <link>http://careerride.com/Data-Structure-Interview-Questions.aspx</link>
                <link>http://joel.inpointform.net/software-development/algorithms-and-data-structure-interview-preparation-guide/</link>
                <link>http://technical-interview.com/datastructures.aspx</link>
                <link>http://www.youtube.com/watch?v=i2XOV21vGVk</link>
                <link>http://kundansingh.com/interview/</link>
                <link>http://www.indeed.com/forum/cmp/Microsoft/Microsoft-Interview-Questions/t9502</link>
                <link>https://itunes.apple.com/dk/book/data-structures-algorithms/id453363474?mt=11</link>
                <link>http://www.slideshare.net/nakarumaka/data-structures-and-algorithms-interview-questions</link>
                <link>http://www.glassdoor.com/Interview/data-structures-interview-questions-SRCH_KT0,15.htm</link>
                <link>http://www.geeksforgeeks.org/data-structures-and-algorithms-set-22/</link>
                <link>http://www.careercup.com/categories</link>
                <link>http://www.slideshare.net/careermonk/data-structures-and-algorithms-for-gate-solutions-to-all-previous-gate-questions-since-1991</link>
                <link>http://www.geeksforgeeks.org/data-structures-and-algorithms-set-29/</link>
            </linkList>
            <sectionList>
                <section>
                    <text>Top 15 Data Structures and Algorithm Interview Questions for Java programmer - Answers Javarevisited Blog about Java Program Tutorial Example How to, Unix Linux commands, Interview Questions, FIX Protocol, Tibco RV tutorials, Equities trading system, MySQL Friday, March 15, 2013 Top 15 Data Structures and Algorithm Interview Questions for Java programmer - Answers Data structures and algorithm questions are important part of any programming job interview, be it a Java interview, C++ interview or any other programming language.
Since data structures is core programming concept, its mandatory for all programmers, to know basic data structures like stack, linked list, queue, array, tree and graph.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Though tree and graph are on tough side, I still see programmers to get familiar will all these.
Any list of programming job interview questions isincomplete without questions from data structures and algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Similarly while going on questions from data structure you may get some programming exercise as well e.g. swapping numbers without temp variable .Linked list and arrays are favorite topics in any data structure interview, questions like reversing linked list, traversing linked list or deleting nodes from linked list, which involves algorithm and data structures are quite common.
Similarly, finding duplicates in array, finding missing numbers, sorting arrays are very popular.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You can also expect questions from stack, queue, array, linked list, tree, graph andHashMap are most common in any data structure interview.
In this tutorial, we will see couple of data structure questions answers from these topic.
Let us know, if you have any interesting questions from data structures and algorithm, which you faced during any Java interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structures and Algorithm Interview Questions for Java Programmers This is combined list of questions from various data structure e.g. array, linked list, stack or queue.
It includes some coding questions as well, which gel with data structures.  Question 1 : How to find middle element of linked list in one pass?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One of the most popular question from data structures and algorithm, mostly asked on telephonic interview.
Since many programmer know that, in order to find length of linked list we need to first traverse through linkedlist till we find last node, which is pointing to null, and then in second pass we can find middle element by traversing only half of length.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They get confused when interviewer ask him to do same job in one pass.
In order to find middle element of linked list in one pass you need to maintain two pointer, one increment at each node while other increments after two nodes at a time, by having this arrangement, when first pointer reaches end, second pointer will point to middle element of linked list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>See this trick to find middle element of linked list in single pass for more details.
Question 2 : How to find if linked list has loop ?
This question has bit of similarity with earlier algorithm and data structure interview question.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I mean we can use two pointer approach to solve this problem.
If we maintain two pointers, and we increment one pointer after processing two nodes and other after processing every node, we are likely to find a situation where both the pointers will be pointing to same node.
This will only happen if linked list has loop.
Question 3 : How to find 3rd element from end in a linked list in one pass?
This is another frequently asked linked list interview question.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This question is exactly similarto finding middle element of linked list in single pass .If we apply same trick of maintaining two pointers and increment other pointer, when first has moved upto 3rd element, than when first pointer reaches to the end of linked list, second pointer will be pointing to the 3rd element from last in a linked list.
Question 4 : In an integer array, there is 1 to 100 number, out of one is duplicate, how to find ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is a rather simple data structures question, especially for this kind of.
In this case you can simply add all numbers stored in array, and total sum should be equal ton(n+1)/2.
Now just subtract actual sum to expected sum, and that is your duplicate number.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Of course there is a brute force way of checking each number against all other numbers, but that will result in performance of O(n&lt;s&gt;2) which is not good.
By the way this trick will not work if array have multiple duplicates or its not numbers forming arithmetic progression.
Here is example of one wayto find duplicate number in array .
Question 6 : How to reverse String in Java ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is one of my favorite question.
SinceString is one of the most important type in programming, you expect lot of question related to String any data structure interview.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are many ways to reverse Sting in Java or any other programming language, and interviewer will force you to solve this problem by using without API i.e. without usingreverse() method of StringBuffer.
In follow-up he may ask to reverse String using recursion as well.
See 3 ways to reverse String in Java to learn reversing String using both loops andrecursion in Java .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 7 : Write a Java program to sort a array using Bubble Sort algorithm?
I have always send couple of questions from searching and sorting in data structure interviews.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Bubble sort is one of the simplest sorting algorithm but if you ask anyone to implement on the spot it gives you an opportunity to gauge programming skills of a candidate.
See How to sort array using Bubble Sort in Java forcomplete solution of this datastrucutre interview question.
Question 8 : What is difference between Stack and Queue data structure ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One of the classical datastrucutre interview question.
I guess every one know, No?
Any way main difference is that Stack is LIFO(Last In First Out) data structure while Queue is a FIFO(First In First Out) data structure.
Question 9 : How do you find duplicates in array if there is more than one duplicate?
Sometime this is asked as follow-up question of earlier datastrucutre interview question, related to finding duplicates in Array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One way of solving this problem is usinga Hashtable or HashMap datastructure.
You can traverse through array, and store each number as key and number of occurrence as value.
At the end of traversal you can find all duplicate numbers, for which occurrence is more than one.
In Java if a number already exists in HashMap then calling get(index) will return number otherwise it return null. this property can be used to insert or update numbers inHashMap.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 10 : What is difference between Singly Linked List and Doubly Linked List data structure?
This is another classical interview question on data structure, mostly asked on telephonic rounds.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Main difference between singly linked list and doubly linked list is ability to traverse.
In a single linked list, node only points towards next node, and there is no pointer to previous node, which means you can not traverse back on a singly linked list.
On the other hand doubly linked list maintains two pointers, towards next and previous node, which allows you to navigate in both direction in any linked list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 11 : Write Java program to print Fibonacci series ?
This is not a data structures question, but a programming one, which many times appear during data structure interview.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Fibonacci series is a mathematical series, where each number is sum of previous two numbers e.g. 1,1, 2, 3, 5, 8, 13, 21.
Interviewer is often interested in two things, a function which returns nth number in Fibonacci series and solving this problem using recursion in Java.
Though, its easy question, recursion part often confuses beginners.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>See this link to find nth Fibonacci number in Java .
Question 12 : Write Java program to check if a number is palindrome or not?
This is similar to previous question, not directly related to data structures, but quite popular along with other questions.
A number is called palindrome, if reverse of number is equal to number itself.
Interviewer ask to solve this problem without taking help from Java API or any open source library.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any way it’s simple question, you can use division operator (/) and remainder operator (%) to solve this question.
Just remember, division operator can be used to get rid of last digit e.g. 1234/10 will give you 123, and modulus operator can give you last digit e.g. 1234%10 will return 4.
By the way, here isa Java program check if number is palindrome or not .
Question 13 : What is binary search tree?
This is a data structure question from Tree data structures.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Binary Search Tree has some special properties e.g. left nodes contains items whose value is less than root , right sub tree contains keys with higher node value than root, and there should not be any duplicates in the tree.
Apart from definition, interview can ask you to implement binary search tree in Java and questions on tree traversal e.g. IN order, preorder, and post order traversals are quite popular data structure question.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 14 : How to reverse linked list using recursion and iteration?
This is another good question on data structures.
There are many algorithm to reverse linked list and you can search of them using google.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I am thinking of writing another blog post to explain linked list reversal and will share with you later.
Question 15 : Write a Java program to implement Stack in Java?
You can implement Stack by using array or linked list.
This question expect you to implement standard method provided by stack data structure e.g.push() and pop().  Both push() and pop() should be happen at top of stack, which you need to keep track.
It’s also good if you can implement utility methods likecontains(), isEmpty() etc.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By the way JDK has java.util.Stack class and you can check it’s code to get an idea.
You can also check Effective Java book , where Josh Bloch has explains how an incorrect implementation of stack can cause memory leak in Java.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>That's all on this list of data structure interview questions and answers.
This is one topic, which is always asked in any programming interview, doesn't matter if you are C, C++, or Java developer, basic knowledge of data structure like array, linked list, stack, queue, tree are must to clear any programming interview.
Relate Java Interview Questions from Javarevisited Blog Top 15 multithreading and concurrency Interview Questions from Investment banks Top 10 Garbage Collection Interview Questions in Java 10 Java Generics Interview Questions for Programmers 10 JDBC Interview questions for Java developers Top 10 Spring Framework Interview questions for J2EE developer Please share with your friends if like this article Posted by Javin Paul at 7:09 AM Email This BlogThis!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Share to Twitter Share to Facebook Labels:core java , core java interview question ,data structure and algorithm ,programming 10 comments:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Heisenberg said...
Great post Javin!
Really helpful.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I was recently asked following questions in interviews.
I have found answers via Google search, but it would be great to know your comments on these questions.
1. Write your own HashMap/Hashtable implementation in Java 2.
How to implement your own LinkedList (without using any Java API)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 16, 2013 at 12:58 AM Javin @ Must Override Eclipse Error said... @Heisenberg, Thanks for sharing those questions, they are real good.
You can implement HashMap by using Array, because only provide constant time access, if you know index.
Key is to writing hash function to minimize collision.
Similarly, you can implement linked list by creating some class e.g. Node, which holds data and keep track of next node.
By the way, I will try to blog answers in more details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 16, 2013 at 2:30 AM SARAL SAXENA said...
Hi Javin, Gr8 artcile once again regarding second question ( How to find if linked list has loop ?), I want to add the following thing...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1) To determine if linked list has a loop or not..
You can detect it by simply running two pointers through the list.
Start the first pointer A on the first node and the second pointer B on the second node.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Advance the first pointer by one every time through the loop, advance the second pointer by two.
If there is a loop, they will eventually point to the same node.
If there's no loop, you'll eventually hit the end with the advance-by-two pointer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Consider the following loop:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>head -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 &lt;s&gt; | | | +------------------------+ Starting A at 1 and B at 2, they take on the following values:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A B = = 1 2 2 4 3 6 4 8 5 4 6 6 Because they're equal, and B should always be beyond A (because it's advancing by two as opposed to the advance-by-one behaviour of A), it means you've discovered a loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The pseudo-code will go something like this:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>def hasLoop (pointer nodeA): # nodeA is first element # Empty lest has no loops.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if nodeA == NULL: return false # Set nodeB to second element.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>nodeB = nodeA.next # Until end of list with nodeB.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>while nodeB != NULL: # Advance nodeA by one, nodeB by two (with end-list check).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>nodeA = nodeA.next if nodeB.next == NULL: return false nodeB = nodeB.next.next # If same, we have a loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if nodeA == nodeB: return true endwhile # Exited without loop maens no loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>return false enddef 2) The second query is to the point at which loop started...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Once you know a node within the loop, finding the first node is easy.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Leave one pointer A on that node and advance the other B by one.
Then use a third node C, initially set to the head.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Then you just advance B continuously.
If you find it equal to C, then C is the start of your loop.
On the other hand, if B ends up wrapping around to A again, then C is before your loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In that case, advance C and B by one and keep going.
Eventually, C will enter the loop and be met by B, at which point you're done.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(C goes this way).
C -&gt;&gt; A (this is where A and B | | first met). v v head -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 &lt;s&gt; | | | +------------------------+ (B runs through this loop, every time it reaches A, you advance C; when it reaches C, that's your first loop node).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 17, 2013 at 4:21 AM SARAL SAXENA said...
Javin Regarding Q3 (How to find 3rd element from end in a linked list in one pass)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One approach could be in terms of pseudo ode could also be The first node in you list I am assuming is called head.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So set a pointer to head, we'll call it current Node current = head; Then make another pointer that points three positions ahead Node threeAhead = head.next.next.next; Then write a loop that first checks to see if threeAhead.next is null, if it is not:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>threeAhead = threeAhead.next; curr = curr.next; When threeAhead.next becomes null, you are three positions from the end with current.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>so finally if you know what the length of the list is before you start, node = first; for (i = 0; i &lt; length - N_FROM_END; i++) { node = node.next; } result = node.value In java ..java.util.LinkedList: linkedList.get(linkedList.size() - 3)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>but if you don't now the length..
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>nodes = new Node[N_FROM_END]; node = first; for (i = 0; node != null; i++) { nodes[i % N_FROM_END] = node; node = node.next; } result = nodes[i % N_FROM_END].value or something like that.
(Check the boundary conditions ... and account for the list length being less than N_FROM_END.)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 17, 2013 at 5:31 AM Javin @ method override error in eclipse java 5 said... @Saral Saxena, Great comment and thanks for your pseudo code, I see it helps.
I will try to cover question of detecting linked list with loop, may be another post.
Once again, thanks for adding value.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Javin March 18, 2013 at 5:56 AM Anonymous said... @Javin and Saral, can u guys please have a look if below method is correct for Queation 2 (loop detection in linkedlist)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>public static void isListInLoop(LinkedList.Node head, Node tail) { LinkedList.Node nodeA = head.next(); LinkedList.Node nodeB = head.next().next(); int counter = 0; while(nodeB.next() != null) { if( nodeA.equals(nodeB) ) break; nodeB = nodeB.next(); } System.out.println(&quot;Loop detected...&quot;); } March 22, 2013 at 9:03 PM Anonymous said...
For Question 3 another solution could be (with java.util.LinkedList), public static void get3rdElementFromEnd () { java.util.LinkedList ll = new java.util.LinkedList(); ll.add(&quot;A&quot;); ll.add(&quot;B&quot;); ll.add(&quot;C&quot;); ll.add(&quot;D&quot;); ll.add(&quot;E&quot;); ll.add(&quot;F&quot;); ll.add(&quot;G&quot;); int threeAhead=0, threeBack=0; System.out.println(&quot;ll.size = &quot;+ll.size()); if(ll.size() &gt; 3) { for(String s : ll) { threeAhead++; if(threeAhead &gt; 3 ) threeBack++; } int i = threeAhead - threeBack; System.out.println(&quot;-- i = &quot;+i); if( i == 3 ) { System.out.println(&quot;Third Element From End = &quot;+ll.get(threeBack)); } } } Please comment if this solution is not perfect at any point.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>March 22, 2013 at 11:06 PM Anonymous said...
Hi guys, recently in an interview I was asked how would you reverse a linked list?
I answered that I would have a new list, iterate the original linked list and add elements of this list at head of new list.
Interviewer was not convinced with my answer.
Anyway I thought of writing a program to prove this...here is complete program.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>package example.datastructure; public class LinkedlistExample { public static void main(String[] args) { Node head = new Node(); for (int i =3;i&lt;=10;i++) { insertAtTail(head, new Node(&quot;&quot;+i, null)); } for (int i =2;i&gt;0;i--) { insertAtHead(head, new Node(&quot;&quot;+i, null)); } traverseList(head); reverseList(head); traverseList(head); deleteNode(head, &quot;10&quot;); traverseList(head); } /* * Add element at tail of list. * */ static void insertAtTail(Node head, Node node) { if (head.next == null) { head.next=node; System.out.println(&quot;Linked list is empty insertAtLast&quot;); return; } Node lastNode = head.next; while(lastNode.next!
=null) { lastNode=lastNode.next; } lastNode.next=node; } /* * delete a node matching data. * */ static void deleteNode(Node head, String data) { if (head.next == null) { System.out.println(&quot;Linked list is empty in deleteNode&quot;); return; } Node lastNode = head.next; Node previousNode = head; while(lastNode!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>=null) { if(lastNode.data.equals(data)) { break; } previousNode = lastNode; lastNode=lastNode.next; } previousNode.next=lastNode.next; } /* * Add element at head of list * */ static void insertAtHead(Node head, Node node) { if (head.next == null) { head.next=node; System.out.println(&quot;Linked list is empty insertAtHead&quot;); return; } node.next=head.next; head.next=node; } static void traverseList(Node head) { Node lastNode = head.next; if (head.next == null) { System.out.println(&quot;Linked list is empty in traverseList&quot;); } System.out.print(&quot;Data: &quot;); while(lastNode!
=null) { System.out.print(&quot; &quot; + lastNode.data); lastNode=lastNode.next; } System.out.println(); } /* * Reverse a linked list. * */ static void reverseList(Node head) { if (head.next == null) { System.out.println(&quot;Linked list is empty in reverseList&quot;); } /* * Create a linked list by adding elements of original list at head of new list. * */ Node newHead = new Node(); Node lastNode = head.next; Node tempNode; while(lastNode!
=null) { tempNode = lastNode; lastNode=lastNode.next; tempNode.next=newHead.next; newHead.next=tempNode; } head.next = newHead.next; } } class Node { String data; Node next; Node() {} Node(String data, Node next) { this.data=data; this.next= next; } } Output: Linked list is empty insertAtLast Data: 1 2 3 4 5 6 7 8 9 10 Data: 10 9 8 7 6 5 4 3 2 1 Data: 9 8 7 6 5 4 3 2 1 Please suggest if anything wrong in this code.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Thanks, Prashant March 28, 2013 at 10:13 PM Anonymous said...
Some more codes..1) Find middle element 2) find nth element 3) Find and remove loop in list package example.datastructure; public class LinkedlistExample { public static void main(String[] args) { Node head = new Node(); for (int i =3;i&lt;=10;i++) { insertAtTail(head, new Node(&quot;&quot;+i, null)); } for (int i =2;i&gt;0;i--) { insertAtHead(head, new Node(&quot;&quot;+i, null)); } findMiddleElement(head); findNthElementfromlast(head,4); // Create , detect and remove loop from list head = new Node(); createListHavingLoop(head); findAndRemoveLoopNode(head); traverseList(head); } static void removeLoopNode(Node loopNode, Node head) { Node node1 = head; Node node2 = null; while (true) { node2 = loopNode; while (node2.next !
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>= loopNode &amp;&amp; node2.next !
= node1) { node2 = node2.next; } if (node2.next == node1) { break; } else { node1= node1.next; } } node2.next=null; } static void findAndRemoveLoopNode(Node head) { if (head.next == null) { System.out.println(&quot;Linked list is empty findLoopNode&quot;); return; } Node currentNode = head.next; Node startNode=head; Node lastNode=head.next.next; while(lastNode!
=null) { currentNode = currentNode.next; if (lastNode.next !
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>= null) { lastNode = lastNode.next.next; } if(lastNode == currentNode) { startNode = startNode.next; System.out.println(&quot;Loop Node is :&quot; + currentNode.data); removeLoopNode(currentNode, head); return; } } System.out.println(&quot;Loop node does not exist&quot;); } static void createListHavingLoop(Node head) { Node node1= new Node(&quot;1&quot;, null); Node node2= new Node(&quot;2&quot;, null); Node node3= new Node(&quot;3&quot;, null); Node node4= new Node(&quot;4&quot;, null); Node node5= new Node(&quot;5&quot;, null); Node node6= new Node(&quot;6&quot;, null); Node node7= new Node(&quot;7&quot;, null); Node node8= new Node(&quot;8&quot;, null); Node node9= new Node(&quot;9&quot;, null); Node node10= new Node(&quot;10&quot;, node4); insertAtTail(head, node1); insertAtTail(head, node2); insertAtTail(head, node3); insertAtTail(head, node4); insertAtTail(head, node5); insertAtTail(head, node6); insertAtTail(head, node7); insertAtTail(head, node8); insertAtTail(head, node9); insertAtTail(head, node10); } static void findNthElementfromlast(Node head, int nthFromLast) { if (head.next == null) { System.out.println(&quot;Linked list is empty findNthElementfromlast&quot;); return; } Node currentNode = head.next; Node tempNode=head; Node lastNode = null; for (int i=1; i&lt;=nthFromLast;i++) { tempNode = tempNode.next; } lastNode=tempNode; while(lastNode.next!
=null) { if (lastNode.next !
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>= null) { lastNode = lastNode.next;} currentNode = currentNode.next; } System.out.println(nthFromLast + &quot; element from last is : &quot; + currentNode.data); } static void findMiddleElement(Node head) { if (head.next == null) { System.out.println(&quot;Linked list is empty findMiddleElement&quot;); return; } int length = 0; Node middleNode = head; Node lastNode= head.next; while(lastNode!
=null) { length++; if(length % 2 == 0) { middleNode = middleNode.next; } lastNode = lastNode.next; } if (length %2 ==1) { middleNode = middleNode.next; } System.out.println(&quot;Middle element is : &quot; + middleNode.data); } } Thanks, Prashant March 29, 2013 at 5:08 AM shaique said...
Thanks Javin Paul .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>April 4, 2013 at 3:09 AM Post a Comment Newer Post Older Post Home Subscribe to: Post Comments (Atom)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Loading Recent Posts Follow Us Follow @javinpaul Subscribe by email:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By Javin Paul Subscribe To This Blog Free Posts Atom Posts Comments Atom Comments Followers Blog Archive * ▼  2013 (61) * ►  April (9) * ▼  March (16) * How to Convert and Print Byte array to Hex String ...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 10 Exception handling Best Practices in Java Progr...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to Reverse Array in Java - Int and String Arra...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to check if two String are Anagram in Java - P...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to generate MD5 Hash in Java - String Byte Arr...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 10 Famous Laws of Computer Programming and Softwar...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can we Overload and Override Static methods in Jav...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Top 15 Data Structures and Algorithm Interview Que...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Difference between Struts 1 and Struts 2 framework...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Bitwise and BitShift Operators in Java - AND, OR, ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Difference between Singleton Pattern vs Static Cla...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to Increase Console Buffer Size in Eclipse IDE...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* ReentrantLock Example in Java, Difference between ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 5 books to learn Spring framework and Spring MVC f...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to create Immutable Class and Object in Java -...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How to write Unit Test in Java using JUnit4 in Ecl...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* ►  February (18) * ►  January (18) * ►  2012 (218) * ►  December (52) * ►  November (8) * ►  October (15) * ►  September (8) * ►  August (9) * ►  July (9) * ►  June (12) * ►  May (10) * ►  April (14) * ►  March (28) * ►  February (18) * ►  January (35) * ►  2011 (145) * ►  December (28) * ►  November (14) * ►  October (14) * ►  September (22) * ►  August (11) * ►  July (7) * ►  June (9) * ►  May (6) * ►  April (10) * ►  March (4) * ►  February (10) * ►  January (10) * ►  2010 (33) * ►  December (4) * ►  October (29)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>References * Java API documentation JDK 6 * Spring framework doc * Struts * ANT * Maven * JDK 7 API * MySQL * Linux * Eclipse Copyright by Javin Paul 2012.
Powered byBlogger .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* About Me * Privacy Policy Algorithm/Data Structure Design Interview Questions - Stack Overflow Stack Exchange log in | careers 2.0 | chat | meta | about | faq Stack Overflow * Questions * Tags * Users * Badges * Unanswered * Ask Question Algorithm/Data Structure Design Interview Questions [closed]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>up vote 23 down vote favorite 42 What are some simple algorithm or data structure related &quot;white boarding&quot; problems that you find effective during the candidate screening process?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I have some simple ones that I use to validate problem solving skills and that can be simply expressed but have some opportunity for the application of some heuristics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One of the basics that I use for junior developers is:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a C# method that takes a string which contains a set of words (a sentence) and rotates those words X number of places to the right.
When a word in the last position of the sentence is rotated it should show up at the front of the resulting string.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When a candidate answers this question I look to see that they available .NET data structures and methods (string.Join, string.Split, List, etc...) to solve the problem.
I also look for them to identify special cases for optimization.
Like the number of times that the words need to be rotated isn't really X it's X % number of words.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What are some of the white board problems that you use to interview a candidate and what are some of the things you look for in an answer (do not need to post the actual answer).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>algorithm data-structures share |improve this question edited Sep 19 '08 at 15:01 community wiki 4 revs, 2 users 100% spoon16 closed as not constructive bycasperOne ♦ Dec 3 '11 at 9:02 As it currently stands, this question is not a good fit for our Q&amp;A format.
We expect answers to be supported by facts, references, or specific expertise, but this question will likely solicit debate, arguments, polling, or extended discussion.
If you feel that this question can be improved and possibly reopened,see the FAQ for guidance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>11 Answers active oldest votes up vote 16 down vote I enjoy the classic &quot;what's the difference between a LinkedList and an ArrayList (or between a linked list and an array/vector) and why would you choose one or the other?&quot;
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The kind of answer I hope for is one that includes discussion of:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* insertion performance * iteration performance * memory allocation/reallocation impact * impact of removing elements from the beginning/middle/end * how knowing (or not knowing) the maximum size of the list can affect the decision share |improve this answer answered Sep 12 '08 at 5:25 David Citron 6,03273154 Here are detailed instructions: chaoticjava.com/posts/linkedlist-vs-arraylist – Akshar Prabhu Desai Nov 25 '11 at 18:02 @AksharPrabhuDesai - I would not suggest reading that linked blog entry as a good way to learn about LinkedList vs ArrayList.
The author makes some misleading statements (especially regarding ArrayList resize behavior) and omits some key points (some of which were admittedly filled in by Stephen Colebourne in the blog comments). – David Citron Jan 22 '12 at 21:12 @DavidCitron can you point to some blog/article that includes the discussion of all the bulletted points in your answer below. – Geek Jul 19 '12 at 13:13 up vote 10 down vote Once when I was interviewing for Microsoft in college, the guy asked me how to detect a cycle in a linked list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Having discussed in class the prior week the optimal solution to the problem, I started to tell him.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>He told me, &quot;No, no, everybody gives me that solution.
Give me a different one.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I argued that my solution was optimal.
He said, &quot;I know it's optimal.
Give me a sub-optimal one.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>At the same time, it's a pretty good problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 5:35 Jim Puls 20.4k34365 2   +1 What a lesson!
I assume they cared more about how you would come up with the answer, rather than the answer itself, optimal or not. – Terry Li Oct 7 '11 at 18:33 4   I would say, hash the address of the nodes,and put them in map. if you encounter a node that has already been mapped. bingo!.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>– Kshitij Banerjee Feb 1 '12 at 21:17 1   Right, but that takes O(N) extra memory. – Jim Puls Feb 2 '12 at 1:49 Another way is simply to keep a start and a current pointer.
Where current moves from (next to start to end) and start moves between start and current.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For each iteration of current, check all nodes between start and current.
If next encounters null, there is no cycle if ever next is equal to start, then we have a cycle –  fayyazkl May 28 '12 at 6:05 Here's an option for an out of the box solution - lets say that you know you can iterate over the list at some rate (# nodes/sec) and know how much memory is allocated to this list and sizeof the nodes, then you should get to the end of the list within a time proprotional to the ratio of those two, so stopwatch it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Gets complicated, taking into account task preemtions, cache effects, vm, and that all the allocated memory isnt probably for the list so maybe compute it as a worst case, but this could be a creative alternative showing some mental flexability. – DavidNeiss Apr 5 at 15:14 up vote 9 down vote When interviewing recently, I was often asked to implement a data structure, usually LinkedList or HashMap.
Both of these are easy enough to be doable in a short time, and difficult enough to eliminate the clueless.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 12:26 Bill the Lizard ♦ 109k83297558 sir, this is gonna be a little embarrassing, I posted a question asked by an interviewer, hoping to get some help, but nobody answered it with being viewed 50+ times.
I really hope that you can spare a little time helping me about it, here is the link:stackoverflow.com/q/7425400/888051 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Thank you very much. – Alcott Sep 15 '11 at 5:07 up vote 7 down vote This doesn't necessarily touch on OOP capabilities but in our last set of interviews we used a selection of buggy code from theBug of the Month list.
Watching the candidates find the bugs shows their analytical capabilities, shows the know how to interpret somebody elses code share |improve this answer answered Sep 24 '08 at 12:05 Harry great idea indeed. – Sidra Sultana Jan 24 '12 at 5:24 up vote 6 down vote * Write a method that takes a string, and returns true if that string is a number.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(anything with regex as the most effective answer for an interview) * Please write an abstract factory method, that doesn't contain a switch and returns types with the base type of &quot;X&quot;.
(Looking for patterns, looking for reflection, looking for them to not side step and use an if else if) * Please split the string &quot;every;thing|;|else|;|in|;|he;re&quot; by the token &quot;|;|&quot;.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(multi character tokens are not allowed at least in .net, so looking for creativity, the best solution is a total hack) share |improve this answer edited Mar 9 '10 at 21:55 answered Sep 12 '08 at 5:22 DevelopingChris 9,15874685 5   &quot;Write a method that takes a string, and returns true if that string is a number.
(anything with regex as the most efficient answer).&quot;
I'm sure that ideal for your work, but where I work if you answered that question with a regex solution that would be considered very bad.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Efficient in terms of programmer time, but not run time.
Context is important, even for such simple problems. – jheriko Mar 7 '10 at 15:33 1   I'm looking for efficient use of the white board and my time in the interview.
Agreed regex's are not for most things.
For such a contrived example, would you really place runtime constraints like that?
In general .net where my expertise lies, you aren't scrutinizing your code to the clock cycle.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you were, you wouldn't really be able to have it be managed. –  DevelopingChris Mar 9 '10 at 21:50 2   What is the hack for 3rd ?
Replacing |;| with some other character that doesn't appear in the string?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>– Akshar Prabhu Desai Nov 25 '11 at 20:27 2   @AksharPrabhuDesai yes, usually with something like the pi or theta, so that its out of the typical input, for this case – DevelopingChris Dec 9 '11 at 15:40 up vote 4 down vote Graphs are tough, because most non-trivial graph problems tend to require a decent amount of actual code to implement, if more than a sketch of an algorithm is required.
A lot of it tends to come down to whether or not the candidate knows the shortest path and graph traversal algorithms, is familiar with cycle types and detection, and whether they know the complexity bounds.
I think a lot of questions about this stuff comes down to trivia more than on the spot creative thinking ability.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I think problems related to trees tend to cover most of the difficulties of graph questions, but without as much code complexity.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I like the Project Euler problem that asks to find the most expensive path down a tree (16/67); common ancestor is a good warm up, but a lot of people have seen it.
Asking somebody to design a tree class, perform traversals, and then figure out from which traversals they could rebuild a tree also gives some insight into data structure and algorithm implementation.
The Stern-Brocot programming challenge is also interesting and quick to develop on a board ( http://online-judge.uva.es/p/v100/10077.html ).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer edited Sep 22 '08 at 12:52 answered Sep 15 '08 at 14:41 Aaron N. Tubbs 73156 SSSP = Single Source Shortest Path; APSP = All Pair Shortest Path; DFS = Depth First Search; BFS = Breadth First Search – Binil Thomas Sep 16 '08 at 3:49 up vote 3 down vote I like to go over a code the person actually wrote and have them explain it to me.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 6:21 dotmad 1441 up vote 3 down vote Follow up any question like this with: &quot;How could you improve this code so the developer who maintains it can figure out how it works easily?&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 12 '08 at 13:39 Jon Dewees 1,62031729 up vote 3 down vote A trivial one is to ask them to code up a breadth-first search of a tree from scratch.
Yeah, if you know what you're doing it is trivial.
But a lot of programmers don't know how to tackle it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One that I find more useful still is as follows.
I've given this in a number of languages, here is a Perl version.
First I give them the following code sample:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text># @a and @b are two arrays which are already populated. my @int; OUTER: for my $x (@a) { for my $y (@b) { if ($x eq $y) { push @int, $x; next OUTER; } } } Then I ask them the following questions.
I ask them slowly, give people time to think, and am willing to give them nudges:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is in @int when this code is done? * This code is put into production and there is a performance problem that is tracked back to this code.
Explain the potential performance problem.
(If they are struggling I'll ask how many comparisons it takes if @a and @b each have 100,000 elements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I amnot looking for specific terminology, just a back of the envelope estimate.) * Without code, suggest to make this faster.
(If they propose a direction that is easy to code, I'll ask them to code it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If they think of a solution that will result in @int being changed in any way (eg commonly order), I'll push to see whether they realize that they shouldn't code the fix before checking whether that matters.)
If they come up with a slightly (or very) wrong solution, the following silly data set will find most mistakes you run across:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>@a = qw( hello world hello goodbye earthlings ); @b = qw( earthlings say hello earthlings ); I'd guess that about 2/3 of candidates fail this question.
I have yet to encounter a competent programmer who had trouble with it.
I've found that people with good common sense and very little programming background do better on this than average programmers with a few years of experience.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I would suggest using these questions as filters.
Don't hire someone because they can answer these.
But if they can't answer these, then don't hire them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer edited Sep 18 '08 at 7:04 answered Sep 18 '08 at 4:35 user11318 3,7331223 up vote 3 down vote Implement a function that, given a linked list that may be circular, swaps the first two elements, the third with the fourth, etc...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 24 '08 at 11:46 Xavier Nodet 2,0351127 up vote 2 down vote Asking them to write a recursive algorithm for a well known iterative solution (i.e. Fibonacci etc. -- we give them an iterative function, if needed) and then have them compute the run time for it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Many times the recursive function involves a tree data structure.
The number of times the person has failed to recognize that baffles me.
It becomes slightly difficult to calculate the run time until you can see that it's a tree structure...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I find that this problem covers many areas.
Namely, their code-reading ability (if they are given an iterative function), code-writing ability (since they write a recursive function), algorithm, data-structure (for run-time)...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 18 '08 at 4:40 Swati 5,91921637 Not the answer you're looking for?
Browse other questions tagged algorithm data-structures or ask your own question .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>tagged algorithm  × 28836 data-structures  ×  7850 asked 4 years ago viewed 79374 times active 3 years ago Linked 12 design a system supporting massive data storage and query Related 38 Algorithms and data structures that are not mainstream?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>6 How to Deal with Algorithm/Data Structures Problems in Interview Process?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>3 Data Structure Interview Question 0 Data structure/Algorithm for Streaming Data and identifying topics 3 4 program design interview questions 10 Data structures question 5 Interview Question: Data structure for a large social network 1 questions on data structure design for vectors?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 Question regarding Algorithm Design Manual - Data Structure for the Dictionary 5 How to prove a lower bound logn for a data structure?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>about | faq | blog | chat | data | legal | privacy policy | jobs | advertising info |mobile | contact us | feedback ■ stackoverflow.com   ■ api/apps   ■ careers 2.0   ■ serverfault.com   ■ superuser.com   ■ meta   ■ area 51   ■ webapps   ■ gaming   ■ ubuntu   ■ webmasters   ■ cooking   ■ game development   ■ math   ■  photography   ■ stats   ■ tex   ■  english   ■ theoretical cs   ■ programmers   ■ unix   ■ apple   ■ wordpress   ■ physics   ■ home improvement   ■ gis   ■  electrical engineering   ■ android   ■ security   ■ bicycles   ■ dba   ■  drupal   ■ sharepoint   ■ scifi &amp; fantasy   ■ ux   ■ skeptics   ■ rpg   ■  judaism   ■ mathematica   ■ travel   rev 2013.4.12.642 site design / logo © 2013 stack exchange inc; user contributions licensed undercc-wiki with attribution required Stack Overflow works best with JavaScript enabled Data Structures Interview Questions | CareerCup CareerCup * Questions * Forum * Salaries * Resume Tips * RSS * Sign In ▼ * Sign In * View Cart Data Structures Interview Questions Page: 1 2 3 4 5 6 7 8 9 10 » Filter: (None) 3i Infotech Ltd A9 aabccd Abs india pvt. ltd.
Accenture Accident Compensation Achieve Internet Acme Jet Technologies Adap.tv Adobe ADP Adtran INC Advent Software Advisory Board Company Agilent Technologies Ajr2 technologies pvt ltd Akamai Alcatel Lucent All Scripts Alpari [NZ]
Altair Engineering Altera Amazon Ambarella AMD Amdocs American Airlines Ansaldo STS Aol Aon Hewitt Apache Design Apex Decisions.com Pvt Ltd Apollo Health Street Apple Applied Infornation Sciences AppNexus Argus Aricent Arista Networks Aristocrat Gaming Aruba Networks Inc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Ask.com Aspire Systems ASU ASUS Athena Health Automated Traders Desk Autonomy Zantaz AVVY Global Solutions Axiom Sources Baidu Bally technologies Bank of America Bankbazaar.com Barclays Capital Bazaarvoice Belzabar Software Design Better Labs Big Fish BinarySpectrum Binecs Bitmagic Tehnologies LLP BlackRock Bloomberg LP Blue Jeans Bocada Boeing Booking.com Brainware BridgeNIT BT C-DAC Cadence Inc Capco Capgemini CapitalIQ Caritor Cavium Networks CCN CDAC-ACTS Cenen CenturyLink CGI-AMS Chegg.com Chelsio Communications Chicago Mercantile Exchange Chronus Cisco Systems Citigroup Citrix Online Citrix System Inc Cloudera Cloudmere, Inc.
CMC LTD Codeel Technologies Cognzant Technology Solutions Collective Comelio GmbH Computer Associates Comviva Technologies Continental Cordys Credit Suisse Crompton Greeves CSC CSR Cubic Transportation Systems Limited Cypress Semi conductor private limited Daptiv Defense Research and Development Organization of India Dell Deloitte Consulting LLP Delve Networks Denmin Group Deshaw Inc Did-it.com Digite Infotech Directi Dover Organization Dow Jones DSM SOFT DSO Natl Labs Dynamic Digital Technologies Ebay EC Software EDUCE MICRO RESEARCH EFI Egenera eight-kpc Electronic Arts Elite Core EMC Epic Systems Epsilon Ericsson eSuperSoft Infotech Inc Eterno Infotech Pvt Ltd ETripDeal Evolving Systems Inc EXFO Expedia EZ Prints F5 Networks Fabrix Facebook FactSet Research Systems, Inc Fair Issac Financial Technologies Fiorano FlexTrade Flextrade Systems Flipkart Fortinet Freescale Semiconductors India Pvt Ltd Future Advisor Future Group, Mumbai fXceed Fynanz G-Cube Solutions Garage Corp Gartner Gayatri Vidya Parishad GE (General Electric) Georgia Pacific Global Analytics Global Scholar Globaltech Research Gluster GNWebSoft GoDaddy Gold-Tier Goldman Sachs Google Gowdanar Technologies Graduate Student Green Bricks Groupon GrubHub Guruji Harman Kadron HCL America HCL Headrun Technologies Pvt Ltd Headstrong Hewlett Packard Hi5 Highbridge Capital Home Depot Homeshop18 Honeywell Huawei Hunan Asset IAP Company Pvt Ltd Ibibo IBM Iconologic Igate IIT-D IITB iLabs Imagination Technologies IMG Impetus Infotech India Pvt Ltd Infibeam Infinium Informatica Infosys Initto InMobi Intel Inter-American Development Bank Interactive Brokers Interactive Design Internet Question Interra Systems InterraIT Intuit ION idea ION Trading iPowerFour Iron Mountain Ittiam Systems Ivycomptech Izon Jane Street JDA Jedi Council JP Morgan Juniper Networks Kalido Kaseya Kerkestavni Computecha Corporatci Kingfisher Airlines Kingfisher Kinige Digital Technologies Pvt Ltd Kiwox KLA Tencor Knewton Knoa Software Knowledge Systems KnowledgeBase Komli Media Kongsberg India Kony Labs Kpro Solutions Lab126 Labs247 Laserfiche LexisNexis Lexmark LG Soft India Lime Labs Linkedin Lister Technologies LiteratureBay.com Live Nation LiveRamp Lockheed Martin Loler Inc.
London Investment Bank Loyom LSI L&amp;T Infotech Lunatic Server Solutions Luxoft Magic Software Enterprises MAGMA Manhattan associates MAQ Marketics MarketRX Marvell Mathworks McAfee Mediatek Medio Systems Megasoft Mentor Graphics Merrill Lynch Micron Microsoft MicroStrategy MIH Mindtree Wireless India Misys Model N Monitor Group Morgan Stanley Motorola MounzIT Moyer Group mSpot MSU,baroda Myntra Myntra.com National Informatics Centre National Instruments Ness NetApp NetCracker Technology Solutions Netflix Newgen Software Technologies Ltd Nexabion Nextag NIC Nisum Technologies Nivio Technologies NMSWorks Nokia Nokia Siemens Networks Nomura Novell NVI Technologies NVIDIA One97 oneout OnMobile Open Text Technologies Ltd Opera Solutions Ophio Optical Fusion Software Services Oracle Overstock.com Palantir Technology PayPal Pega Persistent Systems Philips Pinterest Pitney Bowes PJ Pvt Ltd PlayDom PMC-Sierra Pocketgems PointCross Polaris Pramati Technologies PRDS Progress PSA Peugeot Citroen PSE QLogic QNX QSI HealthCare Qualcomm Radisys India Rapleaf Raytheon Real Networks Rebellion Research Religare RelQ Software Company Limited Research In Motion Ricoh RightC Riverbed Roamware Robert Bosch Engineering and Business Solutions Limited Rockwell Collins RoviCorp Roxar Royal Bank of Scotland RSA Sabre Holdings Safenet Sage Software Salesforce Samsung Sap Labs Sapient Corporation SAS Research sasken communication technologies Sasken Schneider Electric SE-Mentor (P) Llimited Search Media Sears Holding seclore technology Secure Meters Secure World Corporation SETU Software Systems Pvt.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Ltd.
Shutterfly Siemens Sierraware SIG (Susquehanna International Group) SignPost Sileria Inc.
Singapore Technologies Snug loans Socialcam Softchoice Software AG Sonoa Systems Sonus Sophos SRMicro Info Systems Starent Networks StartUp student student so not working till now SunGard SWAPTON SOLUTIONS Symantec Symphony Services SynCfusion Syncsort Synopsys R&amp;D Syracuse University Take Two Interactive Tally Solutions TATA Consultancy Services Tech India Line Tech Mahindra Ltd Techlogix Tejas Networks Tellabs Tencent test Texas Instruments The Digital Group The Mind Company The Royal Bank of Scotland Chennai thePlatform Thirdware Technologies Thomson Reuters Thoughtwire ThoughtWorks Tiapps pvt ltd TIPL TP TranSwitch TRG Tribal Fusion Trilogy Turing Software Twitter Two Sigma United HealthGroup University of Trento Urban Touch USAA USInternetworking V3 Designers VANS Vanu Vdopia Verizon Wireless Vichara Vichara Technology Video Gaming Technologies Vinfotech Pvt ltd Virtusa Vizury VMWare Inc WaitAndWatch Walmart Labs Watchguard Webbing Technologies Wichorus Wipro Technologies Wireless Generation Work Accident Claim WorksApp X Xurmo Yahoo Yandex Yatra.com Yelp Zillow Zoho Corporation Zoosk ZS Associates Zycus Zynga (None) Accountant Analyst Android test engineer Applications Developer Area Sales Manager Associate CEO Computer Scientist Consultant Developer Program Engineer Development Support Engineer Field Sales Financial Application Engineer Financial Software Developer Firmware Engineer Founder/ Coder Front-end Software Engineer Graphics Programmer Interaction Designer Intern iOS Developer Java Developer Member Technical Staff MTS Network Engineer Personnel Principal Software Engineer Product Security Engineer Production Engineer Program Manager Quality Assurance Engineer Research Scientist Reverse Engineering and System Developer Scientific Officer SDE-2 SDE1 Security Analyst Senior Software Development Engineer Site Reliability Engineer Software Analyst Software Architect Software Development Manager Software Engineer / Developer Software Engineer in Test Software Engineer Intern Software Quality Associate Software Trainee Solutions Architect Sr.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Program Manager Sr.
Technical Officer Student System Administrator Systems Design Engineer Tech Lead Technical Architect Technical Support Engineer Testing / Quality Assurance Virus Researcher Web Developer (None) Algorithm Android Application / UI Design Arrays Assembly Automata Behavioral Bit Manipulation Brain Teasers C C++ C# Cache Coding Compiler Computer Architecture &amp; Low Level Data Mining Data Structures Database Debugging Distributed Computing Dynamic Programming Experience Front End Web Development General Questions and Comments Graphics Hash Table Ideas Java JavaScript Knowledge Based Large Scale Computing Linked Lists Linux Kernel Math &amp; Computation Matrix Networking / Web / Internet Object Oriented Design OODesign Operating System Operators Perl PHP Probability Problem Solving Python Questions YOU should ask!
Sales Security Sets Sorting SQL Stacks String Manipulation System Administration System Design Terminology &amp; Trivia test Testing Threads Trees and Graphs Unix XML Sort By: Date | Number of Comments | Most Recent Comment * -1 of 1 vote 0 Answers How can you implement a Hashtable with any given data structure What is hash function How can you resolve collisions - Guest SVM on April 12, 2013 in United States for AWSEdit | Report Duplicate | Flag Amazon Senior Software Development Engineer Data Structures * 0 of 0 votes 8 Answers Given a huge file, design a data structure to output all possible anagrams of a particular word.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For Eg the file contains: &quot;POT, OPT, TOP&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If I query for POT, I should get back all possible anagrams contained in the file. -- - xankar on April 11, 2013 in United States Edit | Report Duplicate | Flag Goldman Sachs Senior Software Development Engineer Data Structures * 0 of 0 votes 9 Answers Class and Data Structure Design for a &quot;metric&quot; system to determine the top song of a band.
Two Web Service calls:
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>void play(String bandname, String songname); String topSong(String bandname); CONSTRAINTS: For this exercise we should constrain the design to a single server and do NOT use a database, but in memory data structure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>SAMPLE INPUT/OUTPUT play(&quot;Guns N Roses&quot;, &quot;Welcome To the Jungle&quot;); topSong(&quot;Guns N Roses&quot;) =&gt; &quot;Welcome To the Jungle&quot; play(&quot;Guns N Roses&quot;, &quot;Sweet Child of Mine&quot;); topSong(&quot;Guns N Roses&quot;) =&gt; &quot;Welcome To the Jungle&quot; play(&quot;Guns N Roses&quot;, &quot;Sweet Child of Mine&quot;); topSong(&quot;Guns N Roses&quot;) =&gt; &quot;Sweet Child of Mine&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>scale the architecture - JSDUDE on April 04, 2013 in United States Edit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures Object Oriented Design * 0 of 0 votes 16 Answers You are given a linked list with nodes containing characters.
The number of characters in each node might differ (e.g. 1st node may have 'a' stored, 2nd might have 'bce', 3rd 'rt' and so on).
You are given the number of nodes and the total number of characters (of all the nodes).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Q: Check if the data stored in the linked list is a palindrome?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- D on March 27, 2013 in India Edit | Report Duplicate | Flag Amazon Software Engineer in Test Data Structures * 0 of 0 votes 3 Answers There is a class class vehicle { int door_numbers; obj colour;//another class has int members Red, Green,Blue bool has_ac; } there is a huge list of data of vehicles, the number of doors may vary to 1-million (imaginary vehicle :) ). there may be millions of colors.vehicle may or may not have AC.
How would you save this such that any combination (say all blue cars with ac having 6 doors) may be accessed easily.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Discuss algorithm, complexity and testing strategy - Anonymous on March 26, 2013 in United States Edit | Report Duplicate | Flag student student Algorithm Data Structures * 1 of 1 vote 1 Answer You are given the task of creating the address book application for a smart phone.
There are some of the top level features you must implement.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1.There will be 1000+ phone book entries and user must get very quick response.
2.On default screen it shows the names of all people in alphabetical ascending order.
3.Using the search option, user can search and it will show only those names starting with those characters which are typed in the search box.
You are supposed to compare two different data structures and list down the pros and cons of each and finally recommend the best suited data structure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- PaulDaviesC on March 23, 2013 in India Edit | Report Duplicate | Flag Xurmo Intern Data Structures * 0 of 0 votes 6 Answers Code up a simple Bloom Filter for four letter words.
Assume all words are lowercase, exactly four letters long, and only use the letters a to z.
An example set of test words might be able, band, bend, card, darn, form, grab, harm, look, make, mate, peer, and team, but assume the actual list of words is much bigger.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- showell30@yahoo.com on March 16, 2013 in United States Edit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 1 of 1 vote 11 Answers How will you store a million phone numbers in a space efficient way?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Shock on March 13, 2013 in India Edit | Report Duplicate | Flag Intuit Software Engineer / Developer Data Structures * 3 of 3 votes 21 Answers Give the algorithm and code to get the depth of the deepest odd level leaf node in a binary tree.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- tom on March 04, 2013 in United States Edit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 1 of 1 vote 23 Answers There are 2 sorted sets.Find the common elements of those sets e.g.
A={1,2,3,4,5,6} B={5,6,7,8,9} o/p C={5,6} Complexity should ne 0(n+m) where n and m is the size of the first and second set respectively Which data structure should be used to store the output - anonymous on February 22, 2013 in United StatesEdit | Report Duplicate | Flag Linkedin Software Engineer / Developer Algorithm Data Structures * 0 of 0 votes 50 Answers Implement a set that supports insert, remove and getRandomElement() operations.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- ak on February 21, 2013 in India Edit | Report Duplicate | Flag Google Software Engineer / Developer Data Structures * 0 of 0 votes 2 Answers Have you heard of the data structure called heaps?
What do you know about them?
Where would you use heaps and why?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- roadrunner on February 19, 2013 in United StatesEdit | Report Duplicate | Flag Software Engineer / Developer Data Structures * 0 of 0 votes 1 Answer What do you know about hash tables?
Talk about collisions and collision handling methods.
What are the cons of using chaining?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>-- Essentially he wanted to hear about complexity and about the effects of chaining on the complexity.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- roadrunner on February 19, 2013 in United StatesEdit | Report Duplicate | Flag Software Engineer / Developer Data Structures * 0 of 0 votes 6 Answers A tree-map is implemented using BST, the complexity of search in a tree-map is guaranteed to be O(logn).
How is that case of search complexity O(n) [obtained when the BST is like a linked list from the root node, only in single side] in BST avoided in tree-map.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Srikanth on February 15, 2013 in United StatesEdit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 0 of 2 votes 9 Answers Which data structure is preferred for performing concurrency, serialization out of BST and Hash-Table.?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Srikanth on February 15, 2013 in United StatesEdit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 0 of 0 votes 4 Answers Compare the space complexity of BST and Hash-Table.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Srikanth on February 15, 2013 in United StatesEdit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 0 of 0 votes 27 Answers Given a BST and a node, write a function to find the next biggest element in the BST in preferred language.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Srikanth on February 15, 2013 in United StatesEdit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 0 of 0 votes 41 Answers Suppose we are detecting fraud cheques and we found the cheques with the following list of patterns are fraud:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>111122234455 1234 22334455 11111111 234567 etc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Now if you have a new cheque and wan to detect fraud in O(1) time what data structure you want to use?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- zahidbuet106 on February 13, 2013 in United StatesEdit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 0 of 0 votes 6 Answers Pinterest has access to a large volume of 'pins' say of the order of 10 million.
It is now required to display the 'Top 50' pins to the users on the website.
Each pin has an associated 'score id' which is constantly updated as users 'like' the pin.
Explain the run time complexity and memory requirements of the architecture.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- maytas92@yahoo.com on February 11, 2013 in United StatesEdit | Report Duplicate | Flag Pinterest Software Engineer / Developer Data Structures * 0 of 0 votes 10 Answers What are uses of Btree, AVL and RBtree(individual applications as i explained that we use them whenever we need balanced BST and he wasnt convinced) When would you specifically use Btree over AVL tree.
Which one out of balanced BST is most efficient(for which i answered Btree for large values of n) and he asked why dont we always use Btree then?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- vik on February 09, 2013 in United StatesEdit | Report Duplicate | Flag Bloomberg LP Financial Software Developer Data Structures * 1 of 1 vote 16 Answers Design a phonebook dictionary which on input any characters gives names and phone number of all the matching names(prefix)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For instance Rihana 233222232 Ricky 134242444 Peter 224323423 Ron 988232323 If you give R as input it should list Rihana Ricky and Ron which their contact numbers If you give ri as input it should list Rihana, Ricky which their contact numbers - vik on February 08, 2013 in United StatesEdit | Report Duplicate | Flag Bloomberg LP Financial Software Developer Algorithm Data Structures * 0 of 0 votes 18 Answers Given a file which contains list of function with parameters and return types (Assume parameters and return type as primitives) they can be of any order Example: File functions.txt contains below info int e=f1(a,b,c,d) int c=f2(a,b,d) f3(a,c) float d = f4() question follows as below We need to implement function execute(functions.txt,a,b,d) where functions.txt is the file which contains just functions info and a,b, d are input parameters of functions defined in the file.
Now read the file and we need to determine the order of execution of function depending on the input parameter list we can't execute f1 first because we have only parameters a , b and d f2 can be executed because we have a, b and d parameters, which gives parameter c now f3 can be executed because we have parameters a and c.. so we need to find the order and execute functions as quickly as possible (can use multi threading) so efficient order is f2 and f4 can run parallel and then f1 and f3 can be started only after completion of f2.
What are the data structures we use here to solve this problem Consider execute function which takes always 1st parameter as filename and the rest of parameters as dynamic (similar to ... in java for dynamic parameter list)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- qstforums on February 07, 2013 in United StatesEdit | Report Duplicate | Flag Amazon Data Structures * 0 of 0 votes 5 Answers A spreadsheet consists of a two-dimensional array of cells, labeled A1, A2, etc.
Rows are identified using letters, columns by numbers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Each cell contains either an integer (its value) or an expression.
Expressions contain integers, cell references, and the operators '+', '-', '*', '/' with the usual rules of evaluation – note that the input is RPN and should be evaluated in stack order.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a program (in C, C++ or Java) to read a spreadsheet from ‘stdin’, evaluate the values of all the cells, and write the output to ‘stdout’.
The spreadsheet input is defined as follows: • Line 1: two integers, defining the width and height of the spreadsheet (n, m) • n*m lines each containing an expression which is the value of the corresponding cell (cells enumerated in the order A1, A2, A, B1, ...)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Your program must output its data in the same format, but each cell should be reduced to a single floating-point value.
For example, we would expect the following expect to produce the indicated output: Input Expected Output 3 2 A2 4 5 * A1 A1 B2 / 2 + 3 39 B1 B2 * / 3 2 20.00000 20.00000 20.00000 8.66667 3.00000 1.50000 The above example input visually looks like: | 1 | 2 | 3 | --+-------------+-------+--------------+ A | A2 | 4 5 * | A1 | --+-------------+-------+--------------+ B | A1 B2 / 2 + | 3 | 39 B1 B2 * / | ------------------------+--------------+ - sandeep17199117 on February 01, 2013 in United StatesEdit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures * 0 of 0 votes 39 Answers You have given an array of Integers of size n, and a sliding window by 1 integer ,of size k &lt;= n. you have to print minimum number in each window of size k.
E.g: given array [3,9,0,3,18,6], i.e.n = 6 and window size k = 3 available windows for above array is [3,9,0] ,[9,0,3],[0,3,18], [3,18,6] output should be : 0, 0, 0,3 - pandu.vdp on January 30, 2013 in India Edit | Report Duplicate | Flag Chronus Java Developer Data Structures * -1 of 1 vote 5 Answers Read a file and create a a datastructure which holds all the anagrams of words conatined in the file..
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For e.g lets say file content is &quot;abc bca&quot; we need a DS to say &quot;abc&quot; and &quot;cba&quot; are anagrams.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I told i will use a FileReader to read characters than bytes and assing a prime number for each alphabet say a - 2 b - 3 c - 5 and calculate the compound ofr multiplication say abc = 2 * 3 * 5 = 30 bca = 3 * 5 * 2 = 30 i will use the compound a key in hashmap.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>like 30 = abc-&gt; bca -&gt; cba Let me know for any other better solution - vasa.v03 on January 28, 2013 in India Edit | Report Duplicate | Flag Ebay Member Technical Staff Data Structures * 0 of 0 votes 18 Answers Given a two dimensional matrix of booleans, there is a function that returns the number of &quot;true regions&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A region is a group of True values aligned vertically or horizontally.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>T T &lt;= 1 region T F T F &lt;= 2 regions F T Question 1: How would you test a function that solve this problem, but is written by another developer.
How many tests cases do you see?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Question 2: Now write the code to solve this problem.
What are the time and space complexities?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- hnrqbaggio on January 24, 2013 in United States for OfficeEdit | Report Duplicate | Flag Microsoft Software Engineer in Test Algorithm Arrays Data Structures Debugging Microsoft Testing * 0 of 0 votes 11 Answers Given two arrays of ints that are sets, create a function to merge them to create a new set.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A set must pass on these three conditions: - All values are positive - Sorted - Non-duplicates - hnrqbaggio on January 24, 2013 in United States for OfficeEdit | Report Duplicate | Flag Microsoft Software Engineer in Test Algorithm Arrays Data Structures Debugging Microsoft * 0 of 0 votes 15 Answers Tell me if a array of integers is a set.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A set must pass on these three conditions: - All values are positive - Sorted - Non-duplicates After the first solution, I was asked about time and space complexity and to create 5 test cases for my function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- hnrqbaggio on January 24, 2013 in United States for OfficeEdit | Report Duplicate | Flag Microsoft Software Engineer in Test Algorithm Arrays Data Structures Debugging Microsoft * 0 of 0 votes 25 Answers You have a link list with the following structure: struct Node{ Node*next; Node*other; } next pointer points to next node, but &quot;other&quot; pointer points to any node in the list, it can be itself or null.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>you receive the header of a list with this structure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>you have to copy it(allocate new memory) , you cannot modify the structure, you can not modify the list you are given.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- francisco.gutierrez.91 on January 24, 2013 in United States for OfficeEdit | Report Duplicate | Flag Microsoft Software Engineer / Developer Linked Lists Algorithm Data Structures * 0 of 0 votes 3 Answers Implement a shared int pointer in C++ (SharedIntPtr).. the use would be like this:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>SharedIntPtr a(new int); // reference count 1; SharedIntPtr b(a); // reference count 2; *a = 2; cout 1 *a // 0 , object is deleted.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There is also this reference count which tells how many references do you have.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>And the question was: Implement SharedIntPtr, constructors and reset().
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- rodrigoreis22 on January 22, 2013 in United States Edit | Report Duplicate | Flag Amazon Software Engineer / Developer Data Structures Page: 1 2 3 4 5 6 7 8 9 10 » Add Question CareerCup is the world's biggest and best source for software engineering interview preparation.See all our resources .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Disable Chat: To disable chat, go to the top right of the &quot;buddy list&quot;, click the settings icon, and then click &quot;Turn Off.&quot;
How Can You Help CareerCup?
Find Out When Gayle / CareerCup / Cracking the Coding Interview is in Your City Top Companies * Amazon (3013) * Microsoft (1675)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Google (666) * Bloomberg LP (581)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Adobe (345) * Facebook (230)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Yahoo (215) * Qualcomm (202)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* NVIDIA (185) * Goldman Sachs (174)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Companies » Top Jobs * Software Engineer / Dev...
(7008)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Software Engineer in Te...
(724)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Developer Program Engin...
(341)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Financial Software Deve...
(274)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Testing / Quality Assur...
(105)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Program Manager (84)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Applications Developer (83)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Analyst (79) * Java Developer (60)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Development Support Eng...
(59)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Jobs » Top Topics * Algorithm (3493)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Coding (753) * Data Structures (537)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C (504) * C++ (457)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Java (453) * Terminology &amp; Trivia (294)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Brain Teasers (288)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Arrays (276) * Object Oriented Design (232)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Topics » What's Going On Report a Bug or Issue Books is a comprehensive book walking you through every aspect of getting a job at a top tech company, while focuses on software engineering interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Videos CareerCup's interview videos give you a real-life look at technical interviews.
In these unscripted videos, watch how other candidates handle tough questions and how the interviewer thinks about their performance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Resume Review Most engineers make critical mistakes on their resumes -- we can fix your resume with our custom resume review service.
And, we use fellow engineers as our resume reviewers, so you can be sure that we &quot;get&quot; what you're saying.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Mock Interviews Our Mock Interviews will be conducted &quot;in character&quot; just like a real interview, and can focus on whatever topics you want.
All our interviewers have worked for Microsoft, Google or Amazon, you know you'll get a true-to-life experience.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Information * Team, Contact &amp; About * Salaries * RSS * Behavioral Preparation Grid * Sample Resumes Products * * * CtCI iPhone App * Videos Services * Mock Interviews * Resume Review * Wiser Profile (LinkedIn Review) Social * CareerCup on Facebook * CtCI on Facebook * Gayle McDowell on Facebook * CareerCup on Twitter * Gayle on Twitter * CareerCup Blog CareerCup.com © 2012 Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked: Vibrant Publishers: 9781456569716: Amazon.com: Books Amazon Join Prime * Your Amazon.com * Today's Deals * Gift Cards * Help Shop by Department Search All All DepartmentsAmazon Instant VideoAppliancesApps for AndroidArts, Crafts &amp; SewingAutomotiveBabyBeauty BooksCell Phones &amp; AccessoriesClothing &amp; AccessoriesCollectiblesComputersCredit CardsElectronicsGift Cards StoreGrocery &amp; Gourmet FoodHealth &amp; Personal Care Home &amp; KitchenIndustrial &amp; ScientificJewelryKindle StoreMagazine Subscriptions Movies &amp; TVMP3 MusicMusicMusical InstrumentsOffice ProductsPatio, Lawn &amp; Garden Pet SuppliesShoesSoftwareSports &amp; OutdoorsTools &amp; Home ImprovementToys &amp; Games Video GamesWatches Hello.
Sign in Your Account Join Prime Cart 0 Wish List * Books * Advanced Search * New Releases * Best Sellers * The New York Times® Best Sellers * Children's Books * Textbooks * Sell Your Books * Best Books of the Month Sell Us Your Item For a $1.50 Gift Card Learn more Have one to sell?Sell yours here Tell the Publisher!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I'd like to read this book on Kindle Don't have a Kindle?
Get your Kindle here , or download a FREE Kindle Reading App .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sorry, this item is not available in Image not available for Color: Image not available To view this video download Flash Player   Share your own customer images Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked [Paperback]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Vibrant Publishers (Author) 1.0 out of 5 stars   See all reviews  (2 customer reviews ) Available from these sellers .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We have introduced three different series of books for the three different and much in-demand genre of people.
The Job Interview Questions Series caters to IT professionals specifically college freshman, junior/senior programmers, business analysts, and project managers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Self Learning Management Series is intended to give a jump start to working professionals, whose job roles demand to have the knowledge imparted in a B-school but haven't got a chance to visit one.
The Entrance Exam Series covers GRE, GMAT, SAT, TOEFL and IELTS exams.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>About Job Interview Questions Series As technology now-a-days changes very often, IT Professionals need to be updated with the latest trends in these technologies constantly and more importantly instantly.
Job Interview Questions Series is THE answer to this need.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We believe in delivering quality content and do so by tying up with the best authors around the globe.
This series of books is written by expert authors and programmers who have been conducting interviews since a decade or more and have gathered vast experiences in the world of information technology.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Unlike comprehensive, textbook-sized reference guides, our books include only the required information for job search.
Hence, these books are short, concise and ready-to-use by the working Professionals.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All the books in Job Interview Questions series include about 150 to 250 technical interview questions with answers and proven strategies giving Dozens of examples to respond to these interview questions and 51 HR Questions with Answers and Proven strategies to give specific, impressive answers that help nail the interviews.
Besides these, each book is accompanied by 2 Aptitude Tests available as a download from our website.
We hope to serve our readers by saving them time - by providing them with information that is important, and not bombarding them with data from which they need to pick relevant information.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>About Self Learning Management Series The Self Learning Management series intends to give a jump start to working professionals, whose job roles demand to have the knowledge imparted in a B-school but who haven't got a chance to visit one.
This series is designed to illuminate aspects of management, finance, organization development, consumer behavior, human resources, marketing and business.
Dozens of books available in the market give ample information about these topics that may or may not be required.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The distinctiveness of this series lies in that it gives only the relevant required information bundled in a compact form, uncomplicated to interpret.
This series would cover various management topics in 10 different titles.
Each book includes basic fundamentals, important concepts, standard and well-known principles as well as practical ways of application of the subject matter.
The series will be instrumental in assisting all those who are in the following job roles:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a) Dealing with Human Resources b) Taking financial decisions c) Responsible for Sales and Marketing d) Carrying out the Operational activities in a company e) Directing Business strategies f) Engaged in managerial decision making Customer Reviews 1.0 out of 5 stars (2 ) 1.0 out of 5 stars 5 star 0 4 star 0 3 star 0 2 star 0 1 star 2 See both customer reviews Share your thoughts with other customers Write a customer review Most Helpful Customer Reviews 7 of 7 people found the following review helpful 1.0 out of 5 stars little use for real interview February 18, 2011 By Dalun Bao Format: Paperback|Amazon Verified Purchase This book is just a collection of some of programming concepts, things like &quot;what is tree?&quot;
, &quot;what is double-linked list?&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>, &quot;what is array?&quot;
etc and provides answer to each question.
It provides no real value for your interview, I think wiki is much better source for those concepts than this book. not recommend to buy this book for your interview Comment |  Was this review helpful to you?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Yes No 6 of 6 people found the following review helpful 1.0 out of 5 stars Poor editing, poor collection of concepts February 27, 2011 By John Format:Kindle Edition| Amazon Verified Purchase I was hoping that this would be a good &quot;refresher&quot; book for some algorithms and data structures that I use regularly, but may not be able to articulate well in an interview.
I was sorely disappointed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Kindle version looks like it was slapped together quickly to seize the market.
Chalked full of grammatical errors and the like, I honestly can't recommend this book in the slightest.
I'll be paging through &quot;Algorithms in a Nutshell&quot; from O'Reilly instead, along with some of my old computer science texts to ensure that my skills are sharp for technical interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you're looking for a good refresher book, save your money and look elsewhere.
Comment |  Was this review helpful to you?
Yes No › See both customer reviews (newest first)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a customer review Search Customer Reviews Only search this product's reviews Start your free trial and join millions of Amazon Prime members who enjoy: Prime Instant Videos Watch over 38,000 movies and TV episodes Free Two-Day Shipping Get fast, free shipping on over 15 million items Kindle Owners' Lending Library Borrow from over 300,000 titles for free &gt; Get started Watch.
Read.
Shop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Relax.
Millions of Amazon Prime members enjoy instant videos, free Kindle books and unlimited free two-day shipping. &gt; Get started * Unlimited Instant Videos * Prime Instant Videos Unlimited streaming of thousands of movies and TV shows with Amazon Prime * Learn More About Amazon Prime * Amazon Instant Video Store Rent or buy hit movies and TV shows to stream or download * Your Video Library Your movies and TV shows stored in the cloud * Watch Anywhere Watch instantly on your Kindle Fire, TV, Blu-ray player, or set-top box * MP3s &amp; Cloud Player * MP3 Music Store Shop over 20 million songs * Music on Kindle Fire Discover how to play your music * Cloud Player for Web Play from any browser * Cloud Player for Android For Android phones and tablets * Cloud Player for iOS For iPhone, iPad and iPod touch * Cloud Player for Home For Sonos and Roku * Amazon Cloud Drive * Your Cloud Drive 5 GB of free storage * Get the Desktop App For Windows and Mac * Cloud Drive Photos for Android For Android phones and tablets * Learn More About Cloud Drive * Kindle E-readers * Kindle Small, light, perfect for reading * Kindle Paperwhite World's most advanced e-reader * Kindle Paperwhite 3G With free 3G wireless * Kindle E-reader Accessories Covers, chargers, sleeves and more * Kindle Store * Kindle Books * Newsstand * Kindle Owners' Lending Library With Prime, Kindle owners read for free * Kindle Fire * Fire All new--faster, twice the memory * Fire HD 7&quot;, Dolby audio, ultra-fast Wi-Fi * Fire HD 8.9&quot; 8.9&quot;, Dolby audio, ultra-fast Wi-Fi * Fire HD 8.9&quot; 4G With ultra-fast 4G LTE wireless * Kindle Fire Accessories Cases, chargers, sleeves and more * Kindle Apps &amp; Resources * Kindle Cloud Reader Read your Kindle books in a browser * Free Kindle Reading Apps For PC, iPad, iPhone, Android, and more * Manage Your Kindle * Appstore for Android * Apps * Games * Test Drive Apps Try thousands of apps and games right now * Amazon Apps Kindle, mobile shopping, MP3, and more * Your Apps and Devices View your apps and manage your devices * Digital Games &amp; Software * Game Downloads For PC and Mac * Free-to-Play Games For PC and Mac * Software Downloads For PC and Mac * Your Games &amp; Software Library * Audible Audiobooks * Audible Membership Get to know Audible * Audible Audiobooks &amp; More * Bestsellers * New &amp; Notable * Listener Favorites * Whispersync for Voice Switch between reading and listening * Books * Books * Kindle Books * Children's Books * Textbooks * Audiobooks * Magazines * Movies, Music &amp; Games * Movies &amp; TV * Blu-ray * Amazon Instant Video * Music * MP3 Downloads * Musical Instruments * Entertainment Collectibles * Video Games * Game Downloads * Electronics * TV &amp; Video * Home Audio &amp; Theater * Camera, Photo &amp; Video * Cell Phones &amp; Accessories * Video Games * MP3 Players &amp; Accessories * Car Electronics &amp; GPS * Appliances * Musical Instruments * Electronics Accessories * Computers * Laptops, Tablets &amp; Netbooks * Desktops &amp; Servers * Computer Accessories &amp; Peripherals External drives, mice, networking &amp; more * Computer Parts &amp; Components * Software * PC Games * Printers &amp; Ink * Office &amp; School Supplies * Home, Garden &amp; Pets * Kitchen &amp; Dining * Furniture &amp; Décor * Bedding &amp; Bath * Appliances * Patio, Lawn &amp; Garden * Arts, Crafts &amp; Sewing * Pet Supplies * Tools, Home Improvement * Home Improvement * Power &amp; Hand Tools * Lamps &amp; Light Fixtures * Kitchen &amp; Bath Fixtures * Hardware * Building Supplies * Grocery, Health &amp; Beauty * Grocery &amp; Gourmet Food * Wine * Natural &amp; Organic * Health &amp; Personal Care * Beauty * Toys, Kids &amp; Baby * Toys &amp; Games * Baby * Kids' Clothing * Baby Clothing * Video Games for Kids * Amazon Mom 20% off diapers, free shipping and more * Baby Registry * Clothing, Shoes &amp; Jewelry * Clothing * Shoes * Handbags * Accessories * Luggage * Jewelry * Watches * Sports &amp; Outdoors * Exercise &amp; Fitness * Outdoor Recreation * Hunting &amp; Fishing * Cycling * Athletic &amp; Outdoor Clothing * Boating &amp; Water Sports * Team Sports * Fan Shop * Sports Collectibles * Golf * All Sports &amp; Outdoors * Automotive * Automotive Parts &amp; Accessories * Automotive Tools &amp; Equipment * Car Electronics &amp; GPS * Tires &amp; Wheels * Motorcycle &amp; ATV * Industrial &amp; Scientific * Industrial Supplies * Lab &amp; Scientific * Janitorial * Safety * Unlimited Instant Videos * MP3s &amp; Cloud Player20 million songs, play anywhere * Amazon Cloud Drive5 GB of free storage * Kindle * Appstore for AndroidGet a premium app for free today * Digital Games &amp; Software * Audible Audiobooks * Books * Movies, Music &amp; Games * Electronics &amp; Computers * Home, Garden &amp; Tools * Grocery, Health &amp; Beauty * Toys, Kids &amp; Baby * Clothing, Shoes &amp; Jewelry * Sports &amp; Outdoors * Automotive &amp; Industrial * ›Full Store Directory * Sign in New customer?
Start here.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Your Account * Your Orders * Your Wish List * Your Recommendations * Your Subscribe &amp; Save Items * Manage Your Kindle * Your Cloud Player Play from any browser * Your Cloud Drive 5 GB of free storage * Prime Instant Videos Unlimited streaming of thousands of movies and TV shows * Your Video Library * Your Games &amp; Software Library * Your Android Apps &amp; Devices Your Shopping Cart is empty.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Give it purpose—fill it with books, DVDs, clothes, electronics, and more.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you already have an account, sign in .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There's a problem previewing your cart right now.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Check your Internet connection and go to your cart , or try again .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Cart (0 items) (0 item) (0 items)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Create a Wish List * Find a Wish List or Registry * Wish from Any Website Add items to your List from anywhere * Wedding Registry * Baby Registry * Kids' Birthdays * Friends &amp; Family Gifting Front Cover  | Table of Contents  | First Pages  | Index  | Back Cover  | Surprise Me!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Search Inside This Book: What Other Items Do Customers Buy After Viewing This Item?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Cracking the Coding Interview: 150 Programming Questions and Solutions  by Gayle Laakmann McDowell Paperback 4.8 out of 5 stars  (159 ) $21.98 * Algorithms For Interviews  by Adnan Aziz Paperback 3.7 out of 5 stars  (20 )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Programming Interviews Exposed: Secrets to Landing Your Next Job, 2nd Edition (Programmer to Programmer)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text> by John Mongan Paperback 4.1 out of 5 stars  (74 )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Programming Problems: A Primer for The Technical Interview  by B.
Green Paperback 4.2 out of 5 stars  (10 ) $13.46 › Explore similar items Like 1365878118 false -1 2 2 1 (2) Forums There are no discussions about this product yet.
Be the first to discuss this product with the community.
Start a Discussion Start a new discussion Topic: First post: Receive e-mail when new posts are made Prompts for sign-in   Guidelines Listmania!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>*   A Hackers Bookshelf : A list by grokcode &quot;GrokCode&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>*   Canonical Software Development Texts : A list byGordon Fischer *   Twelve books that helped me become a better programmer : A list byStaffan Nöteberg Create a Listmania! list Search Listmania!
So You'd Like to...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Create a guide Search Guides Look for Similar Items by Category * Books &gt; Computers &amp; Technology &gt; Programming &gt;Algorithms * Books &gt; Computers &amp; Technology &gt; Programming &gt;Software Design, Testing &amp; Engineering &gt; Software Development * Books &gt; Education &amp; Reference Get to Know Us * Careers * Investor Relations * Press Releases * Amazon and Our Planet * Amazon in the Community Make Money with Us * Sell on Amazon * Become an Affiliate * Advertise Your Products * Independently Publish with Us * › See all Let Us Help You * Your Account * Shipping Rates &amp; Policies * Amazon Prime * Returns Are Easy * Manage Your Kindle * Help Brazil Canada China France Germany Italy Japan Spain United Kingdom 6pm Score deals on fashion brands AbeBooks Rare Books &amp; Textbooks AfterSchool.com Kids' Sports, Footwear, Dance &amp; Crafts AmazonFresh Groceries &amp; More Right To Your Door AmazonLocal Great Local Deals in Your City AmazonSupply Business, Industrial &amp; Scientific Supplies AmazonWebServices Scalable Cloud Services Askville Community Answers   Audible Download Audio Books BeautyBar.com Prestige Beauty Delivered Book Depository Books With Free Delivery Worldwide Bookworm.com Books For Children Of All Ages Casa.com Kitchen, Storage &amp; Everything Home CreateSpace Indie Print Publishing Made Easy Diapers.com Everything But The Baby DPReview Digital Photography   Fabric Sewing, Quilting &amp; Knitting IMDb Movies, TV &amp; Celebrities Junglee.com Shop Online in India Kindle Direct Publishing Indie Digital Publishing Made Easy MYHABIT Private Fashion Designer Sales Shopbop Designer Fashion Brands Soap.com Health, Beauty &amp; Home Essentials Vine.com Everything to Live Life Green     Wag.com Everything For Your Pet Warehouse Deals Open-Box Discounts Woot Never Gonna Give You Up Yoyo.com A Happy Place To Shop For Toys Zappos Shoes &amp; Clothing     Conditions of Use Privacy Notice Interest-Based Ads © 1996-2013, Amazon.com, Inc. or its affiliates 56 data structure interview questions answers - freshers, experienced 56 data structure interview questions and answers            * Interview Q&amp;A * Videos * Placement papers * HR interview * CV * Cover letter * GD * Aptitude * Online practice tests * Java tutorial * .NET tutorial * Log In * Student Login * College Login * User Login For Video Interview questions * Data structure interview * Data structure arrays * Data structure test New * Test Java skills New * Test C++ skills New * Download C++/Oracle FAQ * Test your C skills!
* Data structure linked list * Data structure sorting * Data structure stack &amp; queue * Data structure trees *   * C * C++ * Java * Oops * Operating system * Database concepts * Networking * Software engineering * Soft skills * Group discussion * Working from home Data structure interview questions and answers Part 1    Part 2    Part 3    Part 4    Part 5 1.What is a data structure?
What are the types of data structures?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: The scheme of organizing related information is known as ‘data structure’.
The types of data structure are:Lists: A group of similar items with connectivity to the previous or/and next data items.................
Read answer Data structure interview test (50 questions)  - contributed by Sunita Bangal, Professor IIMP (MCA) Data structure interview test (50 questions)  - contributed by Sunita Bangal, Professor IIMP (MCA)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>2.Define a linear and non linear data structure.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Linear data structure: A linear data structure traverses the data elements sequentially, in which only one data element can directly be reached.
Ex: Arrays, Linked Lists...............
Read answer 3.Define in brief an array.
What are the types of array operations?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: An array is a set of homogeneous elements.
Every element is referred by an index.   Arrays are used for storing the data until the application expires in the main memory of the computer system.
So that, the elements can be accessed at any time.
The operations are: Read answer 4.What is a matrix?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Explain its uses with an example Latest answer: A matrix is a representation of certain rows and columns, to persist homogeneous data.
It can also be called as double-dimensioned array.................
Read answer 5.Define an algorithm.
What are the properties of an algorithm?
What are the types of algorithms?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Algorithm: A step by step process to get the solution for a well defined problem..............
Read answer 6.What is an iterative algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: The process of attempting for solving a problem which finds successive approximations for solution, starting from an initial guess.............
Read answer 7.What is an recursive algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Recursive algorithm is a method of simplification that divides the problem into sub-problems of the same nature.
The result of one recursion is the input for the next recursion...............
Read answer 8.What is the Huffman algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: In Huffman Algorithm, a set of nodes assigned with values if fed to the algorithm................
Read answer 9.Explain quick sort and merge sort algorithms.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Quick sort employs the ‘divide and conquer’ concept by dividing the list of elements into two sub elements............
Read answer 9.What is Bubble Sort and Quick sort?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Bubble Sort: The simplest sorting algorithm.
It involves the sorting the list in a repetitive fashion.
It compares two adjacent elements in the list..............
Read answer 10.What is the difference between a stack and a Queue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Stack – Represents the collection of elements in Last In First Out order.  Operations includes testing null stack, finding the top element in the stack, removal of top most element and adding elements on the top of the stack..............
Read answer 11.Can a stack be described as a pointer?
Explain Latest answer: A stack is represented as a pointer.
The reason is that, it has a head pointer which points to the top of the stack..............
Read answer 12.What is the recursion?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Recursion is an approach in which a function calls itself with an argument.
Upon reaching a termination condition, the control returns to the calling function...............
Read answer 13.Is it possible to insert different type of elements in a stack?
How?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Different elements can be inserted into a stack.
This is possible by implementing union / structure data type............
Read answer 14.Explain in brief a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: A linked list is a dynamic data structure.
It consists of a sequence of data elements and a reference to the next record in the sequence.
Stacks, queues, hash tables, linear equations, prefix and post fix operations..................
Read answer 15.Explain the types of linked lists.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: The types of linked lists are:  Singly linked list: It has only head part and corresponding references to the next nodes...............
Read answer 16.How would you sort a linked list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Step 1: Compare the current node in the unsorted list with every element in the rest of the list.
If the current element is more than any other element go to step 2 otherwise go to step 3..............
Read answer 17.What is sequential search?
What is the average number of comparisons in a sequential search?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Sequential search: Searching an element in an array, the search starts from the first element till the last element..............
Read answer 18.What is binary searching and Fibonacci search?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest answer: Binary Search: Binary search is the process of locating an element in a sorted list.
The search starts by dividing the list into two parts...............
Read answer Test your data structure knowledge with our multiple choice questions!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Test your Data structure skills Data Structure (30 questions)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>C++ part 1 (20 questions) C++ part 2 (25 questions) C++ part 3 (25 questions)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structure interview - posted on September 30, 2009 at 15:50 AM by Vidya Sagar 19.
What is a data structure?
What are the types of data structures?
Briefly explain them The scheme of organizing related information is known as ‘data structure’.
The types of data structure are:
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Lists: A group of similar items with connectivity to the previous or/and next data items.
Arrays: A set of homogeneous values Records: A set of fields, where each field consists of data belongs to one data type.
Trees: A data structure where the data is organized in a hierarchical structure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This type of data structure follows the sorted order of insertion, deletion and modification of data items.
Tables: Data is persisted in the form of rows and columns.
These are similar to records, where the result or manipulation of data is reflected for the whole table.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>20. Define a linear and non linear data structure.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Linear data structure: A linear data structure traverses the data elements sequentially, in which only one data element can directly be reached.
Ex: Arrays, Linked Lists Non-Linear data structure: Every data item is attached to several other data items in a way that is specific for reflecting relationships.
The data items are not arranged in a sequential structure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Ex: Trees, Graphs 21.
Define in brief an array.
What are the types of array operations?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An array is a set of homogeneous elements.
Every element is referred by an index.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Arrays are used for storing the data until the application expires in the main memory of the computer system.
So that, the elements can be accessed at any time.
The operations are:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Adding elements - Sorting elements - Searching elements - Re-arranging the elements - Performing matrix operations - Pre-fix and post-fix operations 22.
What is a matrix?
Explain its uses with an example A matrix is a representation of certain rows and columns, to persist homogeneous data.
It can also be called as double-dimensioned array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- To represent class hierarchy using Boolean square matrix - For data encryption and decryption - To represent traffic flow and plumbing in a network - To implement graph theory of node representation 23.
Define an algorithm.
What are the properties of an algorithm?
What are the types of algorithms?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithm: A step by step process to get the solution for a well defined problem.
Properties of an algorithm:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Should be written in simple English - Should be unambiguous, precise and lucid - Should provide the correct solutions - Should have an end point - The output statements should follow input, process instructions - The initial statements should be of input statements - Should have finite number of steps - Every statement should be definitive Types of algorithms:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Simple recursive algorithms.
Ex: Searching an element in a list – Backtracking algorithms Ex: Depth-first recursive search in a tree – Divide and conquer algorithms.
Ex: Quick sort and merge sort – Dynamic programming algorithms.
Ex: Generation of Fibonacci series – Greedy algorithms Ex: Counting currency – Branch and bound algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Ex: Travelling salesman (visiting each city once and minimize the total distance travelled) – Brute force algorithms.
Ex: Finding the best path for a travelling salesman – Randomized algorithms.
Ex.
Using a random number to choose a pivot in quick sort).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>24. What is an iterative algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The process of attempting for solving a problem which finds successive approximations for solution, starting from an initial guess.
The result of repeated calculations is a sequence of approximate values for the quantities of interest.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>25. What is an recursive algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Recursive algorithm is a method of simplification that divides the problem into sub-problems of the same nature.
The result of one recursion is the input for the next recursion.
The repletion is in the self-similar fashion.
The algorithm calls itself with smaller input values and obtains the results by simply performing the operations on these smaller values.
Generation of factorial, Fibonacci number series are the examples of recursive algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>26. Explain quick sort and merge sort algorithms.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Quick sort employs the ‘divide and conquer’ concept by dividing the list of elements into two sub elements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The process is as follows:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1. Select an element, pivot, from the list.
2. Rearrange the elements in the list, so that all elements those are less than the pivot are arranged before the pivot and all elements those are greater than the pivot are arranged after the pivot.
Now the pivot is in its position.
3. Sort the both sub lists – sub list of the elements which are less than the pivot and the list of elements which are more than the pivot recursively.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Merge Sort: A comparison based sorting algorithm.
The input order is preserved in the sorted output.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Merge Sort algorithm is as follows:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1. The length of the list is 0 or 1, and then it is considered as sorted.
2. Other wise, divide the unsorted list into 2 lists each about half the size.
3. Sort each sub list recursively.
Implement the step 2 until the two sub lists are sorted.
4. As a final step, combine (merge) both the lists back into one sorted list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>27. What is Bubble Sort and Quick sort?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Bubble Sort: The simplest sorting algorithm.
It involves the sorting the list in a repetitive fashion.
It compares two adjacent elements in the list, and swaps them if they are not in the designated order.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It continues until there are no swaps needed.
This is the signal for the list that is sorted.
It is also called as comparison sort as it uses comparisons.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Quick Sort: The best sorting algorithm which implements the ‘divide and conquer’ concept.
It first divides the list into two parts by picking an element a ’pivot’.
It then arranges the elements those are smaller than pivot into one sub list and the elements those are greater than pivot into one sub list by keeping the pivot in its original place.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>28. What are the difference between a stack and a Queue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Stack – Represents the collection of elements in Last In First Out order.
Operations includes testing null stack, finding the top element in the stack, removal of top most element and adding elements on the top of the stack.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Queue - Represents the collection of elements in First In First Out order.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Operations include testing null queue, finding the next element, removal of elements and inserting the elements from the queue.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Insertion of elements is at the end of the queue Deletion of elements is from the beginning of the queue.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>29. Can a stack be described as a pointer?
Explain.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A stack is represented as a pointer.
The reason is that, it has a head pointer which points to the top of the stack.
The stack operations are performed using the head pointer.
Hence, the stack can be described as a pointer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>30. Explain the terms Base case, Recursive case, Binding Time, Run-Time Stack and Tail Recursion.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Base case: A case in recursion, in which the answer is known when the termination for a recursive condition is to unwind back.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Recursive Case: A case which returns to the answer which is closer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run-time Stack: A run time stack used for saving the frame stack of a function when every recursion or every call occurs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Tail Recursion: It is a situation where a single recursive call is consisted by a function, and it is the final statement to be executed.
It can be replaced by iteration.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>31. Is it possible to insert different type of elements in a stack?
How?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Different elements can be inserted into a stack.
This is possible by implementing union / structure data type.
It is efficient to use union rather than structure, as only one item’s memory is used at a time.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>32. Explain in brief a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A linked list is a dynamic data structure.
It consists of a sequence of data elements and a reference to the next record in the sequence.
Stacks, queues, hash tables, linear equations, prefix and post fix operations.
The order of linked items is different that of arrays.
The insertion or deletion operations are constant in number.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>33. Explain the types of linked lists.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The types of linked lists are:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Singly linked list: It has only head part and corresponding references to the next nodes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Doubly linked list: A linked list which both head and tail parts, thus allowing the traversal in bi-directional fashion.
Except the first node, the head node refers to the previous node.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Circular linked list: A linked list whose last node has reference to the first node.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>34. How would you sort a linked list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Step 1: Compare the current node in the unsorted list with every element in the rest of the list.
If the current element is more than any other element go to step 2 otherwise go to step 3.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Step 2: Position the element with higher value after the position of the current element.
Compare the next element.
Go to step1 if an element exists, else stop the process.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Step 3: If the list is already in sorted order, insert the current node at the end of the list.
Compare the next element, if any and go to step 1 or quit.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>35. What is sequential search?
What is the average number of comparisons in a sequential search?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sequential search: Searching an element in an array, the search starts from the first element till the last element.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The average number of comparisons in a sequential search is (N+1)/2 where N is the size of the array.
If the element is in the 1st position, the number of comparisons will be 1 and if the element is in the last position, the number of comparisons will be N.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>36. What are binary search and Fibonacci search?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Binary Search: Binary search is the process of locating an element in a sorted list.
The search starts by dividing the list into two parts.
The algorithm compares the median value.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the search element is less than the median value, the top list only will be searched, after finding the middle element of that list.
The process continues until the element is found or the search in the top list is completed.
The same process is continued for the bottom list, until the element is found or the search in the bottom list is completed.
If an element is found that must be the median value.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Fibonacci Search: Fibonacci search is a process of searching a sorted array by utilizing divide and conquer algorithm.
Fibonacci search examines locations whose addresses have lower dispersion.
When the search element has non-uniform access memory storage, the Fibonacci search algorithm reduces the average time needed for accessing a storage location.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write your comment - Share Knowledge and Experience Discussion Board tanx thanks thanks.. lot of thanks...... it very usefull madhi 04-13-2013 01:40 AM DS Elements of stack are, 1)ordered 2)Unordered 3)sequential kavita 10-22-2012 01:18 AM Data structure interview questions All the questions are good enough to provide an interview insight.
We can have more advanced questions Data structure interview 10-18-2012 05:18 AM thanks careerride is so useful to students and freshers ashwini 06-27-2012 06:26 AM thanks careerride is so useful to students and freshers ashwini 06-27-2012 06:26 AM thanks careerride is so useful to students and freshers ashwini 06-27-2012 06:26 AM       Latest placement tests Latest links     Home | Want a Job?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Submit Key Skills | Employer login | My key skills | About us | Sitemap | Contact us Copyright © 2008 - 2010 CareerRide.com.
All rights reserved.
Terms of use  |  Follow us on Facebook!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Bookmark to:                 Placement practice test: Java | SAP | .NET | Oracle | Sql Server | QA | Aptitude | Networking | All Skills Algorithms and Data Structure Interview Preparation GuideJoel * Home * Software Development * Resume * Contact * Algorithms and Data Structure Interview Preparation Guide Apr 4, 2012 by Joel     No Comments     Posted under: Software Development This article is part of a series I’ve written on senior .net developer interviews.  
The goal of the series is not to provide a list of interview questions that you might be asked, but to provide a list of questions that ensures that you have a comprehensive understanding of .net and software development.  
To read the complete guide, visit Interview Preparation for Senior Software Developers .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Steve Yegge already wrote an excellent article on what you need to know in terms of algorithms and datastructures (Get that job at Google ) so this post will cover some additional thoughts and how to get the knowledge that Steve is talking about.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Contents * 1 Types of Interviews and Generalizations * 2 How to prepare for algorithms and data structure questions * 2.1 1.
Determine what you don’t know * 2.2 2.
Learn the stuff you don’t know * 2.3 3.
Practice under similar conditions * 3 Thoughts on Questions with a Trick Types of Interviews and Generalizations First, software interviews can be divided into two types : technology focused interviews and interviews focused on software fundamentals.  
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By technology focused interviews, I’m talking about interviews where a question will be based on a vendor’s product such as SQL Server.  
For software fundamental interviews, I’m talking about interviews where questions are more vendor neutral (so databases in general rather than SQL Server).  
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you are going to a technology focused interview, it is quite possible you won’t be asked any questions on algorithms or data structures (which in my opinion is a bad sign of what your co-worker’s abilities might be).
Assuming you will be asked these questions, here are some thoughts about companies that preform each of these types of interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Software Fundamentals Interviews Technology Focused Interviews Google, Amazon, Altera, Yahoo, Apple, Microsoft Typically consulting companies or companies that need to gain expertise in a new area Are more concerned with how intelligent/trainable someone is rather than how many technologies they know.
They are interested in developing employees in relevant areas if the potential is good.
Expect high productivity early on from new employees Senior developers and leads are very knowledgeable May not have experienced leads – hiring may be based on technology buzz words and HR processes rather than software engineering concepts People that work for these companies generally hold co-workers in high regard Co-workers may have less respect for each other These companies generally offer hire salaries and are more competitive about getting good employees (in my experience) May offer a very high salary if technology is niche.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Otherwise, expect salary to be a bit lower.
Not necessarily looking to fill a technology niche that you can be a leader in Often offers more leadership opportunities, especially if niche technology (since there may not be strong senior developers) Job postings mention fundamental concepts like OOP or design patterns and not specific technologies.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The postings may also request experience in one of several languages rather than C# or java specifically Job postings mention years of experience with a specific technology.
Will generally list things like:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Entity Framework (rather than experience with object relational mapping) SQL Server (rather than databases)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For senior positions, questions will start with fundamentals but seniority will be based on answers to open ended design questions (and resume experience) For senior positions, determining seniority the interviewer will probably expect you to know a specific detail about the technology.
The problem with this is that at the senior level, there are many specific questions about the technology and with this type of questioning, the interviewer is trying to find holes (based on his own understanding) rather than your strengths.
Since interview time is limited, occasionally an interviewer will throw in a tough algorithm problem (often involving a trick) and base evaluate your understanding of algorithms based on that.   Note that the points above are just my general observations and do not always hold true.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I’ve had technology specific interviews for consulting companies that definitely contain all the desirable attributes from the software fundamentals section above.
Currently, my preference is for software fundamentals interviews since I find technology focused interviews tend to be all over the place.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are usually a couple questions covering a huge number of technologies and your entire understanding of that technology is based on just one or two questions.
In this situation, it is very easy to have a false negatives and false positives since questions are not comprehensive.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  How to prepare for algorithms and data structure questions So, assuming you are going to get questions on algorithms and data structures, how do you get that knowledge?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1. Determine what you don’t know Read Get that job at Google and see what you don’t know 2.
Learn the stuff you don’t know Get a solid foundation in algorithms and data structures – If you don’t know a lot about algorithms (this was my issue since I didn’t study a lot of computer science in university) or need a brush up, check out the two books below.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>My key criteria for recommending these books is that they are easy to read cover to cover compared to other algorithms books.
The best technique for interviewing is to make a list of all the key algorithms (Algorithms (Sedgewick, Wayne)) and then beside each one, describe how to solve it in just a few sentences.
It doesn’t need to be in detail; just enough so that you know how to start solving the problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Algorithms (Sedgewick, Wayne) -I like head first type books that I can read quickly and remember easily without falling asleep.
I think this is as close as an algorithms book gets being similar to the heads first series in that the explanations are easy to understand and not too dry.
Here are my favourite things about this book.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Relatively clear description on big o notation and calculating complexity * Light read, not scary compared to other algorithm text books, not too much math * Offers simple readable code for all data structures * Does a fantastic job of providing clear descriptions of optimizations for each algorithm.
This really allows you to shine in interviews because you can show off with something that might be new even to the interviewer * Algorithms organized by problem rather than method (for example, there are chapters on graphs, string matching, searching, sorting, etc but no chapters on greedy algorithms, dynamic programming, etc).
Some people may not like this so if you are looking for something that is also pretty easy to read but organized by problem solving approach, I suggest Algorithms (Dasgupta, Papadimitriou, Vazerani) - I did not read this book cover to cover like the one above.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>However, I do use it from time to time as a reference and it is a solid follow up to the Sedgewick, Wayne algorithms book.  It contains more details on algorithm approach than then one above, however, it is not quite as fun to read.   3.
Practice under similar conditions Join TopCoder and do some practice problems and do at least 5 single round marathon (SRM) competitions – You don’t need a super high rank (even division 2 is fine) but you need to be able to effective approach problems.
The things you can expect to be comfortable with after doing about 5 SRMs and reading the editorials after the matches are:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Analizing complexity – you will be surprised how often a brute force solution is enough based on inputs.
This will cause you to ask input constrain questions during the interview which shows that not only can you solve problems in multiple ways, but that you know when to use each approach. * How to categorize types of problems – Is it greedy, or dynamic programming * You will be decent at dynamic programming – Interviewers love DP questions because they can be very tricky (I don’t mean just using memoization for fibinocci).
You will need to correctly identify which states need to be remembered and in cases where there are many candidate states, this is very tricky * In the end, you will approach your interview algorithm problems with confidence.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Just doing practice problems by hand before the interview is not the same since it is so easy to just look up the answer and say “oh yeah, I’m pretty close.
I would totally get that next time&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>SRMs force you to wait a couple days for the answer after the match which really helps learn the methodology Thoughts on Questions with a Trick A trick question is one where you need to have a moment of inspiration to solve the algorithm.
For example, given a sorted array of numbers, determine if there are two that add to 30.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you have not seen the problem before, you might ho and hmm until it clicks.
Have a pointer on each end of the list.
Add the two numbers together.
If the result is greater than 30, move the pointer on the right on position left.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the result is less than 30, move the pointer on the left one to the right.
This O(n) solution does not determine if the candidate knows anything about alogrithms.
It just shows that either the candidate got a moment of clarity at the right time, or has seen the problem before.
In my experience with interviews at tech giants Amazon and Google, I did not receive any trick questions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Trick questions give a lot of false negatives and as far as I’ve seen, mature companies have decided to stop using them.
If you do get asked a trick question and don’t get the answer, don’t feel bad.
Perhaps the company asking it needs to update their hiring policy :)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Tags: personal development Got anything to say?
Go ahead and leave a comment!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Click here to cancel reply.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Mail (will not be published) (required)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Website Comment Related (Personal Development)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Interview Questions for Software Developers * Algorithms and Data Structure Interview Preparation Guide * .Net Interview Questions 3: Framework Core * .Net Interview Questions 5: Management &amp; Leadership * .Net Interview Questions 6: Databases * .Net Interview Questions 7: WPF * .Net Interview Questions 4: Multithreading * New Years Resolutions 2012!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Self Improvement – 12 Week Plan for Coding Speed * 5 Second Book Reviews: Design Patterns, Head First Series, OOA&amp;D, Software Dev, PMP, etc Popular Posts * MVVM vs MVP vs MVC: The differences explained * Burn Down Chart Tutorial: Simple Agile Task Tracking * Algorithms and Data Structure Interview Preparation Guide * .Net Interview Questions 7: WPF * Interview Questions for Software Developers * Solving Traveling Salesman with Ant Colony Optimization in JavaScript * MVVM vs MVP vs MVC: The concise explanation * .Net Interview Questions 4: Multithreading * .Net Interview Questions 3: Framework Core * Explanation of the stack, the heap, and recursion leading to stack overflow * 3 Rules of SDK Design * Garbage Collection FAQ About I am a Toronto based software engineer currently working for Amazon.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>More | Subscribe (RSS) Favourite Links * Best way to find bugs in your code * Don't call yourself a programmer * Google Finance * Our Signal * Programmer Competency Matrix * Stack Overflow * Stock Options Manager * Wikipedia Just go to Theme Options Page and edit copyright textTheme brought to you by Site5.com | Experts in Web Hosting.
1- Data Structures Interview Questions Technical Interview Home Added Recently Data Structures Puzzles Google &amp; Microsoft C/C++ Questions Java Interview Questions Quantitative Problems Algorithms Featured Articles Amazon Interview Question Compaq Interview Question Technical Interview Interview Process Introduction Questions Object Oriented Google Pages Fundamental Questions Resume Tips Links Contact Us Submit Question/Answer Please enable JavaScript to view this page content properly.
Data Structures Questions and Answers for Technical Interviews Please enable JavaScript to view this page content properly.   * Data Structures Interview Question: Classify the Hashing Functions based on the various methods by ...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures Interview Question: What are the major data structures used in the following areas :RDBMS ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures Interview Question: Trees: :What is almost complete binary tree?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Algorithms Interview Question: Given two numbers m and n, write a method to return the first number r that isdivisible by both ....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tree Interview Question: How would you check if a binary tree is balanced ?
Write a C/C++ program * Tree Interview Question: Write a C program to delete a tree (i.e, free up its nodes)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tree Interview Question: Write a C program to determine the number of elements (or size) in a tree.  * Tree Interview Question: Write a C program to find the depth or height of a tree .
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How to create a copy of a linked list ?
Write a C program to create a copy of a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How to compare two linked lists ?
Write a C program to compare two linked lists.  * C/C++ Data Structures Interview Question:If you are using C language to implement theheterogeneous linked list , what pointer type will you use?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How would you detect a loop in a linked list?
Write a C program to detect a loop in a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures Interview Question:How do you find the middle of a linked list?
Write a C program to return the middle of a linked list * C/C++ Data Structures Interview Question:How do you reverse a linked list without using any C pointers?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data StructuresInterview Question:How to declare a structure of a linked list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures: Generic Linked List : Write a C program to implement a Generic Linked List....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures: Breadth First Search : Write code for doing a breadth first search in a Tree data structure...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures: Implement a Queue using an Array .
Make efficient use of the space in the array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List: Loop/Cycle Detection: Given the head pointer to a singly linked list with a loop or cycle in it...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List: Merged List Problem: There are 2 singly linked lists (list1 and list2)...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List:Find the middle element: Given a singly linked list, find the node in the middle...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Linked List:  Find n-th element from the tail : Given a singly linked list find the n-th node from the back...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C/C++ Data Structures: What are the advantages and disadvantages of B-star trees over Binary trees...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Next Page   * C/C++ Data Structures:Sort a linked list * C/C++ Data Structures:Reverse a string * C/C++ Data Structures:Insert a node in a sorted linked list * C Data Structures:Doubly Linked List :How do you reverse a doubly linked list?....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C Data Structures:Singly Linked List :How do you reverse a singly linked list?....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Java Data Structures: Teddy Bears Puzzle : the game starts when I give you some bears.
You can then give back some bears...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Java Data Structures: binary search of the array :  Implement the body of the following function using a binary search of the array...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* JAVA Data Structures: spanning Tree : What is a spanning Tree?Does the minimum spanning tree of a graph give...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* JAVA Data Structures: JAVA: Suppose that I have the following declarations...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* JAVA Data Structures: JAVA: What are the steps to inserting a new item at the head..
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Google: arrangement of blocks : You are given N blocks of height 1â€¦N.
In how many ways can you arrange these blocks...There are four people who want to cross a bridge; they all begin on the same side.
You have 17 minutes to get them all across to the other side.
It is night, and they have one flashlight.
A maximum of two people can cross the bridge at one time.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any party that crosses, either one or two people, must have the flashlight with them.
The flashlight must be walked back and forth; it cannot be thrown, for example.
Person 1 takes 1 minute to cross the bridge, person 2 takes 2 minutes, person 3 takes 5 minutes, and person 4 takes 10 minutes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A pair must walk together at the rate of the slower personâ€™s pace.
For example, if person 1 and person 4 walk across first, 10 minutes have elapsed when they get to the other side of the bridge.
If person 4 returns the flashlight, a total of 20 minutes have passed and you have failed the mission.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Solution What pointer type is used to implement the heterogeneous linked list in C?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Solution   What is the minimum number of queues needed to implement the priority queue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  Solution    Which data structure is used to perform recursion?  Solution What are some of the applications for the tree data structure?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Solution   Please enable JavaScript to view this page content properly.
Technical-Interview.com Â© 2006 - 2011 Technical-Interview.com .
All rights reserved Programming Interview: Data Structures Algorithm: Searching Element in a Binary Search Tree - YouTube IN Sign in Upload Search Guide new * * Popular on YouTube * Music * Sports * Gaming * Movies * TV Shows * No channels found * Loading subscriptions * Channels for you * indiatimes * starcount * No channels found * Loading subscriptions Browse channels Sign in to add channels to your guide and for great recommendations!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sign in › Programming Interview: Data Structures Algorithm: Searching Element in a Binary Search Tree saurabhschool ·168 videos SubscribeSubscribedUnsubscribe 3,833 2,233 12     0 Like Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to likesaurabhschool's video. * * * * * Sign in Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to dislikesaurabhschool's video. * * * * * Sign in About Share Add to Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to addsaurabhschool's video to your playlist. * * * * * Sign in Published onMay 17, 2012 This video lecture is produced by IITian S.Saurabh.
He is B.tech from IIT and MS from USA.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write C code to search an element in a Binary Search Tree?
What is a Binary search Tree?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This channel is an ultimate guide to prepare for job interviews for software engineers, software test engineers, computer scientists, engineering students specially computer science and IT engineers, Master of computer application (MCA) and Bachelor of Computer Application (BCA) students.
The content of this channel will help students prepare for C,C++, Java, data structures and algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It also covers courses related to networking and database.
This channel can be used by students of NIIT, IGNOU etc too.
How do we search element in binary search tree?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Category Education * License Standard YouTube License Show more Show less Loading...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sign in Sign up Ratings have been disabled for this video.
Rating is available when the video has been rented.
This feature is not available right now.
Please try again later.
Uploader Comments (saurabhschool )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* * Remove * Report profile image * Flag for spam * Block User * Unblock User rkapade 7 months ago Hello Saurabh, You have not explained what happens if node is not found﻿ in BST.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Need one condition in Search function Node, i.e. if(node == NULL) return false; Otherwise program will crash !
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply · 3 Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to raterkapade's comment. * * * * * Sign in Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to raterkapade's comment. * * * * * Sign in in playlistProgramming Interviews Questions * * Remove * Report profile image * Flag for spam * Block User * Unblock User saurabhschool 7 months ago Hi rkapade, thanks , yes I think you are correct, I should check if(node == NULL) to handle if a node is not found, thanks once again﻿ Reply · Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratesaurabhschool's comment. * * * * * Sign in Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratesaurabhschool's comment. * * * * * Sign in in reply torkapade (Show the comment) Video Responses This video is a response to Lecture - 6 Trees All Comments (6)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sign in now to post a comment! * * Remove * Report profile image * Flag for spam * Block User * Unblock User magicboy124 2 months ago ARE ﻿ u kidding ..
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply · Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratemagicboy124's comment. * * * * * Sign in Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratemagicboy124's comment. * * * * * Sign in * * Remove * Report profile image * Flag for spam * Block User * Unblock User rsureshpec 4 months ago thanks﻿ Reply · Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratersureshpec's comment. * * * * * Sign in Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratersureshpec's comment. * * * * * Sign in in reply tosaurabhschool (Show the comment) * * Remove * Report profile image * Flag for spam * Block User * Unblock User rsureshpec 4 months ago thanks ﻿ Reply · Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratersureshpec's comment. * * * * * Sign in Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to ratersureshpec's comment. * * * * * Sign in in reply torkapade (Show the comment)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* * Remove * Report profile image * Flag for spam * Block User * Unblock User yourstruelymyself 10 months ago your way of explaining concepts along with code﻿ is really good , i like it Reply · Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to rateyourstruelymyself's comment. * * * * * Sign in Sign in to YouTube Sign in with your YouTube Account (YouTube, Google+, Gmail, Orkut, Picasa, or Chrome) to rateyourstruelymyself's comment. * * * * * Sign in * Loading comment...
Loading...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Advertisement * 6:53 what is heap and stack java interview question and answerby InterviewDot JobFeatured 2,709 * 12:54 Programming Interview: Data Structures Algorithm: Maximum Depth of Binary Search Treeby saurabhschool 3,102 views * 1:02:30 Intro to Trees and Data Structureby ignousocis 3,541 views * 11:17 Programming Interviews: Data Structures Algorithm:Binary search Tree: isBST (Is a binary tree BST)by saurabhschool 3,096 views * 13:59 Programming Interview:Data Structures Algorithm: Insertion in Binary Search Treeby saurabhschool 5,230 views * 12:26 Programming Interviews: Delete all the nodes of a binary search tree (BST)by saurabhschool 3,053 views * 11:20 Programming Interview: Lowest Common Ancestor Binary Treeby saurabhschool 3,974 views * 7:54 Programming Interview: Data Structures Algorithm: Minimum Value of Binary Search Treeby saurabhschool 3,061 views * 7:37 Introduction to Binary Search Tree in Data structure, Binary Search Tree Examples, BST Algorithmby Splendidvision 1,114 views * 5:48 Programming Interview 1: Reverse a Linked Listby ProgrammingInterview 9,829 views * 10:29 Binary Search Analysis using Comparison Tree - Part 1by Sesh Venugopal 568 views * 16:25 Programming Interview: Longest Common Subsequence Dynamic Programming bysaurabhschool 6,035 views * 12:08 Programming Interviews: Depth First Search (DFS): Graph Theoryby saurabhschool 2,544 views * 16:27 Stack vs Heapby Erica Cooksey 10,851 views * 7:25 Data Structure Tutorial #15 - Red Black Treeby Mangesh Solunke 388 views * 1:00:51 An Introduction To Trees &amp; Data Structureby ignousocis 39,260 views * 12:57 Programming Interview: Cutting a Rod (Dynamic Programming)by saurabhschool 3,976 views * 17:51 Insertion in binary search tree-Javaby Suraj Motee 2,850 views * 9:39 Programming Interview: Select the kth smallest element from an arrayby saurabhschool 3,136 views * 15:41 Programming Interviews: Diameter of Binary Treeby saurabhschool 2,873 views * Loading more suggestions...
Load more suggestions * Language: English * Country: India * Safety: Off Help Loading...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* About * Press &amp; Blogs * Copyright * Creators &amp; Partners * Advertising * Developers * Terms * Privacy * Safety * Send feedback * Try something new! * Loading...
Working...
Sign in to add this to Watch Later Sign in to add this to Watch Later Added to Private videos will be skipped if viewers don't have access, but playlist notes are publicly visible.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Back to list Added to playlist: Private videos will be skipped if viewers don't have access, but playlist notes are publicly visible.
Add an optional note150 Add note Saving note...
Note added to: Error adding note: Click to add a new note Sample Interview Questions Sample Interview Questions Interview Questions This page lists some common interview questions for software engineers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Questions Click on the question to see its answer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Useful tips * Introduction * The Basic Rules * Don't assume all data is given to you.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Good programming practice.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Check all boundary conditions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Work Things Into Your Conversations * Typical Technical Questions * Conclusion Logic questions * Given a rectangular (cuboidal for the puritans) cake with a rectangular piece removed (any size or orientation), how would you cut the remainder of the cake into two equal halves with one straight cut of a knife ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You're given an array containing both positive and negative integers and required to find the subarray with the largest sum (O(N) a la KBL).
Write a routine in C for the above. * Given an array of size N in which every number is between 1 and N, determine if there are any duplicates in it.
You are allowed to destroy the array if you like. * Given an array of characters which form a sentence of words, give an efficient algorithm to reverse the order of the words (not characters) in it.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How many points are there on the globe where by walking one mile south, one mile east and one mile north you reach the place where you started.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In a X's and 0's game (i.e. TIC TAC TOE) if you write a program for this give a fast way to generate the moves by the computer.
I mean this should be the fastest way possible. * A version of the &quot;There are three persons X Y Z, one of which always lies&quot;..
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* There are 3 ants at 3 corners of a triangle, they randomly start moving towards another corner.. what is the probability that they don't collide.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* If you are on a boat and you throw out a suitcase, Will the level of water increase. * There are 4 men who want to cross a bridge.
They all begin on the same side.
You have 17 minutes to get all of them across to the other side.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is night.
There is one flashlight.
A maximum of two people can cross at one time.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any party who crosses, either 1 or 2 people, must have the flashlight with them.
The flashlight must be walked back and forth, it cannot be thrown, etc.
Each man walks at a different speed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A pair must walk together at the rate of the slower mans pace.
Man 1:1 minute to cross Man 2: 2 minutes to cross Man 3: 5 minutes to cross Man 4: 10 minutes to cross * You have 5 jars of pills.
Each pill weighs 10 gram, except for contaminated pills contained in one jar, where each pill weighs 9 gm. Given a scale, how could you tell which jar had the contaminated pills in just one measurement?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* One train leaves Los Angeles at 15 MPH heading for New York.
Another train leaves from New York at 20mph heading for Los Angeles on the same track.
If a bird, flying at 25mph, leaves from Los Angeles at the same time as the train and flies back and forth between the two trains until they collide, how far will the bird have traveled?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Imagine that you have 26 constants, labelled A through Z.
Each constant is assigned a value in the following way: A = 1; the rest of the values equal their position in the alphabet (B corresponds to the second position so it equals 2, C = 3, etc.) raised to the power of the preceeding constant value.
So, B = 2 &lt;s&gt; (A's value), or B = 2&lt;s&gt;1 = 2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>C = 3&lt;s&gt;2 = 9.
D = 4&lt;s&gt;9, etc., etc.
Find the exact numerical value to the following equation:(X - A) * (X - B) * (X - C) * ... * (X - Y) * (X - Z)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You have 12 balls.
All of them are identical except one, which is either heavier or lighter than the rest - it is either hollow while the rest are solid, or solid while the rest are hollow.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You have a simple two-armed scale, and are permitted three weighings.
Can you identify the odd ball, and determine whether it is hollow or solid.
Programming questions that require thinking * Write a routine to draw a circle (x ** 2 + y ** 2 = r ** 2) without making use of any floating point computations at all.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given only putchar (no sprintf, itoa, etc.) write a routine putlong that prints out an unsigned long in decimal.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give a one-line C expression to test whether a number is a power of 2. [No loops allowed - it's a simple test.] * Give a very good method to count the number of ones in a 32 bit number.
(caution: looping through testing each bit is not a solution).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the different ways to say, the value of x can be either a 0 or a 1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* I was given two lines of assembly code which found the absolute value of a number stored in two's complement form.
I had to recognize what the code was doing.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give a fast way to multiply a number by 7.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write an efficient algo and C code to shuffle a pack of cards.. this one was a feedback process until we came up with one with no extra storage. * A real life problem - A square picture is cut into 16 sqaures and they are shuffled.
Write a program to rearrange the 16 squares to get the original big square. * Consider the base -2 representation of numbers.
(-2 instead of usual +2).
Give the condition for a number represented in this form to be positive?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Also, if P(A, B) is a function that takes two 0-1 strings A,B in this representation, when can we say that P(A,B) returns the sum of these two numbers?
* Given an expression tree with no parentheses in it, write the program to give equivalent infix expression with parentheses inserted where necessary. * Given a maze with cheese at one place and a mouse at some entrance, write a program to direct the mouse to cheese correctly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(Assume there is a path).
Following primitives are given: moveforward, turnright, turnleft, iswall?, ischeese?, eatcheese. * Give me an algorithm and C code to find the subarray with the largest sum given an array containing both positive and negative integers.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function that returns the factorial of a number.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function that computes the nth number in the Fibonacci sequence.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write an implementation of strlen().
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Switch the integer values stored in two registers without using any additional memory. * Given two strings S1 and S2.
Delete from S2 all those characters which occur in S1 also and finally create a clean S2 with the relevant characters deleted. * Write a small lexical analyzer - interviewer gave tokens. expressions like &quot;a*b&quot; etc. * Write a routine that prints out a 2-D array in spiral order! * How is the readers-writers problem solved? - using semaphores/ada .. etc. * Write code for reversing a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write, efficient code for extracting unique elements from a sorted list of array. e.g. (1, 1, 3, 3, 3, 5, 5, 5, 9, 9, 9, 9) -&gt; (1, 3, 5, 9).
Microsoft question * Given a rectangular (cuboidal for the puritans) cake with a rectangular piece removed (any size or orientation), how would you cut the remainder of the cake into two equal halves with one straight cut of a knife ? * You're given an array containing both positive and negative integers and required to find the subarray with the largest sum (O(N) a la KBL).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a routine in C for the above. * Given an array of size N in which every number is between 1 and N, determine if there are any duplicates in it.
You are allowed to destroy the array if you like.
[I ended up giving about 4 or 5 different solutions for this, each supposedly better than the others ]. * Write a routine to draw a circle (x ** 2 + y ** 2 = r ** 2) without making use of any floating point computations at all. [ This one had me stuck for quite some time and I first gave a solution that did have floating point computations ]. * Given only putchar (no sprintf, itoa, etc.) write a routine putlong that prints out an unsigned long in decimal. [ I gave the obvious solution of taking % 10 and / 10, which gives us the decimal value in reverse order.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This requires an array since we need to print it out in the correct order.
The interviewer wasn't too pleased and asked me to give a solution which didn't need the array ]. * Give a one-line C expression to test whether a number is a power of 2.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[No loops allowed - it's a simple test.] * Given an array of characters which form a sentence of words, give an efficient algorithm to reverse the order of the words (not characters) in it. * How many points are there on the globe where by walking one mile south, one mile east and one mile north you reach the place where you started. * Give a very good method to count the number of ones in a 32 bit number.
(caution: looping through testing each bit is not a solution). * What are the different ways to say, the value of x can be either a 0 or a 1.
Apparently the if then else solution has a jump when written out in assembly. if (x == 0) y=0 else y =x * (a-1) xor a == 0 - What does this do?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How can you print singly linked list in reverse order?
(it's a huge list and you cant use recursion) * How can you find out if there is a loop in a very long list? * A character set has 1 and 2 byte characters.
One byte characters have 0 as the first bit.
You just keep accumulating the characters in a buffer.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Suppose at some point the user types a backspace, how can you remove the character efficiently.
( Note: You cant store the last character typed because the user can type in arbitrarily many backspaces) * How would you reverse the bits of a number with log N arithmetic operations, where N is the number of bits in the integer (eg 32,64..) * Whats the simples way to check if the sum of two unsigned integers has resulted in an overflow. * Induction on i:1..n: Maintain the subarray with largest sum and suffix with largest sum and then update both after adding the i+1th element... * Sum of the numbers or copy i into A[i] so on till conflict. * Update deltaY while incrementing x.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Have to multiply so that the deltay is not a floating pt number. * Find the largest 10**n less than given number, then div etc. * Infinite. * Shivku said this question is garbled thru ages. * reverse the pointers till you reach the end and print-and-reverse as you return. * Have two 'threads' one at twice the speed of the other traversing the list and see if at anytime they meet. * Scan the bytes backward till you reach one with the first bit set to 0.
Now this is either a one byte character or the second byte of a two byte one.
Either way it marks a Character boundary.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Start from there an scan forward to find what the last character is. * Flip adjacent bits, then flip adjacent 2 bit sets, then 4-bits and so on.
Each of this swap can be done in constant time using appropriate masks and shifts. * if (a+b) &lt; a or (a+b) &lt; b then overflow has occurred Data structures and algorithms questions * Write a function and the node data structure to visit all of the nodes in a binary tree. * You know what a queue is ....
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Implement a queue class with Java.
What is the cost of enqueue and dequeue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Can you improve this?
What if the queue is full (I was using an looping array)?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What kind of mechanism would you use to increase its size? * Give an algorithm that calculates the distance between two text strings (only operations you can have are: delete, add, and change, one by one). * Given the definition of a sequence (5 4 7 6 is, but 1 2 4 5 is not), write an algorithm to check if an arbitrary array is a sequence or not.
Once I figured out a solution, I was asked to do a space and time complexity analysis. * Describe a situation where concurrent access would lead to inconsistency in your application.
How would you solve this problem?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You are given a list of n numbers from 1 to n-1, with one of the numbers repeated.
Devise a method to determine which number is repeated.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write an algorithm to detect loop in a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given the time, devise an algorithm to calculate the angle between the hour and minute hands of an analog clock.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Devise an algorithm for detecting whether a given string is a palindrome (spelled the same way forwards and backwards).
For example, &quot;A man, a plan, a canal, Panama.&quot;
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an eight-bit bitmap graphics file, devise an algorithm to convert the file into a two-bit ASCII approximation. * Reverse a linked list. * Insert in a sorted list * First some definitions for this problem: a) An ASCII character is one byte long and the most significant bit in the byte is always '0'. b) A Kanji character is two bytes long.
The only characteristic of a Kanji character is that in its first byte the most significant bit is '1'.
Now you are given an array of a characters (both ASCII and Kanji) and, an index into the array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The index points to the start of some character.
Now you need to write a function to do a backspace (i.e. delete the character before the given index). * Delete an element from a doubly linked list. * Write a function to find the depth of a binary tree. * Assuming that locks are the only reason due to which deadlocks can occur in a system.
What would be a foolproof method of avoiding deadlocks in the system.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Besides communication cost, what is the other source of inefficiency in RPC?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Ways of optimizing symbol table storage in compilers. * A walk-through through the symbol table functions, lookup() implementation etc - The interv. was on the Microsoft C team. * Given an array t[100] which contains numbers between 1..99.
Return the duplicated value.
Try both O(n) and O(n-square). * Given an array of characters.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>How would you reverse it. ?
How would you reverse it without using indexing in the array. * Given a sequence of characters.
How will you convert the lower case characters to upper case characters.
( Try using bit vector - sol given in the C lib -&gt; typec.h) * Give a good data structure for having n queues ( n not fixed) in a finite memory segment.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You can have some data-structure separate for each queue.
Try to use at least 90% of the memory space. * Do a breadth first traversal of a tree. * Given a list of numbers ( fixed list) Now given any other list, how can you efficiently find out if there is any element in the second list that is an element of the first list (fixed list). * What is a balanced tree * How would you find a cycle in a linked list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Try to do it in O(n) time.
Try it using a constant amount of memory. * Implement an algorithm to reverse a doubly linked list. * A square picture is cut into 16 squares and they are shuffled.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a program to rearrange the 16 squares to get the original big square. * The Web can be modeled as a directed graph.
Come up with a graph traversal algorithm.
Make the algorithm non-recursive and breadth-first. * How would you implement a hash table ?
How do you deal with collisions? * How would you find a cycle in a linked list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Try to do it in O(n) time.
Try it using a constant amount of memory. * Given a history of URLs, how would you determine if a particular URL had been seen before?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Since pages can have multiple URLs pointing to them, how can you make sure you've never seen the same CONTENT before?
* Write a function to print all of the permutations of a string. * Come up with the plan on how to traverse a graph, as well as to quickly determine if a given URL is one of the million or so you've previously seen. * The Web can be modeled as a directed graph.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Come up with a graph traversal algorithm.
Make the algorithm non-recursive and breadth-first. * Implement an algorithm to reverse a singly linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(with and without recursion) * Implement an algorithm to reverse a doubly linked list. * Implement an algorithm to insert in a sorted list. * Delete an element from a doubly linked list. * Write a function to copy two strings, A and B.
The last few bytes of string A overlap the first few bytes of string B. * Implement an algorithm to sort an array. * Given a sequence of characters, how will you convert the lower case characters to upper case characters?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a routine that prints out a 2-D array in spiral order. * Count the number of set bits in a number without using a loop. * Give me an algorithm and C code to shuffle a deck of cards, given that the cards are stored in an array of ints.
Try to come up with a solution that does not require any extra space. * Write a function that takes in a string parameter and checks to see whether or not it is an integer, and if it is then return the integer value. * How would you print out the data in a binary tree, level by level, starting at the top?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array of characters which form a sentence of words, give an efficient algorithm to reverse the order of the words in it. * Write a function to find the depth of a binary tree. * Given a list of numbers ( fixed list) Now given any other list, how can you efficiently find out if there is any element in the second list that is an element of the first list (fixed list). * How would you implement a queue from a stack?
* Write a funtion that finds repeating characters in a string. * Write a routine to reverse a series of numbers without using an array. * Give me an algorithm for telling me the number I didn't give you in a given range of numbers.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(Numbers are given at random) From CSRI * Write a function to check if two rectangles defined as below overlap or not. struct rect { int top, bot, left, right; } r1, r2; * Write a program to print the elements of a very long linked list in ascending order.
There may be duplicates in the list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You cannot modify the list or create another one.
Memory is tight, speed is not a problem. * Write a function to reverse a singly linked list, given number of links to reverse. * Write a function to convert an int to a string. * Some weird problem on vector calculus with some transformation matrices being applied - need paper and pencil to describe it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given ships travel between points A and B, one every hour leaving from both ends (simultaneously), how many ships are required (minimum), if the journey takes 1hr 40 mts.
How many ships does each ship encounter in its journey, and at what times? * Write a SetPixel(x, y) function, given a pointer to the bitmap.
Each pixel is represented by 1 bit.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are 640 pixels per row.
In each byte, while the bits are numbered right to left, pixels are numbered left to right.
Avoid multiplications and divisions to improve performance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you represent an n-ary tree?
Write a program to print the nodes of such a tree in breadth first order. * Write the 'tr' program of UNIX.
Invoked as tr -str1 -str2.
It reads stdin and prints it out to stdout, replacing every occurance of str1[i] with str2[i]. eg.tr -abc -xyz to be and not to be &lt;- input to ye xnd not to ye &lt;- output C syntax, semantics and simple programming questions * What does the term cast refer to?
Why is it used?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In arithmetic expressions, to what data type will the C compiler promote a character?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a statement and a block?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Increment the variable next three different ways.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How is a comment formed in C.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can comments be nested?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* From the standpoint of programming logic, what is the difference between a loop with the test at the top, and a loop where the test is at the bottom?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Specify the skeletons of two C loops with the test at the top.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Specify a C loop with the test at the bottom.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the switch statement?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does a break statement do?
Which control structures use it?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In a loop, what is the difference between a break and continue statement?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Where may variables be defined in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a variable definition and a variable declaration?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the purpose of a function prototype?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is type checking?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* To what does the term storage class refer?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* List C's storage classes and what they signify.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* State the syntax for the printf() and scanf() functions.
State their one crucial difference with respect to their parameters.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* With respect to function parameter passing, what is the difference between call-by-value and call-by-reference?
Which method does C use?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a structure and a union in C?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Define a structure for a simple name/address record.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does the typedef keyword do?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Use typedef to make a short-cut way to declare a pointer to the nameAddr structure above.
Call it addrPtr.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Declare a variable with addrPtr called address.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Assuming the variable address above, how would one refer to the city portion of the record within a C expression?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between: #include and #include &quot;stdio.h&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is #ifdef used for?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you define a constant in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why can't you nest structure definitions?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can you nest function definitions?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a forward reference?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the following and how do they differ: int, long, float and double?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Define a macro called SQR which squares a number.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Is it possible to take the square-root of a number in C.
Is there a square-root operator in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Using fprintf() print a single floating point number right-justified in a field of 20 spaces, no leading zeros, and 4 decimal places.
The destination should be stderr and the variable is called num.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between the &amp; and &amp;&amp; operators and the | and || operators?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between the -&gt; and . operators?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the symbol for the modulus operator?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* From the standpoint of logic, what is the difference between the fragment: if (next &lt; max) next++; else next = 0; and the fragment: next += (next &lt; max)?
(1):(-next); * What does the following fragment do? while((d=c=getch(),d)!=EOF&amp;&amp;(c!='\t'&amp;&amp;c!=' '&amp;&amp;c!='\b')) *buff++ = ++c; * Is C case sensitive (ie: does C differentiate between upper and lower case letters)?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Specify how a filestream called inFile should be opened for random reading and writing. the file's name is in fileName.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does fopen() return if successful.
If unsuccessful?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the void data type?
What is a void pointer?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Declare a pointer called fnc which points to a function that returns an unsigned long.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Declare a pointer called pfnc which points to a function that returns a pointer to a structure of type nameAddr.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* It is possible for a function to return a character, an integer, and a floating point number.
Is it possible for a function to return a structure?
Another function?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between an lvalue and an rvalue?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given the decimal number 27, how would one express it as a hexadecimal number in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between malloc() and calloc()?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What kind of problems was C designed to solve?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* write C code for deleting an element from a linked listy traversing a linked list efficient way of elimiating duplicates from an array * Declare a void pointer * Make the pointer aligned to a 4 byte boundary in a efficient manner * What is a far pointer (in DOS) * Write an efficient C code for 'tr' program.
'tr' has two command line arguments.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They both are strings of same length. tr reads an input file, replaces each character in the first string with the corresponding character in the second string. eg.
'tr abc xyz' replaces all 'a's by 'x's, 'b's by 'y's and so on. * Write C code to implement strtok() 'c' library function. * Implement strstr(), strcpy(), strtok() etc * Reverse a string. * Given a linked list which is sorted, how will you insert in sorted way. * Write a function that allocates memory for a two-dimensional array of given size (parameter x &amp; y) * Write source code for printHex(int i) in C/C++ * Write a function that finds the last instance of a character in a string.
C++ syntax, semantics and concepts questions * What is an object in C++?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a message?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is an instance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a super-class?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is inheritance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* To what does message protocol refer?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is polymorphism?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are instance variables?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are class variables?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In C++ what is a constructor?
A destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Compare and contrast C and C++.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is operator overloading?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is cin and cout?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Contrast procedural and object oriented programming.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you link a C++ program to C functions?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Explain the scope resolution operator.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the differences between a C++ struct and C++ class?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How many ways are there to initialize an int with a constant?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How does throwing and catching exceptions differ from using setjmp and longjmp?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is your reaction to this line of code? delete this; * What is a default constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a conversion constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a copy constructor and an overloaded assignment operator?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When should you use multiple inheritance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a virtual destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Explain the ISA and HASA class relationships.
How would you implement each in a class design?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When is a template a better solution than a base class?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the result of compiling this program in a C compiler? in a C++ compiler? int __ = 0; main() { int ___ = 2; printf(&quot;%d\n&quot;, ___ + __); } * What is the difference between C and C++ ?
Would you prefer to use one over the other ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the access privileges in C++ ?
What is the default access level ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is data encapsulation ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is inheritance ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is multiple inheritance ?
What are it's advantages and disadvantages ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is polymorphism?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What do the keyword static and const signify ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How is memory allocated/deallocated in C ?
How about C++ ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a shallow copy and a deep copy ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the differences between new and malloc? * What is the difference between delete and delete[]? * What are the differences between a struct in C and in C++? * What are the advantages/disadvantages of using #define? * What are the advantages/disadvantages of using inline and const? * What is the difference between a pointer and a reference? * When would you use a pointer?
A reference?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does it mean to take the address of a reference?
* What does it mean to declare a function or variable as static?
* What is the order of initalization for data?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is name mangling/name decoration?
* What kind of problems does name mangling cause?
* How do you work around them?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a class?
* What are the differences between a struct and a class in C++?
* What is the difference between public, private, and protected access?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* For class CFoo { }; what default methods will the compiler generate for you&gt;?
* How can you force the compiler to not generate them?
* What is the purpose of a constructor?
Destructor? * What is a constructor initializer list? * When must you use a constructor initializer list? * What is a: Constructor?
Destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Default constructor?
Copy constructor?
Conversion constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does it mean to declare a... member function as virtual?
member function as static?
member varible as static?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>destructor as static?
* Can you explain the term &quot;resource acqusition is initialization?&quot;
* What is a &quot;pure virtual&quot; member function?
* What is the difference between public, private, and protected inheritance?
* What is virtual inheritance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is placement new?
* What is the difference between operator new and the new operator?
* What is exception handling?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Explain what happens when an exception is thrown in C++. * What happens if an exception is not caught?
* What happens if an exception is throws from an object's constructor?
* What happens if an exception is throws from an object's destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the costs and benefits of using exceptions?
* When would you choose to return an error code rather than throw an exception?
* What is a template?
* What is partial specialization or template specialization?
* How can you force instantiation of a template?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is an iterator?
* What is an algorithm (in terms of the STL/C++ standard library)?
* What is std::auto_ptr?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is wrong with this statement?
std::auto_ptr ptr(new char[10]); * It is possible to build a C++ compiler on top of a C compiler.
How would you do this?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What output does the following code generate?
Why?
What output does it generate if you make A::Foo() a pure virtual function?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What output does this program generate as shown?
Why?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C++ ( what is virtual function ? what happens if an error occurs in constructor or destructor.
Discussion on error handling, templates, unique features of C++.
What is different in C++, ( compare with unix). * I was given a c++ code and was asked to find out the bug in that.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The bug was that he declared an object locally in a function and tried to return the pointer to that object.
Since the object is local to the function, it no more exists after returning from the function.
The pointer, therefore, is invalid outside.
Questions for ANSI-Knowledgeable Applicants * What is a mutable member?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is an explicit constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the Standard Template Library?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Describe run-time type identification.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What problem does the namespace feature solve?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Are there any new intrinsic (built-in) data types?
Design * Draw a class diagram (UML) for a system.
(They described the system in plain english). * Which do you prefer, inheritance or delegation?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Why? * What is the difference between RMI and IIOP?
Java questions * http://www.javaprepare.com/quests/question.html Misc.
Questions (Design pattern, HTTP, OOP, SQL)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What's the difference between SQL, DDL, and DML? * What's a join?
An inner join?
An outer join?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Describe HTTP. * What's a design pattern?
* Can you explain the singleton, vistor, facade, or handle class design pattern?
* When you do an ls -l, describe in detail everything that comes up on the screen. * Tell me three ways to find an IP address on a Unix box. * Write a bubble sort. * Write a linked list. * Describe an object. * What does object-oriented mean to you. * Can you explain what a B tree is?
* What's the difference between UDP and TCP?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is ICMP?
* What's the difference between a stack and a Queue?
* Do you know anything about the protection rings in the PC architecture?
* How much hardware/Assembler/Computer Architecture experience do you have. * Explain final, finalize, and finally.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When the finalize is invoked?
How does GC work? etc. * What is your experience with Servlet and JSP? * What is the Prototype design pattern? * In a system that you are designing and developing, a lot of small changes are expected to be committed at the end of a method call (persisted to the DB).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you don't want to query the database frequently. what would you do?
* Give an example in which you will combine several design patterns, and explain how the system can benefit from that. * Why would you apply design patterns (benefits)?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a two-phase commit?
* What will happen if one of your web-server or appserver crashs during its execution?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are various problems unique to distributed databases * Describe the file system layout in the UNIX OS * what is disk interleaving * why is disk interleaving adopted * given a new disk, how do you determine which interleaving is the best * give 1000 read operations with each kind of interleaving determine the best interleaving from the statistics * draw the graph with performace on one axis and 'n' on another, where 'n' in the 'n' in n-way disk interleaving.
(a tricky question, should be answered carefully) * Design a memory management scheme. * What sort of technique you would use to update a set of files over a network, where a server contains the master copy.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>General questions * How did you get into computer science?
* What kind of technical publications (print or online) do you read on a regular basis?
* What was the last book you read (does not have to be job related!)
* If you could recommend one resource (book, web site, etc.) to a new software developer just out of school, what would it be?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What was the most interesting project that you worked on?
* What was the most challenging project that you worked on?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* If you could have any job in the world, what would it be?
* Tell me about your favorite class. * Tell me about your favorite project [with lots of follow-up questions]. * Tell me about a something you did that was unsuccessful, a project or class that didn't go well. * Do you prefer a structured or unstructured working environment. * A chemist calls you up and says his Netscape isn't working.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What's wrong and how do you find out?
* How do you prioritize multiple projects?
* Tell me about previous jobs?
* What are your greatest strengths and weaknesses?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tell us about yourself. * Where would you like to be in five years?
* How do you see yourself fitting in to this company?
* Do you have any questions for me?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why did you leave your last job. * Did you finance your own education?
* Are you good with people?
* Have you experience working on a group project?
* How well do you know the windows menus?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What was the hardest program error for you to find and correct?
* What did you find hardest when working with others in a project?
* What is a tool or system that you learned on your own?
i.e. not in a class room?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* As a developer, would you prefer to use application server?
Why? * How would go about finding out where to find a book in a library.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(You don't know how exactly the books are organized beforehand). * Tradeoff between time spent in testing a product and getting into the market first. * What to test for given that there isn't enough time to test everything you want to. * Why do u think u are smart. * Questions on the projects listed on the Resume. * Do you want to know any thing about the company.( Try to ask some relevant and interesting question). * How long do u want to stay in USA and why?
* What are your geographical preference?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are your expectations from the job.
Questions and Answers Useful tips * Introduction The technical interview is perhaps the most intimidating and mysterious event that job hunters experience in the quest for that &quot;killer offer.&quot;
The rigor and format of the technical interview varies from one company to the next, but there are some fundamental similarities.
An interviewer presents you with a problem to be solved.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The interviewer may leave the room and give you some time to work the solution out before returning.
Or the interviewer may wait patiently while you study the problem and figure it out.
The interviewer may even start quizzing you right away about aspects of the problem and approaches to solving it.
Some of these problems can appear quite challenging, especially if you've never been through a technical interview before.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To make matters worse, simply getting the answer to the problem may not be enough to land the job.
On the other hand, getting the correct answer may not even be necessary.
What is an interviewer looking for in candidates during the technical interview?
Interviewers recognize that this setting is, by its very nature, stressful.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Otherwise competent candidates may be completely stumped by an interview problem only to discover an elegant, simple solution later that night.
Interviewers may be interested in seeing how you work under stressful situations or how well you adapt.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is worth noting that interviewers are more interested in seeing how you work than seeing whether you can come up with the correct answer.
In this article, I will deal with both how you can better showcase your skills and experience, and what kinds of problems you can expect to be asked.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Basic Rules These basic rules are often taught to programmers and are (or at any rate, should be) drilled into your head in computer-science classes.
For some reason, however, they are easily forgotten during the technical interview.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Being one of the few candidates careful and experienced enough to remember these important steps can make the difference between getting an offer and getting the cold shoulder.
Don't be afraid to ask for clarifications of the problem or the requirements for the solution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Don't assume all data is given to you.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You should never assume that you have been given all the data necessary to solve the problem to the satisfaction of the interviewer.
This is especially likely to be the case when interviewing with IT consulting companies.
In this environment, the client may need some prodding in order to provide a complete specification.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So, the reasoning goes, ideal candidates will be willing to talk to the client to figure out the expected inputs, the desired outputs, the data ranges and data types, and the special cases.
The ideal candidate will ask these questions rather than spend all the allotted time coming up with a solution that doesn't meet the client's needs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The first thing to do, then, is to make sure that you and the interviewer agree on what the problem is and what an acceptable solution would be.
Make all of your assumptions explicit and up-front, so the interviewer can correct you if you are mistaken.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the interviewer stays in the room after presenting the problem, he or she is interested in seeing how you analyze and approach a problem.
Of interest are how possible solutions are considered and eliminated.
And frankly, watching a candidate sit and stare at a problem isn't all that entertaining for the interviewer.
Always allow sufficient time for design.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The worst thing that you can do while attempting to solve a technical problem is to dive right into coding a solution and get about half way through it before realizing that the approach is all wrong.
This is where a little forethought can save a great deal of effort and embarrassment.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Don't worry about running out of time to answer the question before finishing the code for the solution.
The idea, the algorithm, and the approach are the most important elements here.
If you're having trouble writing the code, offer to explain the algorithm.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Stress and anxiety can make the technical interview more difficult than it needs to be.
If you find yourself having difficulty with programming syntax or constructs, you should make sure that the interviewer knows that you understand the problem and its solution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>While it's best to get both the algorithm and the implementation correct, it's far better to get points for demonstrating facility with one than fail to demonstrate either.
Be prepared to identify bottlenecks, possible optimizations, and alternative algorithms.
Just because you've found one solution that produces the correct output, doesn't mean the problem has been solved to the interviewer's satisfaction.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Interviewers, hinting at possible improvements, may prod you at this point.
Occasionally, you may take an approach that the interviewer didn't anticipate.
At this point, an interviewer may ask you to take a more conventional approach.
This doesn't mean that you've done anything wrong; very often, an interviewer may be leading you along a particular approach with a purpose in mind.
The interviewer may be intending to ask follow-up questions or present new problems that build on a particular solution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Good programming practice.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Initialize all variables, give variables descriptive names, and always use comments.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Interviewers may be watching your solutions to determine whether you follow good programming practices.
Good programming practices make it easy to understand other people's code.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means that there aren't cryptic variables, functions with undocumented side effects, obfuscated algorithms, and sloppy (read: buggy) code.
Just because you are being interviewed (and therefore, coding on a whiteboard or on a piece of paper) doesn't give you an excuse to be sloppy or lazy.
Commenting code for an interview may seem like a waste of time, but some interviewers do look to see that candidates write comments while coding or before coding, rather than adding them in as an afterthought.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Check all boundary conditions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Candidates forget to do this frighteningly often.
In fact, practicing programmers sometimes forget to do this.
That's how bugs get started.
You should verify that your code properly handles cases where inputs are negative or zero, lists are empty, strings are empty, and pointers are NULL.
This is also a good habit to have after you get the job.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Expect bad input from users.
Users rarely do as they are expected.
You should protect your code, and return a descriptive error back to the user.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Display enthusiasm.
Don't underestimate the importance of your appearance and attitude during the interview.
While your skills and experience may be the focus of the technical interview, looking bored or uninterested may do more to sabotage your chances than blowing an interview problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Work Things Into Your Conversations In addition to these basic rules for the technical interview, there are some other things worth pointing out.
Interviewers don't always have the chance to examine your résumé in advance.
This means that the interviewer may not be aware of your past work experience.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Don't hesitate to point out experiences working in teams (whether as a part of a past job, a class programming project, or a hobby), working on large projects (paying attention to time spent on design, implementation, and testing), dealing with customers to define requirements, and managing people and projects.
Interviewers are interested in hearing about successes as well as failures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When these past experiences weren't successful, you should point out the lessons learned or wisdom gained as a result of these failures.
Interviewers want to see that candidates who have had negative experiences are not going to repeat their mistakes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Typical Technical Questions When preparing for a technical interview, you should review basic structures (linked lists, binary trees, heaps) and algorithms (searching, sorting, hashing).
Having a mastery of these topics will likely give you all the necessary knowledge to tackle the problems you will encounter during the technical interview.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Also, review the areas for which you're interviewing.
If you're interviewing for a systems programming job, review the differences between threads and processes, OS scheduling algorithms, and memory allocation.
If you're interviewing for a job that requires experience with an object- oriented language, spend some time brushing up on object-oriented methodology.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Fortunately, some of the same problems come up with surprising frequency.
Even if a given interviewer doesn't use any of the problems I present here, studying them should give you insight into solving other problems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Conclusion The specific details of your interview will, of course, depend on a number of factors -- the type of job you are applying for, the needs and expertise of the technical interviewer, and guidelines set forth by the organization seeking to hire you.
Still, if you generalize and apply the tips I've presented here, you should be well on your way to getting the programming job that you want.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Logic questions * Given a rectangular (cuboidal for the puritans) cake with a rectangular piece removed (any size or orientation), how would you cut the remainder of the cake into two equal halves with one straight cut of a knife ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The cut (plane) should pass through the center of the two rectangles: the outer cake and the inner hollow area.
Since any plane passing through the center of the cuboid will divide the volume in two halves, both the cake and hollow area are divided into two equal halves.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You're given an array containing both positive and negative integers and required to find the subarray with the largest sum (O(N) a la KBL).
Write a routine in C for the above.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array of size N in which every number is between 1 and N, determine if there are any duplicates in it.
You are allowed to destroy the array if you like.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Many solutions: Bit vector, sorting...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array of characters which form a sentence of words, give an efficient algorithm to reverse the order of the words (not characters) in it.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How many points are there on the globe where by walking one mile south, one mile east and one mile north you reach the place where you started.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The answer is &quot;many points&quot;.
The set of such points is given as {North pole, special circle}.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>From north pole, walking one mile south followed by one mile east still keeps you one mile south of North pole.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The special circle consists of a set of points defined as follows.
Let's say you were to locate a spot near the South Pole where the circular distance &quot;around&quot; the Earth's North-South axis is 1 mile.
The path of such a journey would create a circle with a radius of approximately 840.8 feet (because C=2.r.pi).
Call this point X.
Now consider another point Y one mile north of X.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The special circle is the circular path around North-South axis going through Y.
If you begin you journey from any point (say Y1) on this special circle, and travel one mile south, you get to a point (say X1) on the circle of point X.
Now one mile east will bring you back to X1, because circumference of circle of X is 1 mile.
Then one mile North brings you back to Y1.
(Answer supplied by Kristie Boman)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In a X's and 0's game (i.e. TIC TAC TOE) if you write a program for this give a fast way to generate the moves by the computer.
I mean this should be the fastest way possible.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The answer is that you need to store all possible configurations of the board and the move that is associated with that.
Then it boils down to just accessing the right element and getting the corresponding move for it.
Do some analysis and do some more optimization in storage since otherwise it becomes infeasible to get the required storage in a DOS machine.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* A version of the &quot;There are three persons X Y Z, one of which always lies&quot;..
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* There are 3 ants at 3 corners of a triangle, they randomly start moving towards another corner.. what is the probability that they don't collide.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All three should move in the same direction - clockwise or anticlockwise.
Probability is 1/4.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* If you are on a boat and you throw out a suitcase, Will the level of water increase.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* There are 4 men who want to cross a bridge.
They all begin on the same side.
You have 17 minutes to get all of them across to the other side.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is night.
There is one flashlight.
A maximum of two people can cross at one time.
Any party who crosses, either 1 or 2 people, must have the flashlight with them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The flashlight must be walked back and forth, it cannot be thrown, etc.
Each man walks at a different speed.
A pair must walk together at the rate of the slower mans pace.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Man 1:1 minute to cross Man 2: 2 minutes to cross Man 3: 5 minutes to cross Man 4: 10 minutes to cross 1 and 2 cross together.
1 comes back. then 3 and 4 cross.
2 comes back. then 1 and 2 cross.
Total time is 2+1+10+2+2 = 17.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You have 5 jars of pills.
Each pill weighs 10 gram, except for contaminated pills contained in one jar, where each pill weighs 9 gm. Given a scale, how could you tell which jar had the contaminated pills in just one measurement?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Take one pill from first, two from second, three from third and so on.
Total pills are n(n+1)/2 and should weigh 10n(n+1)/2.
If it weighs x gm less than that then the x'th jar is contaminated, since we took x pills from that jar which weighed 1 gm less.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* One train leaves Los Angeles at 15 MPH heading for New York.
Another train leaves from New York at 20mph heading for Los Angeles on the same track.
If a bird, flying at 25mph, leaves from Los Angeles at the same time as the train and flies back and forth between the two trains until they collide, how far will the bird have traveled?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If distance is X miles between NY and LA, then it takes X/(15+20) hours for the trains to collide, and bird will have travelled 25X/(15+20) = 5X/7 miles in that time.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Imagine that you have 26 constants, labelled A through Z.
Each constant is assigned a value in the following way: A = 1; the rest of the values equal their position in the alphabet (B corresponds to the second position so it equals 2, C = 3, etc.) raised to the power of the preceeding constant value.
So, B = 2 &lt;s&gt; (A's value), or B = 2&lt;s&gt;1 = 2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>C = 3&lt;s&gt;2 = 9.
D = 4&lt;s&gt;9, etc., etc.
Find the exact numerical value to the following equation:(X - A) * (X - B) * (X - C) * ... * (X - Y) * (X - Z)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Answer is 0, because (X-X) is present in the product.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You have 12 balls.
All of them are identical except one, which is either heavier or lighter than the rest - it is either hollow while the rest are solid, or solid while the rest are hollow.
You have a simple two-armed scale, and are permitted three weighings.
Can you identify the odd ball, and determine whether it is hollow or solid.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let the balls be numbered 1 to 12.
Firstly, put 1-4 on one side and 5-8 on other side.
If both are equal then one of 9-12 is odd.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Then second try, weigh 9-10 vs 1-2, if equal, one of 11-12 is bad, else 9-10 is bad.
Testing which one is bad can be done by (third try) weighing 11 or 9, respectively, with good ball 1.
It also gives whether the odd ball is heavy or light.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Programming questions that require thinking * Write a routine to draw a circle (x ** 2 + y ** 2 = r ** 2) without making use of any floating point computations at all.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The basic idea is to draw one quadrant and replicate it to other four quadrants.
Assuming the center is given as (x,y) and radius as r units, then start X from (x+r) down to (x) and start Y from y up to (y+r).
In the iteration, keep comparing is the equation is satisfied or not within an error of one unit for x and y.
If not then re-adjust X and Y.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given only putchar (no sprintf, itoa, etc.) write a routine putlong that prints out an unsigned long in decimal.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>void putlong(unsigned long x) { // we know that 32 bits can have 10 digits.
2&lt;s&gt;32 = 4294967296 for (unsigned long y = 1000000000; y &gt; 0; y /= 10) { putchar( (x / y) + '0'); x = x % y; } } * Give a one-line C expression to test whether a number is a power of 2. [No loops allowed - it's a simple test.]
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if (x &amp;&amp; !(x &amp; (x-1)) == 0)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give a very good method to count the number of ones in a 32 bit number.
(caution: looping through testing each bit is not a solution).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the different ways to say, the value of x can be either a 0 or a 1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Apparently the if then else solution has a jump when written out in assembly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if (x == 0) y=0 else y =x There is a logical, arithmetic and a datastructure soln to the above problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* I was given two lines of assembly code which found the absolute value of a number stored in two's complement form.
I had to recognize what the code was doing.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Pretty simple if you know some assembly and some fundaes on number representation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give a fast way to multiply a number by 7.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Multiply by 8 (left shift by 3 bits) and then subtract the number.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(x &lt;&lt; 3) - x * Write an efficient algo and C code to shuffle a pack of cards.. this one was a feedback process until we came up with one with no extra storage.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* A real life problem - A square picture is cut into 16 sqaures and they are shuffled.
Write a program to rearrange the 16 squares to get the original big square.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Consider the base -2 representation of numbers.
(-2 instead of usual +2).
Give the condition for a number represented in this form to be positive?
Also, if P(A, B) is a function that takes two 0-1 strings A,B in this representation, when can we say that P(A,B) returns the sum of these two numbers?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an expression tree with no parentheses in it, write the program to give equivalent infix expression with parentheses inserted where necessary.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given a maze with cheese at one place and a mouse at some entrance, write a program to direct the mouse to cheese correctly.
(Assume there is a path).
Following primitives are given: moveforward, turnright, turnleft, iswall?, ischeese?, eatcheese.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give me an algorithm and C code to find the subarray with the largest sum given an array containing both positive and negative integers.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function that returns the factorial of a number.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is a typical, can-you-program warm-up question.
Example 1 shows the iterative and recursive solutions.
Notice that in both solutions, I check the input values and boundary conditions.
Factorials of negative numbers are undefined, and the factorial of both 0 and 1 are 1.
The functions in Example 1 handle these cases correctly, and they initialize all variables.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function that computes the nth number in the Fibonacci sequence.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Example 2 contains both the iterative and recursive solutions.
The iterative version maintains variables to hold the last two values in the Fibonacci sequence, and uses them to compute the next value.
Again, boundary conditions and inputs are checked.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The 0th number in the Fibonacci sequence is defined as 0.
The first number in the sequence is 1.
Return -1 if a negative number is passed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The recursive version of the Fibonacci function works correctly, but is considerably more expensive than the iterative version.
There are, however, other ways to write this function recursively in C that are not as expensive.
For instance, you could maintain static variables or create a struct to hold previously computed results.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write an implementation of strlen().
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Given a char pointer, strlen() determines the number of chars in a string.
The first thing that your strlen() implementation ought to do is to check your boundary conditions.
Don't forget the case where the pointer you are given is pointing to an empty string.
What about the case where the pointer is equal to NULL?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is a case where you should state your assumptions.
In many implementations, the real strlen() doesn't check to see if the pointer is NULL, so passing a NULL pointer to strlen() would result in a segmentation fault.
Making it clear to your interviewer that you are aware of both of these boundary conditions shows that you understand the problem and that you have thought about its solution carefully.
Example 3 shows the correct solution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Switch the integer values stored in two registers without using any additional memory.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To swap the values, you can carry out the following instructions:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reg_1 = Reg_1 + Reg_2; Reg_2 = Reg_1 - Reg_2; Reg_1 = Reg_1 - Reg_2; * Given two strings S1 and S2.
Delete from S2 all those characters which occur in S1 also and finally create a clean S2 with the relevant characters deleted.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a small lexical analyzer - interviewer gave tokens. expressions like &quot;a*b&quot; etc.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a routine that prints out a 2-D array in spiral order!
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How is the readers-writers problem solved? - using semaphores/ada .. etc.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write code for reversing a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write, efficient code for extracting unique elements from a sorted list of array. e.g. (1, 1, 3, 3, 3, 5, 5, 5, 9, 9, 9, 9) -&gt; (1, 3, 5, 9).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Contribute by John Foley:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>#include int main() { //--- constant data const int arr[] = {1, 1, 2, 4, 4, 7, 8, 9, 14, 14, 20}; const size_t arrlen = sizeof(arr)/sizeof(arr[0]); int i; for(i=0; i&lt;arrlen; i++) { //--- if this is the first one, print no matter what // if not, skip if we just printed the same number if(i &amp;&amp; arr[i] == arr[i-1]) continue; //--- print this number, update last item printf(&quot;%d\n&quot;, arr[i]); } return 0; } Microsoft question * Given a rectangular (cuboidal for the puritans) cake with a rectangular piece removed (any size or orientation), how would you cut the remainder of the cake into two equal halves with one straight cut of a knife ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You're given an array containing both positive and negative integers and required to find the subarray with the largest sum (O(N) a la KBL).
Write a routine in C for the above.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array of size N in which every number is between 1 and N, determine if there are any duplicates in it.
You are allowed to destroy the array if you like.[I ended up giving about 4 or 5 different solutions for this, each supposedly better than the others ].
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a routine to draw a circle (x ** 2 + y ** 2 = r ** 2) without making use of any floating point computations at all. [ This one had me stuck for quite some time and I first gave a solution that did have floating point computations ].
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given only putchar (no sprintf, itoa, etc.) write a routine putlong that prints out an unsigned long in decimal. [ I gave the obvious solution of taking % 10 and / 10, which gives us the decimal value in reverse order.
This requires an array since we need to print it out in the correct order.
The interviewer wasn't too pleased and asked me to give a solution which didn't need the array ].
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give a one-line C expression to test whether a number is a power of 2. [No loops allowed - it's a simple test.]
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array of characters which form a sentence of words, give an efficient algorithm to reverse the order of the words (not characters) in it.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How many points are there on the globe where by walking one mile south, one mile east and one mile north you reach the place where you started.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give a very good method to count the number of ones in a 32 bit number.
(caution: looping through testing each bit is not a solution).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the different ways to say, the value of x can be either a 0 or a 1.
Apparently the if then else solution has a jump when written out in assembly. if (x == 0) y=0 else y =x * (a-1) xor a == 0 - What does this do?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It creates a mask over both the trailing zeros of an integer and the first set bit from right.
For example if a is 10101100 then result is 00000111.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>On the other hand, (a-1) AND a == 0 is different.
It tests whether 'a' is a power of 2.
Actually, it tests if a has only one instance of 1 bit, which is same as 'a' being power of 2.
For example, if a is 00010000 then result is 0, and if a is 01001000 then result is 01000000 which is not 0.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(Thanks to Philip Shirey for correction)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How can you print singly linked list in reverse order?
(it's a huge list and you cant use recursion)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How can you find out if there is a loop in a very long list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* A character set has 1 and 2 byte characters.
One byte characters have 0 as the first bit.
You just keep accumulating the characters in a buffer.
Suppose at some point the user types a backspace, how can you remove the character efficiently.
( Note: You cant store the last character typed because the user can type in arbitrarily many backspaces)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How would you reverse the bits of a number with log N arithmetic operations, where N is the number of bits in the integer (eg 32,64..)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Whats the simples way to check if the sum of two unsigned integers has resulted in an overflow.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Induction on i:1..n: Maintain the subarray with largest sum and suffix with largest sum and then update both after adding the i+1th element...
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Sum of the numbers or copy i into A[i] so on till conflict.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Update deltaY while incrementing x.
Have to multiply so that the deltay is not a floating pt number.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Find the largest 10**n less than given number, then div etc.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Shivku said this question is garbled thru ages.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* reverse the pointers till you reach the end and print-and-reverse as you return.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Have two 'threads' one at twice the speed of the other traversing the list and see if at anytime they meet.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Scan the bytes backward till you reach one with the first bit set to 0.
Now this is either a one byte character or the second byte of a two byte one.
Either way it marks a Character boundary.
Start from there an scan forward to find what the last character is.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Flip adjacent bits, then flip adjacent 2 bit sets, then 4-bits and so on.
Each of this swap can be done in constant time using appropriate masks and shifts.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data structures and algorithms questions * Write a function and the node data structure to visit all of the nodes in a binary tree.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You know what a queue is ....
Implement a queue class with Java.
What is the cost of enqueue and dequeue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Can you improve this?
What if the queue is full (I was using an looping array)?
What kind of mechanism would you use to increase its size?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give an algorithm that calculates the distance between two text strings (only operations you can have are: delete, add, and change, one by one).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given the definition of a sequence (5 4 7 6 is, but 1 2 4 5 is not), write an algorithm to check if an arbitrary array is a sequence or not.
Once I figured out a solution, I was asked to do a space and time complexity analysis.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Describe a situation where concurrent access would lead to inconsistency in your application.
How would you solve this problem?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* You are given a list of n numbers from 1 to n-1, with one of the numbers repeated.
Devise a method to determine which number is repeated.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The sum of the numbers 1 to n-1 is (n)(n-1)/2.
Add the numbers on the list, and subtract (n)(n-1)/2.
The result is the number that has been repeated.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write an algorithm to detect loop in a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You are presented with a linked list, which may have a &quot;loop&quot; in it.
That is, an element of the linked list may incorrectly point to a previously encountered element, which can cause an infinite loop when traversing the list.
Devise an algorithm to detect whether a loop exists in a linked list.
How does your answer change if you cannot change the structure of the list elements?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One possible answer is to add a flag to each element of the list.
You could then traverse the list, starting at the head and tagging each element as you encounter it.
If you ever encountered an element that was already tagged, you would know that you had already visited it and that there existed a loop in the linked list.
What if you are not allowed to alter the structure of the elements of the linked list?
The following algorithm will find the loop:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Start with two pointers ptr1 and ptr2. * Set ptr1 and ptr2 to the head of the linked list. * Traverse the linked list with ptr1 moving twice as fast as ptr2 (for every two elements that ptr1 advances within the list, advance ptr2 by one element). * Stop when ptr1 reaches the end of the list, or when ptr1 = ptr2. * If ptr1 and ptr2 are ever equal, then there must be a loop in the linked list.
If the linked list has no loops, ptr1 should reach the end of the linked list ahead of ptr2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given the time, devise an algorithm to calculate the angle between the hour and minute hands of an analog clock.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The important realization for this problem is that the hour hand is always moving.
In other words, at 1:30, the hour hand is halfway between 1 and 2.
Once you remember that, this problem is fairly straightforward.
Assuming you don't care whether the function returns the shorter or larger angle, Example 4 shows a solution to this problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Devise an algorithm for detecting whether a given string is a palindrome (spelled the same way forwards and backwards).
For example, &quot;A man, a plan, a canal, Panama.&quot;
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For the sake of this problem, assume that the string has been stripped of punctuation (including spaces), and has been converted to a single case.
The most efficient way to detect whether a string is a palindrome is to create two pointers.
Set one at the beginning of the string, and one at the end.
Compare the values at those locations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the values don't match, the string isn't a palindrome.
Otherwise, move each pointer inward and repeat the comparison.
Stop when the pointers are pointing to the same position in the string (if its length is an odd-number) or when the pointers have &quot;crossed&quot; (if the string's length is an even-number).
Example 5 shows the correct solution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an eight-bit bitmap graphics file, devise an algorithm to convert the file into a two-bit ASCII approximation.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Assume that the file format is one byte for every pixel in the file, and that the approximation will produce one ASCII character of output for each pixel.
This problem is easier to solve than it sounds.
This is one of the tricks used in technical interview questions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Problems may be obscured or made to sound difficult.
Don't be fooled!
Take the time to think about the core of the problem.
In this case, all you want is an algorithm for reading the values in a file and outputting characters based upon those values.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Eight-bit numbers can be in the range from 0 to 255.
Two-bit numbers are in the range from 0 to 3.
Basically, we want to divide the 256 numbers specified by an eight-bit number into four ranges, which can be indicated by a two-bit number.
So, divide the range of 0 to 255 uniformly into four separate ranges: 0 to 63, 64 to 127, 128 to 191, and 192 to 255.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You then have to assign an ASCII character to each of those four ranges of numbers.
For example, you could use &quot;_&quot;, &quot;~&quot;, &quot;+&quot;, and &quot;#&quot;.
Then, the algorithm is as follows:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1. Open the file.
2. For every byte in the file: a.
Read in one byte. b.
If the value is in the range 0..63, we'll print '_'. c.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the value is in the range 64..127, we'll print '~'. d.
If the value is in the range 128..191, we'll print '+'. e.
If the value is in the range 192..255, we'll print '#'.
3. Close the file.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Reverse a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Insert in a sorted list * First some definitions for this problem: a) An ASCII character is one byte long and the most significant bit in the byte is always '0'. b) A Kanji character is two bytes long.
The only characteristic of a Kanji character is that in its first byte the most significant bit is '1'.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Now you are given an array of a characters (both ASCII and Kanji) and, an index into the array.
The index points to the start of some character.
Now you need to write a function to do a backspace (i.e. delete the character before the given index).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Delete an element from a doubly linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function to find the depth of a binary tree.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Assuming that locks are the only reason due to which deadlocks can occur in a system.
What would be a foolproof method of avoiding deadlocks in the system.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Besides communication cost, what is the other source of inefficiency in RPC?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(answer : context switches, excessive buffer copying).
How can you optimise the communication?
(ans : communicate through shared memory on same machine, bypassing the kernel _ A Univ. of Wash. thesis)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Ways of optimizing symbol table storage in compilers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* A walk-through through the symbol table functions, lookup() implementation etc - The interv. was on the Microsoft C team.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array t[100] which contains numbers between 1..99.
Return the duplicated value.
Try both O(n) and O(n-square).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array of characters.
How would you reverse it. ?
How would you reverse it without using indexing in the array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given a sequence of characters.
How will you convert the lower case characters to upper case characters.
( Try using bit vector - sol given in the C lib -&gt; typec.h)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give a good data structure for having n queues ( n not fixed) in a finite memory segment.
You can have some data-structure separate for each queue.
Try to use at least 90% of the memory space.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Do a breadth first traversal of a tree.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given a list of numbers ( fixed list) Now given any other list, how can you efficiently find out if there is any element in the second list that is an element of the first list (fixed list).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a balanced tree given a linked list with the following property node2 is left child of node1, if node2 &lt; node1 else, it is the right child.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>O P | | O A | | O B | | O C How do you convert the above linked list to the form without disturbing the property.
Write C code for that.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>O P | | O B / / / O ?
O ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>determine where do A and C go * How would you find a cycle in a linked list?
Try to do it in O(n) time.
Try it using a constant amount of memory.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Implement an algorithm to reverse a doubly linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* A square picture is cut into 16 squares and they are shuffled.
Write a program to rearrange the 16 squares to get the original big square.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Web can be modeled as a directed graph.
Come up with a graph traversal algorithm.
Make the algorithm non-recursive and breadth-first.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How would you implement a hash table ?
How do you deal with collisions?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How would you find a cycle in a linked list?
Try to do it in O(n) time.
Try it using a constant amount of memory.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given a history of URLs, how would you determine if a particular URL had been seen before?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Since pages can have multiple URLs pointing to them, how can you make sure you've never seen the same CONTENT before?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function to print all of the permutations of a string.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Come up with the plan on how to traverse a graph, as well as to quickly determine if a given URL is one of the million or so you've previously seen.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Web can be modeled as a directed graph.
Come up with a graph traversal algorithm.
Make the algorithm non-recursive and breadth-first.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Implement an algorithm to reverse a singly linked list.
(with and without recursion)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Implement an algorithm to reverse a doubly linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Implement an algorithm to insert in a sorted list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Delete an element from a doubly linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function to copy two strings, A and B.
The last few bytes of string A overlap the first few bytes of string B.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Implement an algorithm to sort an array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given a sequence of characters, how will you convert the lower case characters to upper case characters?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a routine that prints out a 2-D array in spiral order.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Count the number of set bits in a number without using a loop.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give me an algorithm and C code to shuffle a deck of cards, given that the cards are stored in an array of ints.
Try to come up with a solution that does not require any extra space.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function that takes in a string parameter and checks to see whether or not it is an integer, and if it is then return the integer value.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How would you print out the data in a binary tree, level by level, starting at the top?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given an array of characters which form a sentence of words, give an efficient algorithm to reverse the order of the words in it.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function to find the depth of a binary tree.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given a list of numbers ( fixed list) Now given any other list, how can you efficiently find out if there is any element in the second list that is an element of the first list (fixed list).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How would you implement a queue from a stack?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a funtion that finds repeating characters in a string.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a routine to reverse a series of numbers without using an array.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give me an algorithm for telling me the number I didn't give you in a given range of numbers.
(Numbers are given at random)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>From CSRI * Write a function to check if two rectangles defined as below overlap or not. struct rect { int top, bot, left, right; } r1, r2; * Write a program to print the elements of a very long linked list in ascending order.
There may be duplicates in the list.
You cannot modify the list or create another one.
Memory is tight, speed is not a problem.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function to reverse a singly linked list, given number of links to reverse.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function to convert an int to a string.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Some weird problem on vector calculus with some transformation matrices being applied - need paper and pencil to describe it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given ships travel between points A and B, one every hour leaving from both ends (simultaneously), how many ships are required (minimum), if the journey takes 1hr 40 mts.
How many ships does each ship encounter in its journey, and at what times?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>4, 3 at 20 mts, 50 mts and 80 mts.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a SetPixel(x, y) function, given a pointer to the bitmap.
Each pixel is represented by 1 bit.
There are 640 pixels per row.
In each byte, while the bits are numbered right to left, pixels are numbered left to right.
Avoid multiplications and divisions to improve performance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you represent an n-ary tree?
Write a program to print the nodes of such a tree in breadth first order.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sibling and firstchild ptr.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write the 'tr' program of UNIX.
Invoked as tr -str1 -str2.
It reads stdin and prints it out to stdout, replacing every occurance of str1[i] with str2[i]. eg.tr -abc -xyz to be and not to be C syntax, semantics and simple programming questions * What does the term cast refer to?
Why is it used?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A Casting is a mechanism built into C that allows the programmer to force the conversion of data types.
This may be needed because most C functions are very particular about the data types they process.
A programmer may wish to override the default way the C compiler promotes data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In arithmetic expressions, to what data type will the C compiler promote a character?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It will promote it to an integer unless otherwise directed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a statement and a block?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A statement is a single C expression terminated with a semicolon.
A block is a series of statements, the group of which is enclosed in curly-braces.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Increment the variable next three different ways.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>next = next + 1; and next++; and next += 1; * How is a comment formed in C.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Comments in C begin with a slash followed by an asterisk.
Any text may then appear including newlines.
The comment is finished with an asterisk followed by a slash.
Example:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>/* This is a comment */ * Can comments be nested?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Not in standard (K&amp;R) C.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* From the standpoint of programming logic, what is the difference between a loop with the test at the top, and a loop where the test is at the bottom?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the test is at the bottom, the body of the loop will always be executed at least once.
When the test is at the top, the body of the loop may never be executed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Specify the skeletons of two C loops with the test at the top.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>next = 0; /* setup */ while ( next &lt; max) { /* test */ printf(&quot;Hello &quot;); /* body */ next++; /* update */ } and for ( next = 0; next &lt; max; next++) /* setup,test */ /* and update */ printf(&quot;Hello&quot;); /* body */ * Specify a C loop with the test at the bottom.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>next = 0; /* setup */ do { printf(&quot;Hello&quot;); /* body */ next++; /* update */ } while ( next &lt; max); /* test */ * What is the switch statement?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is C's form of multiway-conditional (a.k.a case statement in Pascal).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does a break statement do?
Which control structures use it?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The break statement unconditionally ends the execution of the smallest enclosing while, do, for or switch statement.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In a loop, what is the difference between a break and continue statement?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The break terminates the loop.
The continue branches immediately to the test portion of the loop.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Where may variables be defined in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Outside a function definition (global scope, from the point of definition downward in the source code).
Inside a block before any statements other than variable declarations (local scope with respect to the block).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a variable definition and a variable declaration?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A definition tells the compiler to set aside storage for the variable.
A declaration makes the variable known to parts of the program that may wish to use it.
A variable might be defined and declared in the same statement.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the purpose of a function prototype?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A function prototype tells the compiler to expect a given function to be used in a given way.
That is, it tells the compiler the nature of the parameters passed to the function (the quantity, type and order) and the nature of the value returned by the function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is type checking?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The process by which the C compiler ensures that functions and operators use data of the appropriate type(s).
This form of check helps ensure the semantic correctness of the program.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* To what does the term storage class refer?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is a part of a variable declaration that tells the compiler how to interpret the variable's symbol.
It does not in itself allocate storage, but it usually tells the compiler how the variable should be stored.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* List C's storage classes and what they signify.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>static - Variables are defined in a nonvolatile region of memory such that they retain their contents though out the program's execution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>register - Asks the compiler to devote a processor register to this variable in order to speed the program's execution.
The compiler may not comply and the variable looses it contents and identity when the function it which it is defined terminates.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>extern - Tells the compiler that the variable is defined in another module.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>volatile - Tells the compiler that other programs will be modifying this variable in addition to the program being compiled.
For example, an I/O device might need write directly into a program or data space.
Meanwhile, the program itself may never directly access the memory area in question.
In such a case, we would not want the compiler to optimize-out this data area that never seems to be used by the program, yet must exist for the program to function correctly in a larger context.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* State the syntax for the printf() and scanf() functions.
State their one crucial difference with respect to their parameters.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Where fmtStr tells printf() how to format the variable list that follows. var1 through varN may be variables of any base type.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>scanf( fmtStr, &amp;var1, &amp;var2, &amp;varN); This routine is the input compliment to printf().
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>scanf() requires the address of each variable instead of the variable's value (as in printf()).
This is subtle source of serious bugs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* With respect to function parameter passing, what is the difference between call-by-value and call-by-reference?
Which method does C use?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the case of call-by-reference, a pointer reference to a variable is passed into a function instead of the actual value.
The function's operations will effect the variable in a global as well as local sense.
Call-by-value (C's method of parameter passing), by contrast, passes a copy of the variable's value into the function.
Any changes to the variable made by function have only a local effect and do not alter the state of the variable passed into the function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a structure and a union in C?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A structure is an aggregate data type.
It combines one or more base or aggregate data types into a package that may treated as a whole.
A structure is like a record in other languages.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A union combines two or more data types in the same area of storage.
The contents of a union may be one data type at one time and another type at a different time.
A union is sometimes called a trick- record.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Define a structure for a simple name/address record.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>struct nameAddr { char name[30]; char addr[30]; char city[20]; char state[3]; char zip[5]; }; * What does the typedef keyword do?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This keyword provides a short-hand way to write variable declarations.
It is not a true data typing mechanism, rather, it is syntactic &quot;sugar coating.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Use typedef to make a short-cut way to declare a pointer to the nameAddr structure above.
Call it addrPtr.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>typedef struct nameAddr *addrPtr; * Declare a variable with addrPtr called address.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>addrPtr address; * Assuming the variable address above, how would one refer to the city portion of the record within a C expression?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>address-&gt;city * What is the difference between: #include and #include &quot;stdio.h&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They both specify a file for inclusion into the current source file.
The difference is where the file stdio.h is expected to be.
In the case of the brackets, the compiler will look in all the default locations.
In the case of the quotes, the compiler will only look in the current directory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is #ifdef used for?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is used for condition compilation.
Specifically the source code between #ifdef and #endif (or #else) is compiled if the associated symbol is defined to the compiler.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you define a constant in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The C language itself has no provision for constants.
However, its companion program, the preprocessor, can be used to make manifest constants.
It does this through the use of the #define keyword.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why can't you nest structure definitions?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Trick question: You can nest structure definitions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can you nest function definitions?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>No.
(You can in Pascal, a close relative to C.)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a forward reference?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is a reference to a variable or function before it is defined to the compiler.
The cardinal rule of structured languages is that everything must be defined before it can be used.
There are rare occasions where this is not possible.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is possible (and sometimes necessary) to define two functions in terms of each other.
One will obey the cardinal rule while the other will need a forward declaration of the former in order to know of the former's existence.
Confused?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the following and how do they differ: int, long, float and double?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>int An integer, usually +/- 215 in magnitude.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>long A larger version of int, usually +/- 231 in magnitude.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>float A single precision real (floating point) number.
Magnitude varies.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>double A double precision real number.
Magnitude varies.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Define a macro called SQR which squares a number.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>#define SQR(x) (x * x) (The parenthesis around &quot;x * x&quot; are extremely important because the macro may be expanded into a place where any embedded spaces could cause the compiler to misinterpret the expression.
The consequences could range from a pesky syntax error to wrong answers when the program is run.).
Moral: The preprocessor does not know C.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Is it possible to take the square-root of a number in C.
Is there a square-root operator in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Yes.
There is no square-root operator; such computation is performed though the use of a function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Using fprintf() print a single floating point number right-justified in a field of 20 spaces, no leading zeros, and 4 decimal places.
The destination should be stderr and the variable is called num.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>fprintf( stderr, &quot;%-20.4f&quot;, num); * What is the difference between the &amp; and &amp;&amp; operators and the | and || operators?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&amp; and | are bitwise AND and OR operators respectively.
They are usually used to manipulate the contents of a variable on the bit level. &amp;&amp; and || are logical AND and OR operators respectively.
They are usually used in conditionals.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between the -&gt; and . operators?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They both provide access to members of a structure or union.
They differ in that -&gt; is used when the variable is a pointer to a structure or union.
The dot is used when the variable is itself the structure or union.
The -&gt; operator combines the pointer dereferencing operator with the member access operator; it is syntactic &quot;sugar coating.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>address-&gt;city is equivalent to (*address).city.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the symbol for the modulus operator?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>% (the percent symbol)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* From the standpoint of logic, what is the difference between the fragment: if (next &lt; max) next++; else next = 0; and the fragment: next += (next &lt; max)?
(1):(-next); Nothing.
They are different ways to express the same logic.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does the following fragment do? while((d=c=getch(),d)!=EOF&amp;&amp;(c!='\t'&amp;&amp;c!=' '&amp;&amp;c!='\b')) *buff++ = ++c; (Thanks to Peter Hedinger for correction).
Do the following until either the end of standard input or the variable c takes on the value of a tab, space, or backspace character: Store the character that succeeds the character stored in c into the current location pointed by buff.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Then increment buff to point to the next location in memory.
Meanwhile, d is assigned the same value as c and it is the value of d that is used in the comparison to EOF.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Is C case sensitive (ie: does C differentiate between upper and lower case letters)?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Specify how a filestream called inFile should be opened for random reading and writing. the file's name is in fileName.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>inFile = fopen( fileName, &quot;r+&quot;); * What does fopen() return if successful.
If unsuccessful?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Upon success fopen() returns a pointer to a filestream.
Otherwise it returns the value of NULL.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the void data type?
What is a void pointer?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The void data type is used when no other data type is appropriate.
A void pointer is a pointer that may point to any kind of object at all.
It is used when a pointer must be specified but its type is unknown.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Declare a pointer called fnc which points to a function that returns an unsigned long.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>unsigned long (*fnc)(); * Declare a pointer called pfnc which points to a function that returns a pointer to a structure of type nameAddr.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>struct nameAddr *(*pfnc)(); * It is possible for a function to return a character, an integer, and a floating point number.
Is it possible for a function to return a structure?
Another function?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>No.
However, it is possible to return pointers to structures and functions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between an lvalue and an rvalue?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The lvalue refers to the left-hand side of an assignment expression.
It must always evaluate to a memory location.
The rvalue represents the right-hand side of an assignment expression; it may have any meaningful combination of variables and constants.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given the decimal number 27, how would one express it as a hexadecimal number in C?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>0x1B * What is malloc()?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This function allocates heap storage for dynamic data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between malloc() and calloc()?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The malloc() function allocates raw memory given a size in bytes.
On the other hand, calloc() clears the requested memory to zeros before return a pointer to it.
(It can also compute the request size given the size of the base data structure and the number of them desired.)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What kind of problems was C designed to solve?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>C was designed to be a &quot;universal&quot; assembly language.
It is used for producing system software such as operation systems, compilers/interpreters, device drivers, editors, DBMS's and similar things.
It is not as well suited to application programs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* write C code for deleting an element from a linked listy traversing a linked list efficient way of elimiating duplicates from an array * Declare a void pointer void *ptr; * Make the pointer aligned to a 4 byte boundary in a efficient manner assign the pointer to a long number and the number with 11...1100 add 4 to the number * What is a far pointer (in DOS)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write an efficient C code for 'tr' program.
'tr' has two command line arguments.
They both are strings of same length. tr reads an input file, replaces each character in the first string with the corresponding character in the second string. eg. 'tr abc xyz' replaces all 'a's by 'x's, 'b's by 'y's and so on.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>have an array of length 26. put 'x' in array element corr to 'a' put 'y' in array element corr to 'b' put 'z' in array element corr to 'c' put 'd' in array element corr to 'd' put 'e' in array element corr to 'e' and so on. the code while (!eof) { c = getc(); putc(array[c - 'a']); } * Write C code to implement strtok() 'c' library function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Implement strstr(), strcpy(), strtok() etc * Reverse a string.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Given a linked list which is sorted, how will you insert in sorted way.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a function that allocates memory for a two-dimensional array of given size (parameter x &amp; y)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write source code for printHex(int i) in C/C++ * Write a function that finds the last instance of a character in a string.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>C++ syntax, semantics and concepts questions * What is an object in C++?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An object is a package that contains related data and instructions.
The data relates to what the object represents, while the instructions define how this object relates to other objects and itself.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a message?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A message is a signal from one object to another requesting that a computation take place.
It is roughly equivalent to a function call in other languages.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A class defines the characteristics of a certain type of object.
It defines what its members will remember, the messages to which they will respond, and what form the response will take.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is an instance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An individual object that is a member of some class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a super-class?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Given a class, a super-class is the basis of the class under consideration.
The given class is defined as a subset (in some respects) of the super-class.
Objects of the given class potentially posses all the characteristics belonging to objects of the super-class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is inheritance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Inheritance is property such that a parent (or super) class passes the characteristics of itself to children (or sub) classes that are derived from it.
The sub-class has the option of modifying these characteristics in order to make a different but fundamentally related class from the super-class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* To what does message protocol refer?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An object's message protocol is the exact form of the set of messages to which the object can respond.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is polymorphism?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Polymorphism refers to the ability of an object to respond in a logically identical fashion to messages of the same protocol, containing differing types of objects.
Consider 1 + 5 and 1 + 5.1.
In the former, the message &quot;+ 5&quot; is sent to an object of class integer (1).
In the later, the message &quot;+ 5.1&quot; is sent to the same integer object.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The form of the message (its protocol) is identical in both cases.
What differs is the type of object on the right-hand side of these messages.
The former is an integer object (5) while the later is a floating point object (5.1).
The receiver (1) appears (to other objects) to respond in the same way to both messages.
Internally, however, it knows that it must treat the two types of objects differently in order to obtain the same overall response.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are instance variables?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>These represent an object's private memory.
They are defined in an object's class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are class variables?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>These represent a class's memory which it shares with each of its instances.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A method is a class's procedural response to a given message protocol.
It is like the definition of a procedure in other languages.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In C++ what is a constructor?
A destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A constructors and destructors are methods defined in a class that are invoked automatically when an object is created or destroyed.
They are used to initialize a newly allocated object and to cleanup behind an object about to be removed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Compare and contrast C and C++.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Comparison: C++ is an extension to the C language.
When C++ is used as a procedural language, there are only minor syntactical differences between them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Contrast: When used as a procedural language, C++ is a better C because:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* It vigorously enforces data typing conventions. * It allows variables to be defined where they are used. * It allows the definition of real (semantically significant) constants. * It allows for automatic pointer dereferencing. * It supports call-by-reference in addition to call-by-value in functions. * It supports tentative variable declarations (when the type and location of a variable cannot be known before hand.
As an object oriented language, C++ introduces much of the OOP paradigm while allowing a mixture of OOP and procedural styles.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is operator overloading?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is the process of, and ability to redefine the way an object responds to a C++ operator symbol.
This would be done in the object's class definition.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is cin and cout?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They are objects corresponding to a program's default input and output files.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Contrast procedural and object oriented programming.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The procedural paradigm performs computation through a step-by-step manipulation of data items.
Solving problems this way is akin to writing a recipe. ie: All the ingredients (data items) are defined.
Next a series of enumerated steps (statements) are defined to transform the raw ingredients into a finished meal.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The object oriented model, in contrast, combines related data and procedural information into a single package called an object.
Objects are meant to represent logically separate entities (like real world objects).
Objects are grouped together (and defined by) classes.
(This is analogous to user defined data types in procedural languages.)
Classes may pass-on their &quot;makeup&quot; to classes derived from them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In this way, Objects that are of a similar yet different nature need not be defined from scratch.
Computation occurs though the intercommunication of objects.
Programming this way is like writing a play.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>First the characters are defined with their attributes and personalities.
Next the dialog is written so that the personalities interact.
The sum total constitutes a drama.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you link a C++ program to C functions?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By using the extern &quot;C&quot; linkage specification around the C function declarations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You should know about mangled function names and type-safe linkages.
Then you should explain how the extern &quot;C&quot; linkage specification statement turns that feature off during compilation so that the linker properly links function calls to C functions.
Another acceptable answer is &quot;I don't know.
We never had to do that.&quot;
Merely describing what a linker does would indicate to me that you do not understand the issue that underlies the question.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Explain the scope resolution operator.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The scope resolution operator permits a program to reference an identifier in the global scope that has been hidden by another identifier with the same name in the local scope.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The answer can get complicated.
It should start with &quot;colon-colon,&quot; however.
(Some readers had not heard the term, &quot;scope resolution operator,&quot; but they knew what :: means.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You should know the formal names of such things so that you can understand all communication about them.)
If you claim to be well into the design or use of classes that employ inheritance, you tend to address overriding virtual function overrides to explicitly call a function higher in the hierarchy.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>That's good knowledge to demonstrate, but address your comments specifically to global scope resolution.
Describe C++'s ability to override the particular C behavior where identifiers in the global scope are always hidden by similar identifiers in a local scope.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the differences between a C++ struct and C++ class?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The default member and base class access specifiers are different.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is one of the commonly misunderstood aspects of C++.
Believe it or not, many programmers think that a C++ struct is just like a C struct, while a C++ class has inheritance, access specifiers, member functions, overloaded operators, and so on.
Some of them have even written books about C++.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Actually, the C++ struct has all the features of the class.
The only differences are that a struct defaults to public member access and public base class inheritance, and a class defaults to the private access specifier and private base class inheritance.
Getting this question wrong does not necessarily disqualify you because you will be in plenty of good company.
Getting it right is a definite plus.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How many ways are there to initialize an int with a constant?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are two formats for initializers in C++ as shown in Example 1.
Example 1(a) uses the traditional C notation, while Example 1(b) uses constructor notation.
Many programmers do not know about the notation in Example 1(b), although they should certainly know about the first one.
Many old-timer C programmers who made the switch to C++ never use the second idiom, although some wise heads of C++ profess to prefer it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A reader wrote to tell me of two other ways, as shown in Examples 2(a) and 2(b), which made me think that maybe the answer could be extended even further to include the initialization of an int function parameter with a constant argument from the caller.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How does throwing and catching exceptions differ from using setjmp and longjmp?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The throw operation calls the destructors for automatic objects instantiated since entry to the try block.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Exceptions are in the mainstream of C++ now, so most programmers, if they are familiar with setjmp and longjmp, should know the difference.
Both idioms return a program from the nested depths of multiple function calls to a defined position higher in the program.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The program stack is &quot;unwound&quot; so that the state of the program with respect to function calls and pushed arguments is restored as if the calls had not been made.
C++ exception handling adds to that behavior the orderly calls to the destructors of automatic objects that were instantiated as the program proceeded from within the try block toward where the throw expression is evaluated.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It's okay to discuss the notational differences between the two idioms.
Explain the syntax of try blocks, catch exception handlers, and throw expressions.
Then specifically address what happens in a throw that does not happen in a longjmp.
Your answer should reflect an understanding of the behavior described in the answer just given.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One valid reason for not knowing about exception handling is that your experience is exclusively with older C++ compilers that do not implement exception handling.
I would prefer that you have at least heard of exception handling, though.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is not unusual for C and C++ programmers to be unfamiliar with setjmp/ longjmp.
Those constructs are not particularly intuitive.
A C programmer who has written recursive descent parsing algorithms will certainly be familiar with setjmp/ longjmp.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Others might not, and that's acceptable.
In that case, you won't be able to discuss how setjmp/longjmp differs from C++ exception handling, but let the interview turn into a discussion of C++ exception handling in general.
That conversation will reveal to the interviewer a lot about your overall understanding of C++.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is your reaction to this line of code? delete this; It's not a good practice.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A good programmer will insist that the statement is never to be used if the class is to be used by other programmers and instantiated as static, extern, or automatic objects.
That much should be obvious.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The code has two built-in pitfalls.
First, if it executes in a member function for an extern, static, or automatic object, the program will probably crash as soon as the delete statement executes.
There is no portable way for an object to tell that it was instantiated on the heap, so the class cannot assert that its object is properly instantiated.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Second, when an object commits suicide this way, the using program might not know about its demise.
As far as the instantiating program is concerned, the object remains in scope and continues to exist even though the object did itself in.
Subsequent dereferencing of the pointer can and usually does lead to disaster.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A reader pointed out that a class can ensure that its objects are instantiated on the heap by making its destructor private.
This idiom necessitates a kludgy DeleteMe kind of function because the instantiator cannot call the delete operator for objects of the class.
The DeleteMe function would then use &quot;delete this.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I got a lot of mail about this issue.
Many programmers believe that delete this is a valid construct.
In my experience, classes that use delete this when objects are instantiated by users usually spawn bugs related to the idiom, most often when a program dereferences a pointer to an object that has already deleted itself.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a default constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A constructor that has no arguments or one where all the arguments have default argument values.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you don't code a default constructor, the compiler provides one if there are no other constructors.
If you are going to instantiate an array of objects of the class, the class must have a default constructor.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a conversion constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A constructor that accepts one argument of a different type.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The compiler uses this idiom as one way to infer conversion rules for a class.
A constructor with more than one argument and with default argument values can be interpreted by the compiler as a conversion constructor when the compiler is looking for an object of the type and sees an object of the type of the constructor's first argument.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a copy constructor and an overloaded assignment operator?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A copy constructor constructs a new object by using the content of the argument object.
An overloaded assignment operator assigns the contents of an existing object to another existing object of the same class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>First, you must know that a copy constructor is one that has only one argument, which is a reference to the same type as the constructor.
The compiler invokes a copy constructor wherever it needs to make a copy of the object, for example to pass an argument by value.
If you do not provide a copy constructor, the compiler creates a member-by-member copy constructor for you.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You can write overloaded assignment operators that take arguments of other classes, but that behavior is usually implemented with implicit conversion constructors.
If you do not provide an overloaded assignment operator for the class, the compiler creates a default member-by-member assignment operator.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This discussion is a good place to get into why classes need copy constructors and overloaded assignment operators.
By discussing the requirements with respect to data member pointers that point to dynamically allocated resources, you demonstrate a good grasp of the problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When should you use multiple inheritance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are three acceptable answers: &quot;Never,&quot; &quot;Rarely,&quot; and &quot;When the problem domain cannot be accurately modeled any other way.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are some famous C++ pundits and luminaries who disagree with that third answer, so be careful.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let's digress to consider this issue lest your interview turn into a religious debate.
Consider an Asset class, Building class, Vehicle class, and CompanyCar class.
All company cars are vehicles.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Some company cars are assets because the organizations own them.
Others might be leased.
Not all assets are vehicles.
Money accounts are assets.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Real-estate holdings are assets.
Some real-estate holdings are buildings.
Not all buildings are assets.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Ad infinitum.
When you diagram these relationships, it becomes apparent that multiple inheritance is an intuitive way to model this common problem domain.
You should understand, however, that multiple inheritance, like a chainsaw, is a useful tool that has its perils, needs respect, and is best avoided except when nothing else will do.
Stress this understanding because your interviewer might share the common bias against multiple inheritance that many object-oriented designers hold.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a virtual destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The simple answer is that a virtual destructor is one that is declared with the virtual attribute.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The behavior of a virtual destructor is what is important.
If you destroy an object through a pointer or reference to a base class, and the base-class destructor is not virtual, the derived-class destructors are not executed, and the destruction might not be complete.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Explain the ISA and HASA class relationships.
How would you implement each in a class design?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A specialized class &quot;is a&quot; specialization of another class and, therefore, has the ISA relationship with the other class.
An Employee ISA Person.
This relationship is best implemented with inheritance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Employee is derived from Person.
A class may have an instance of another class.
For example, an Employee &quot;has a&quot; Salary, therefore the Employee class has the HASA relationship with the Salary class.
This relationship is best implemented by embedding an object of the Salary class in the Employee class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The answer to this question reveals whether you have an understanding of the fundamentals of object-oriented design, which is important to reliable class design.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are other relationships.
The USESA relationship is when one class uses the services of another.
The Employee class uses an object (cout) of the ostream class to display the employee's name onscreen, for example.
But if you get ISA and HASA right, you usually don't need to go any further.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When is a template a better solution than a base class?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When you are designing a generic class to contain or otherwise manage objects of other types, when the format and behavior of those other types are unimportant to their containment or management, and particularly when those other types are unknown (thus the genericity) to the designer of the container or manager class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Prior to templates, you had to use inheritance; your design might include a generic List container class and an application-specific Employee class.
To put employees in a list, a ListedEmployee class is multiply derived (contrived) from the Employee and List classes.
These solutions were unwieldy and error-prone.
Templates solved that problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the result of compiling this program in a C compiler? in a C++ compiler? int __ = 0; main() { int ___ = 2; printf(&quot;%d\n&quot;, ___ + __); } On GNU compiler both C and C++ give output as 2.
I believe other C++ compiler will complain &quot;syntax error&quot;, whereas C compiler will give 2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between C and C++ ?
Would you prefer to use one over the other ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>C is based on structured programming whereas C++ supports the object-oriented programming paradigm.Due to the advantages inherent in object-oriented programs such as modularity and reuse, C++ is preferred.
However almost anything that can be built using C++ can also be built using C.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the access privileges in C++ ?
What is the default access level ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The access privileges in C++ are private, public and protected.
The default access level assigned to members of a class is private.
Private members of a class are accessible only within the class and by friends of the class.
Protected members are accessible by the class itself and it's sub-classes.
Public members of a class can be accessed by anyone.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is data encapsulation ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Encapsulation is also known as data hiding.
The most important advantage of encapsulation is that it lets the programmer create an object and then provide an interface to the object that other objects can use to call the methods provided by the object.
The programmer can change the internal workings of an object but this transparent to other interfacing programs as long as the interface remains unchanged.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is inheritance ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Inheritance is the process of deriving classes from other classes.
In such a case, the sub-class has an 'is-a' relationship with the super class.
For e.g. vehicle can be a super-class and car can be a sub-class derived from vehicle.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In this case a car is a vehicle.
The super class 'is not a' sub-class as the sub- class is more specialized and may contain additional members as compared to the super class.
The greatest advantage of inheritance is that it promotes generic design and code reuse.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is multiple inheritance ?
What are it's advantages and disadvantages ?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Multiple Inheritance is the process whereby a sub-class can be derived from more than one super class.
The advantage of multiple inheritance is that it allows a class to inherit the functionality of more than one base class thus allowing for modeling of complex relationships.
The disadvantage of multiple inheritance is that it can lead to a lot of confusion when two base classes implement a method with the same name.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is polymorphism?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Polymorphism refers to the ability to have more than one method with the same signature in an inheritance hierarchy.
The correct method is invoked at run-time based on the context (object) on which the method is invoked.
Polymorphism allows for a generic use of method names while providing specialized implementations for them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What do the keyword static and const signify ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When a class member is declared to be of a static type, it means that the member is not an instance variable but a class variable.
Such a member is accessed using Classname.Membername (as opposed to Object.Membername).
Const is a keyword used in C++ to specify that an object's value cannot be changed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How is memory allocated/deallocated in C ?
How about C++ ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Memory is allocated in C using malloc() and freed using free().
In C++ the new() operator is used to allocate memory to an object and the delete() operator is used to free the memory taken up by an object.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>UML refers to Unified Modeling Language.
It is a language used to model OO problem spaces and solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a shallow copy and a deep copy ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A shallow copy simply creates a new object and inserts in it references to the members of the original object.
A deep copy constructs a new object and then creates in it copies of each of the members of the original object.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the differences between new and malloc?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between delete and delete[]?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the differences between a struct in C and in C++?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the advantages/disadvantages of using #define?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the advantages/disadvantages of using inline and const?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between a pointer and a reference?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When would you use a pointer?
A reference?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does it mean to take the address of a reference?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does it mean to declare a function or variable as static?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the order of initalization for data?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is name mangling/name decoration?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What kind of problems does name mangling cause?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you work around them?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the differences between a struct and a class in C++?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between public, private, and protected access?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* For class CFoo { }; what default methods will the compiler generate for you&gt;?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How can you force the compiler to not generate them?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the purpose of a constructor?
Destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a constructor initializer list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When must you use a constructor initializer list?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a: Constructor?
Destructor?
Default constructor?
Copy constructor?
Conversion constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does it mean to declare a... member function as virtual? member function as static? member varible as static? destructor as static?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can you explain the term &quot;resource acqusition is initialization?&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a &quot;pure virtual&quot; member function?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between public, private, and protected inheritance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is virtual inheritance?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is placement new?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between operator new and the new operator?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is exception handling?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Explain what happens when an exception is thrown in C++.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What happens if an exception is not caught?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What happens if an exception is throws from an object's constructor?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What happens if an exception is throws from an object's destructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are the costs and benefits of using exceptions?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When would you choose to return an error code rather than throw an exception?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a template?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is partial specialization or template specialization?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How can you force instantiation of a template?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is an iterator?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is an algorithm (in terms of the STL/C++ standard library)?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is std::auto_ptr?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is wrong with this statement? std::auto_ptr ptr(new char[10]); * It is possible to build a C++ compiler on top of a C compiler.
How would you do this?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Note: I've only asked this question once; and yes, he understood that I was asking him how cfront was put together.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What output does the following code generate?
Why?
What output does it generate if you make A::Foo() a pure virtual function?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>#include class A { public: A() { this-&gt;Foo(); } virtual void Foo() { cout Foo(); } virtual void Foo() { cout &lt;&lt; &quot;A::Foo()&quot; &lt;&lt; endl; } }; int main(int, char**) { B objectB; } p {return 0; } * What output does this program generate as shown?
Why?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>#include class A { public: A() { cout &lt;&lt; &quot;A::A()&quot; &lt;&lt; endl; } ~A() { cout &lt;&lt; &quot;A::~A()&quot; &lt;&lt; endl; throw &quot;A::exception&quot;; } }; class B { public: B() { cout &lt;&lt; &quot;B::B()&quot; &lt;&lt; endl; throw &quot;B::exception&quot;; } ~B() { cout &lt;&lt; &quot;B::~B()&quot;; } }; int main(int, char**) { try { cout &lt;&lt; &quot;Entering try...catch block&quot; &lt;&lt; endl; } p {A objectA; B objectB; } p {cout &lt;&lt; &quot;Exiting try...catch block&quot; &lt;&lt; endl; } catch (char* ex) { cout &lt;&lt; ex &lt;&lt; endl; } } p {return 0; } * C++ ( what is virtual function ?
what happens if an error occurs in constructor or destructor.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Discussion on error handling, templates, unique features of C++.
What is different in C++, ( compare with unix).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* I was given a c++ code and was asked to find out the bug in that.
The bug was that he declared an object locally in a function and tried to return the pointer to that object.
Since the object is local to the function, it no more exists after returning from the function.
The pointer, therefore, is invalid outside.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Questions for ANSI-Knowledgeable Applicants * What is a mutable member?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One that can be modified by the class even when the object of the class or the member function doing the modification is const.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Understanding this requirement implies an understanding of C++ const, which many programmers do not have.
I have seen large class designs that do not employ the const qualifier anywhere.
Some of those designs are my own early C++ efforts.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One author suggests that some programmers find const to be such a bother that it is easier to ignore const than to try to use it meaningfully.
No wonder many programmers don't understand the power and implications of const.
Someone who claims to have enough interest in the language and its evolution to keep pace with the ANSI deliberations should not be ignorant of const, however.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is an explicit constructor?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A conversion constructor declared with the explicit keyword.
The compiler does not use an explicit constructor to implement an implied conversion of types.
Its purpose is reserved explicitly for construction.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the Standard Template Library?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A library of container templates approved by the ANSI committee for inclusion in the standard C++ specification.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An applicant who then launches into a discussion of the generic programming model, iterators, allocators, algorithms, and such, has a higher than average understanding of the new technology that STL brings to C++ programming.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Describe run-time type identification.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The ability to determine at run time the type of an object by using the typeid operator or the dynamic_cast operator.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What problem does the namespace feature solve?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Multiple providers of libraries might use common global identifiers causing a name collision when an application tries to link with two or more such libraries.
The name-space feature surrounds a library's external declarations with a unique namespace that eliminates the potential for those collisions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This solution assumes that two library vendors don't use the same namespace, of course.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Are there any new intrinsic (built-in) data types?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Yes.
The ANSI committee added the bool intrinsic type and its true and false value keywords and the wchar_t data type to support character sets wider than eight bits.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Other apparent new types (string, complex, and so forth) are implemented as classes in the Standard C++ Library rather than as intrinsic types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Design * Draw a class diagram (UML) for a system.
(They described the system in plain english).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Which do you prefer, inheritance or delegation?
Why?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the difference between RMI and IIOP?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Java questions * http://www.javaprepare.com/quests/question.html Misc.
Questions (Design pattern, HTTP, OOP, SQL)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What's the difference between SQL, DDL, and DML?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What's a join?
An inner join?
An outer join?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What's a design pattern?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can you explain the singleton, vistor, facade, or handle class design pattern?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* When you do an ls -l, describe in detail everything that comes up on the screen.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tell me three ways to find an IP address on a Unix box.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a bubble sort.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Write a linked list.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Describe an object.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What does object-oriented mean to you.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Can you explain what a B tree is?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What's the difference between UDP and TCP?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What's the difference between a stack and a Queue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Do you know anything about the protection rings in the PC architecture?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How much hardware/Assembler/Computer Architecture experience do you have.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Explain final, finalize, and finally.
When the finalize is invoked?
How does GC work? etc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is your experience with Servlet and JSP?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is the Prototype design pattern?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* In a system that you are designing and developing, a lot of small changes are expected to be committed at the end of a method call (persisted to the DB).
If you don't want to query the database frequently. what would you do?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Give an example in which you will combine several design patterns, and explain how the system can benefit from that.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why would you apply design patterns (benefits)?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a two-phase commit?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What will happen if one of your web-server or appserver crashs during its execution?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are various problems unique to distributed databases * Describe the file system layout in the UNIX OS describe boot block, super block, inodes and data layout In UNIX, are the files allocated contiguous blocks of data a) no, they might be fragmented how is the fragmented data kept track of a) describe the direct blocks and indirect blocks in UNIX file system * what is disk interleaving * why is disk interleaving adopted * given a new disk, how do you determine which interleaving is the best * give 1000 read operations with each kind of interleaving determine the best interleaving from the statistics * draw the graph with performace on one axis and 'n' on another, where 'n' in the 'n' in n-way disk interleaving.
(a tricky question, should be answered carefully)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Design a memory management scheme.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What sort of technique you would use to update a set of files over a network, where a server contains the master copy.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>General questions * How did you get into computer science?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What kind of technical publications (print or online) do you read on a regular basis?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What was the last book you read (does not have to be job related!)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* If you could recommend one resource (book, web site, etc.) to a new software developer just out of school, what would it be?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What was the most interesting project that you worked on?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What was the most challenging project that you worked on?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* If you could have any job in the world, what would it be?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tell me about your favorite class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tell me about your favorite project [with lots of follow-up questions].
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tell me about a something you did that was unsuccessful, a project or class that didn't go well.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Do you prefer a structured or unstructured working environment.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* A chemist calls you up and says his Netscape isn't working.
What's wrong and how do you find out?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you prioritize multiple projects?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tell me about previous jobs?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are your greatest strengths and weaknesses?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tell us about yourself.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Where would you like to be in five years?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How do you see yourself fitting in to this company?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Do you have any questions for me?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why did you leave your last job.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Did you finance your own education?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Are you good with people?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Have you experience working on a group project?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How well do you know the windows menus?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What was the hardest program error for you to find and correct?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What did you find hardest when working with others in a project?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What is a tool or system that you learned on your own? i.e. not in a class room?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* As a developer, would you prefer to use application server?
Why?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How would go about finding out where to find a book in a library.
(You don't know how exactly the books are organized beforehand).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Tradeoff between time spent in testing a product and getting into the market first.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What to test for given that there isn't enough time to test everything you want to.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why do u think u are smart.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Questions on the projects listed on the Resume.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Do you want to know any thing about the company.( Try to ask some relevant and interesting question).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* How long do u want to stay in USA and why?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are your geographical preference?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What are your expectations from the job.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Interview Questions If you would like to contribute to the list or send feedback, please email Kundan Singh .
Microsoft Interview Questions. - Microsoft Jobs | Indeed.com Find Jobs Find Resumes Employers / Post Job Post your resume Sign in What: Where: Advanced Job Search       job title, keywords or company city, state, or zip Forums &gt; Company &gt; Microsoft   Microsoft Interview Questions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Get new comments by email My Email You can cancel email alerts at anytime.
Comments (10) Host It's always hard to know what to expect when going in for that interview -- and preparation can make all the difference.
What is the interview process like at Microsoft?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any advice on striking the right note?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply -Report abuse Shaw in Mason, Michigan 73 months ago Have a look at www.technical-interview.com I found useful for my interview - Was this comment helpful?
Yes (9)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply -Report abuse Westmin in Medford, New Jersey 73 months ago Depends on the position.
If your technical you better know your weaknesses.
Microsoft doesn't try to intimidate you, but they do ask detailed programming questions.
Be able to go to the whiteboard and code and/or answer logic scenarios.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The basic process, which can differ, is that you are placed in a room where 4 to 5 different people will come in and interview you.
The questions are range from behavior to technical depending on the position.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you are going for a programming position, expect to meet with at least 3 program managers.
If a weakness is spotted they typically pass that information on to the next person to see how weak you are in a certain area.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But again.
The goal is not to be a hardass.
And if you are weak in an area that doesn't mean you won't get the job - unless it directly applies to your job - but rather they want to make sure they know the candidate they are getting.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Was this comment helpful?
Yes (10)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>/No Reply -Report abuse ExContractor in Washington, District of Columbia 72 months ago Refresh your algorithm and data structure knowledge ( binary trees, hashes, doubly linked stuff etc).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Was this comment helpful?
Yes (7)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>/No Reply -Report abuse James in Holt, Michigan 72 months ago You need to be good on data structure and C++ classes - Was this comment helpful?
Yes (5)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>/No Reply -Report abuse insider in Broomfield, Colorado 70 months ago Data Structures, Data Structures, Data Structures.
Algorithms, Algorithms, Algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Ability to write code that not only works but has error handling as well.
Analytical ability, thinking under pressure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Was this comment helpful?
Yes (12)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply -Report abuse S in Canton, North Carolina 62 months ago insider in Broomfield, Colorado said: Data Structures, Data Structures, Data Structures.
Algorithms, Algorithms, Algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Ability to write code that not only works but has error handling as well.
Analytical ability, thinking under pressure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There is book called &quot;How To Move Mount Fuji&quot; and there is blog from microsoft recruiter.it is a nice blog.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you apply directly ,you need to be good at Data Structures, Data Structures, Data Structures.
Algorithms, Algorithms, Algorithms,c++ etc or you can do contract job and move tofull time .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Was this comment helpful?
Yes (1)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply -Report abuse CarneAsadaBrito in Seattle, Washington 56 months ago I currently work at Microsoft.
Here is my basic prep outline (for SDE loop):
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1. Get a copy of &quot;Programming Interviews Exposed: Secrets to Landing Your Next Job.&quot;
It will put you into the exact frame of mind you need to be in for the loop at MS 2.
Get a white board and practice, practice, practice.
Get comfortable displaying your technical ability on the white board.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Remember to always speak and guide your interviewer through your thought process.
NEVER have them just sitting there in silence.
3. They are very big on finding people who are a &quot;good fit&quot; on the team.
This will include how well you present your willingness to work with others and if they think you will do well/enjoy the work for the position.
Read up on and show an enthusiasm for the technical area you're interviewing for.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Was this comment helpful?
Yes (25)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply -Report abuse sds vcpp in Pune, India 49 months ago Puzzles asked during most of the interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>www.forum.technicalcontents.com/index.php?as=vevnb2ob92hpfrbj307umcfftxjlxvb4&amp;fid=35 - Was this comment helpful?
Yes (2)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply -Report abuse Madhuri in Bellevue, Washington 4 months ago You need to be refresh the data structure and algorithm concepts and basic algorithm related to linked lists, tree, stack, queue.
Need to know about Big O time notation.
What ever algo you write most certainly they will ask for time complexity so be prepared for that, also with some list of basic test cases for any algorithm.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Well at time of my interview I found this site ( www.qubeet.com ) very helpful.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>- Was this comment helpful?
Yes /No Reply -Report abuse » Sign in orcreate an account to comment on this topic.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Recent Microsoft Jobs * Software Development Engineer in Test II Job Redmond, WA * Senior Attorney Job Redmond, WA * HR MANAGER Job Redmond, WA * WAG Sr HR Manager Job Redmond, WA * Finance Strategic Planning Manager - IT Finance Job Redmond, WA View more Microsoft jobs .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Top Cities for Microsoft Jobs * Redmond, WA (1609) * Bellevue, WA (593) * Mountain View, CA (64) * Washington, DC (60) * San Francisco, CA (57) Find Microsoft Jobs by City, State, or ZIP View Microsoft salaries.
View Microsoft job trends.
For India jobs, visit Indeed India Jobs - Salaries - Trends - Forums - Browse Jobs - Tools - API - About - Contact ©2013 Indeed - Cookies Use, Privacy and Terms iTunes - Books - Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked by Vibrant Publishers * Apple * Store * Mac * iPod * iPhone * iPad * iTunes * Support Search * Nyheder * Hvad er iTunes Opening the iTunes Store.If iTunes doesn’t open, click the iTunes icon in your Dock or on your Windows desktop.Progress Indicator iTunes iTunes is the world's easiest way to organise and add to your digital media collection.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We are unable to find iTunes on your computer.
To download from the iTunes Store, get iTunes now.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Do you already have iTunes?
Click I Have iTunes to open it now.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>iTunes for Mac + PC Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked by Vibrant Publishers View More By This Author This book is available for download on your iPhone, iPad or iPod touch with iBooks and on your computer with iTunes.
Books must be read on an iOS device.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Description Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked is a perfect companion to stand ahead above the rest in today’s competitive job market.
Rather than going through comprehensive, textbook-sized reference guides, this book includes only the information required immediately for job search to build an IT career.
This book puts the interviewee in the driver's seat and helps them steer their way to impress the interviewer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>a) 200 Data Structures &amp; Algorithms Interview Questions, Answers and Proven Strategies for getting hired as an IT professional b) Dozens of examples to respond to interview questions c) 51 HR Questions with Answers and Proven strategies to give specific, impressive, answers that help nail the interviews d) 2 Aptitude Tests download available on www.vibrantpublishers.com View In iTunes * 59,00 kr * Available on iPhone, iPad, or iPod touch. * Category: Computers * Published: 04 March 2011 * Publisher: Vibrant Publishers * Print Length: 70 Pages * Language: English * Requirements: This book requires iBooks 1.3.1 or later and iOS 4.3.3 or later.
Books can only be viewed using iBooks on an iPad, iPhone (3G or later) or iPod touch (2nd generation or later).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Customer Ratings We have not received enough ratings to display an average for this book.
More by Vibrant Publishers * * Verbal Insights on the revised GRE General Test * * Analytical Writing Insights on the revised GRE General Test * * JAVA/J2EE Design Patterns Interview Questions You'll Most Likely Be Asked * * .NET Interview Questions You'll Most Likely Be Asked Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked is available for download from the iBookstore iBooks is an amazing way to download and read books on iPhone, iPad, or iPod touch.
You can download iBooks from the App Store.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Get iBooks Learn More About iBooks Data Structures &amp; Algorithms Interview Questions You'll Most Likely Be Asked is available for download from the iBookstore iBooks is an amazing way to download and read books on iPhone, iPad, or iPod touch.
You can download iBooks from the App Store.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Get iBooks Learn More About iBooks Bliv fan af iTunes og App Store siderne på Facebook for at få ekslusive tilbud, insiderviden om de nye programmer og mere.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Home * iTunes iTunes * Hent iTunes * Hvad er iTunes? * Hvad sker der i iTunes?
Mere iTunes * Digital musik for begyndere * AirPlay * iTunes-gaver * iTunes U * Support til iPod + iTunes * Tilgængelighed Partner med iTunes * Oversigt * Leverandører af indhold * Partnere * Marketing iTunes Store * Gennemse iTunes Store * Gennemse App Store * Køb musik nu * Køb iTunes-gavekort * Indløs iTunes-gavekort * New On iTunes * iTunes Plus * Musikønsker Køb i Apple Online Store , ring til 80 24 08 35, eller find en forhandler .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Oversigt * Sidste nyt * RSS feeds * Kontakt os * Copyright © 2012 Apple Inc.
Alle rettigheder forbeholdes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Betingelser * Beskyttelse af identitet * Brug af cookies Data Structures and Algorithms Interview questions SlideShare * Upload * Browse   * Popular * Downloaded * Liked * Videos * Featured * Go Pro * Login * Signup * Email * Like * Liked × * Save * Private Content * Embed * Loading embed code… * We have emailed the verification/download link to &quot;&quot;.
Login to your email and click the link to download the file directly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To request the link at a different email address, update it here.
Close Validation messages.
Success message.
Fail message.
Check your bulk/spam folders if you can't find our mail.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* * Loading   « ‹ › »     /1 * Related * More * Data Structure Puzzles 3355 views Like Liked * Data Structures and Algorithms Made Easy (For Interviews) 11700 views Like Liked * McAfee 209 views Like Liked * McAfee 234 views Like Liked * Semantic Puzzle 6127 views Like Liked * Interview Skills 10824 views Like Liked * Logic Puzzles 5008 views Like Liked * Manual testing interview question by INFOTECH 65598 views Like Liked * Case Interview Preparation Guide V5 1662 views Like Liked * Tactics For Improving Telephone Sales 739 views Like Liked * 05211201 Advanced Data Structures And Algorithms 2325 views Like Liked * Mac photo recovery manual 131 views Like Liked * Piecing the Social Media Strategy Puzzle 543 views Like Liked * Goldman Sachs Imterview Tips 2438 views Like Liked * Interview Basics 761 views Like Liked * PowerPoint Puzzle Template 20344 views Like Liked * Coding interview questions Like Liked * Peeling Design Patterns Like Liked * Pdp cover Like Liked * Career Monk Books Like Liked * Coding interview questions Like Liked * Peeling design patterns Like Liked * Data Structures and Algorithms Made Easy (Java)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Like Liked * Data Structures and Algorithms Made Easy (C/C++)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Like Liked * Data structures and algorithms made easy (in java)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Like Liked * Data Structures and Algorithms Made Easy Like Liked * Scope, binding, papameter passing techniques Like Liked * Coding interview questions 175 views Like Liked * Peeling Design Patterns 227 views Like Liked * Pdp cover 63 views Like Liked * Career Monk Books 212 views Like Liked * Coding interview questions 295 views Like Liked * Peeling design patterns 515 views Like Liked * Data Structures and Algorithms Made Easy (Java) 965 views Like Liked * Data Structures and Algorithms Made Easy (C/C++) 2343 views Like Liked * Data structures and algorithms made easy (in java) 2563 views Like Liked * Data Structures and Algorithms Made Easy 3716 views Like Liked * Scope, binding, papameter passing techniques 1067 views Like Liked * Data Structure Puzzles 3355 views Like Liked * Data Structures and Algorithms Made Easy (For Interviews) 11700 views Like Liked * Introductionto Analysis Of Algorithms 9 views Like Liked * Introductionto analysis of algorithms 3105 views Like Liked * Data Structures and Algorithms made Easy (Cover Page) 9645 views Like Liked Follow Author * * Tweet * * * Pin It * Wordpress + Follow Data Structures and Algorithms Interview questions by CareerMonk Publications on Apr 17, 2011 * 3,690 views ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>More… Programming puzzles for interviews Campus Preparation Degree/Masters Course Preparation Instructor’s GATE Preparation Big job hunters: Microsoft, Google, Amazon, Yahoo, Flip Kart, Adobe, IBM Labs, Citrix, Mentor Graphics, NetApp, Oracle, Webaroo, De-Shaw, Success Factors, Face book, McAfee and many more Reference Manual for working people Less Accessibility * View text version Categories * * Career Upload Details Uploaded via SlideShare as Adobe PDF Usage Rights © All Rights Reserved Flagged as inappropriate Flag as inappropriate Flag as inappropriate Select your reason for flagging this presentation as inappropriate.
If needed, use thefeedback form to let us know more details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>None Pornographic Defamatory Illegal/Unlawful Spam Other Terms Of Service Violation Cancel File a copyright complaint Statistics Likes 0 Downloads 93 Comments 0 Embed Views 0 Views on SlideShare 3,690 Total Views 3,690 * No comments yet * Notes on Slide 1 Subscribe to comments Post Comment Edit your comment Cancel More… Data Structures and Algorithms Interview questions Presentation Transcript * No transcript available. * Follow us on LinkedIn * Follow us on Twitter * Find us on Facebook * Find us on Google+ * Learn About Us * About * Careers * Our Blog * Press * Contact us * Help &amp; Support * Using SlideShare * SlideShare 101 * Terms of Use * Privacy Policy * Copyright &amp; DMCA * Community Guidelines * SlideShare on mobile * Pro &amp; more * Go PRO New * Business Solutions * Developers &amp; API * Developers Section * Developers Group * Engineering Blog * Blog Widgets © 2013 SlideShare Inc.
All rights reserved.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>RSS Feed * × This activity has also been shared with your LinkedIn network  Undo LinkedIn share  Settings * Edit your favorites Cancel Data Structures Interview Questions | Glassdoor * Home * Jobs * Companies * Salaries * Interviews Sign Up Sign In Write a Review United States * United States * Australia * Canada * India * United Kingdom Jobs Companies Salaries Interviews Search Advanced Glassdoor is your free inside look at data structures interview questions and reviews.
All 43 interview questions posted anonymously by employees and interview candidates.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structures Interview Questions (Posted anonymously by job candidates)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>43 Interview Questions: 1–10 of 43 Sort by   Relevance Most Answers Date Posted + Helpful Date Posted (new to old) Date Posted (old to new) Mar 28, 2013 Interview Question for Senior Software Development Engineer In Test (SDET) at Expedia :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Questions were mostly on data structure (binary search tree, linkedlist etc)&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Answer Question MoreExpedia Interview Questions and Reviews Jan 15, 2013 Interview Question for Principal Engineer at MeritTrac :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Java API to time the thread?&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Answers MoreMeritTrac Interview Questions and Reviews Nov 8, 2012 Interview Question for Software Engineer at Infibeam.com :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Some question on database indexing and how it is done.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Answers MoreInfibeam.com Interview Questions and Reviews Sep 3, 2012 Interview Question for Software Developer at Microsoft :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Round 2 You have n cities in a circle which have 1 gas station each which provide some amount of gas.
You also have the distances between set of 2 consecutive cities.
Assuming mileage 1 =&gt; 1 unit…&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Answer Question MoreMicrosoft Interview Questions and Reviews Aug 25, 2012 Interview Question for Software Development Engineer Intern (India) at Amazon.com :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Given a linked list , swap alternate nodes of linked list .
For eq: 1 2 3 4 will become 2 1 4 3  and 1 2 3 4 5 6 will become 2 1 4 3 6 5 .&quot;
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Answers MoreAmazon.com Interview Questions and Reviews Jul 6, 2012 Interview Question for Technical Associate at Wipro :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>0 of 1 found helpful “what are my technical degrees?&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Answers MoreWipro Interview Questions and Reviews Jun 28, 2012 Interview Question for Software Engineer at Mindfire Solutions :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“There will be a number of nodes.
How to prove that it's a double linked list&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Answers MoreMindfire Solutions Interview Questions and Reviews Jun 28, 2012 Interview Question for Software Engineer at Mahindra Satyam :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Write a program to Demonstrate FIFO in Data Structures&quot;
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Answers MoreMahindra Satyam Interview Questions and Reviews Jun 25, 2012 Interview Question for Wildnet Technologies Reviews Manager Client Side at Wildnet Technologies :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Did you handling any client before from out side of India. if yes in which country, and what was my responsibility?&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Answer Question MoreWildnet Technologies Interview Questions and Reviews Jun 20, 2012 Interview Question for Member Technical at Broadridge :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>“Tell me the best program you've coded all by yourself ( in C)&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Answers MoreBroadridge Interview Questions and Reviews * « * 1 * 2 * 3 * 4 * 5 * » You might also be interested in: Interview Questions Interviews by Company * Microsoft Interview * Apple Interview * Amazon.com Interview * Accenture Interview * Booz Allen Hamilton Interview Jobs by Title * Software Engineer Jobs * Manager Jobs * Project Manager Jobs * Senior Software Engineer Jobs * Consultant Jobs * Senior Consultant Jobs * Analyst Jobs * Associate Jobs * Director Jobs * Intern Jobs * Engineer Jobs * Business Analyst Jobs * Vice President Jobs * Product Manager Jobs * Program Manager Jobs Sorry, you need an account to use this feature.Sign In with Facebook or Sign Up Loading… Jobs Companies Salaries Interviews Search * About Us * Employers * Careers * Feedback * Help * * * * Browse: * Salaries by Job * Salaries by Company * Salaries by City * Reviews by Company * Interview Questions by Job * Interviews by Company * Jobs by Title * Jobs by Company * Jobs by City Copyright © 2008–2013, Glassdoor.
All Rights Reserved.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Your use of this service is subject to ourTerms of Use and Privacy &amp; Cookies Policy .
Glassdoor ® is a registered trademark of Glassdoor, Inc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Give other employees and job seekers your view from the inside Simply post an anonymous review for a recent interview experience or current/former employer.
Your post is anonymous – and if you're worried someone will be able to identify your review, you can even post without telling us your job title and location.Learn More .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Post a Review No thanks –I'll just look around Data Structures and Algorithms | Set 22 - GeeksforGeeks | GeeksforGeeks GeeksforGeeks A computer science portal for geeks Log in * Home * Q&amp;A * Interview Corner * Ask a question * Contribute * GATE * Algorithms * C * C++ * Books * About us * Arrays * Bit Magic * C/C++ Puzzles * Articles * GFacts * Linked Lists * MCQ * Misc * Output * Strings * Trees Data Structures and Algorithms | Set 22 March 31, 2010 Following questions have been asked in GATE CS 2005 exam.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1) A program P reads in 500 integers in the range [0..100] exepresenting the scores of 500 students.
It then prints the frequency of each score above 50.
What would be the best way for P to store the frequencies?
(a) An array of 50 numbers (b) An array of 100 numbers (c) An array of 500 numbers (d) A dynamically allocated array of 550 numbers Answer (a) An array of size 50 looks the best option to store number of students for each score.
We need to store frequencies of scores above 50.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can ignore scores below 50 and to index the scores above 50, we can subtract 50 from the score value/ 2) An undirected graph G has n nodes.
Its adjacency matrix is given by an n × n square matrix whose (i) diagonal elements are 0‘s and (ii) non-diagonal elements are 1‘s. which one of the following is TRUE?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(a) Graph G has no minimum spanning tree (MST) (b) Graph G has a unique MST of cost n-1 (c) Graph G has multiple distinct MSTs, each of cost n-1 (d) Graph G has multiple spanning trees of different costs Answer (c) If all non diagonal elements are 1, then every vertex is connected to every other vertex in the graph with an edge of weight 1.
Such a graph has multiple distinct MSTs with cost n-1.
See the below example.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The connected graph:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Below are three Minimum Spanning trees each of cost 2.0.
Minimum Spanning Tree 1 Minimum Spanning Tree 2 Minimum Spanning Tree 3 3) The time complexity of computing the transitive closure of a binary relation on a set of n elements is known to be: a) O(n) b) O(nLogn) c) O(n&lt;s&gt;(3/2)) d) O(n&lt;s&gt;3)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Answer (d) In mathematics, the transitive closure of a binary relation R on a set X is the smallest transitive relation on X that contains R.
If the original relation is transitive, the transitive closure will be that same relation; otherwise, the transitive closure will be a different relation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In computer science the concept of transitive closure can be thought of as constructing a data structure that makes it possible to answer reachability questions.
That is, can one get from node a to node other node b in one or more hops?
A binary relation tells you only that node a is connected to node b, and that node b is connected to node c, etc.
After the transitive closure is constructed in an O(1) operation one may determine that node c is reachable from node a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Warshall’s algorithm can be used to construct the Transitive closure of directed graphs ().
In Warshall’s original formulation of the algorithm, the graph is unweighted and represented by a Boolean adjacency matrix.
Then the addition operation is replaced by logical conjunction (AND) and the minimum operation by logical disjunction (OR).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>References: http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm http://en.wikipedia.org/wiki/Transitive_closure 4.
A Priority-Queue is implemented as a Max-Heap.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Initially, it has 5 elements.
The level-order traversal of the heap is given below: 10, 8, 5, 3, 2 Two new elements &quot;1‘ and &quot;7‘ are inserted in the heap in that order.
The level-order traversal of the heap after the insertion of the elements is: (a) 10, 8, 7, 5, 3, 2, 1 (b) 10, 8, 7, 2, 3, 1, 5 (c) 10, 8, 7, 1, 2, 3, 5 (d) 10, 8, 7, 3, 2, 1, 5 Answer (D)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Original Max-Heap is:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>10 / \ 8 5 / \ 3 2 After Insertion of 1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>10 / \ 8 5 / \ / 3 2 1 After Insertion of 7.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>10 / \ 8 7 / \ / \ 3 2 1 5 Please write comments if you find any of the answers/explanations incorrect, or you want to share more information about the topics discussed above.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You may also like following posts * Data Structures and Algorithms | Set 7 * Data Structures and Algorithms | Set 8 * Data Structures and Algorithms | Set 12 * Data Structures and Algorithms | Set 15 * Data Structures and Algorithms | Set 17 * * * Tweet * You may also like following posts * Data Structures and Algorithms | Set 7 * Data Structures and Algorithms | Set 8 * Data Structures and Algorithms | Set 12 * Data Structures and Algorithms | Set 15 * Data Structures and Algorithms | Set 17 Facebook Comments comments 5 comments so far * GeeksforGeeks says: February 24, 2012 at 1:28 PM @All: In question 1, 50 seems to be the correct answer.
We have updated the post with answer as 50.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * Kuushagra says: November 27, 2011 at 5:00 PM array of size 50 can be use with time complexity O(n).Could anything be better than this?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * raj says: November 9, 2011 at 7:01 PM /* Paste your code here (You may delete these lines if not writing code) */ the reason for talking the 100 integer space is that in 50 integer space you will not be able to count the correct frequency of 50 and if you did, complexity of program will increase...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * lord says: October 8, 2011 at 10:33 PM question no.
1 answer is a. why do we need to waste another 50 integer spaces???
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * shubham.velocity says: September 25, 2011 at 8:46 AM in question 1. since only the frequency of scores above 50 needs to be printed, an array of 50 numbers should be sufficient for it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>thus the answer to the question should be (a).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply Comment Click here to cancel reply.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Name (Required) Email (Required) Website URI Your Comment (Writing code? please paste your code between sourcecode tags) [sourcecode language=&quot;C&quot;] /* Paste your code here (You may delete these lines if not writing code) */ [/sourcecode]
Notify me of followup comments via e-mail.
You can alsosubscribe without commenting.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  * Loading * * Interview Experiences * Advanced Data Structures * Dynamic Programming * Greedy Algorithms * Backtracking * Pattern Searching * Divide &amp; Conquer * Graph * Mathematical Algorithms * Recursion * Java * * * Popular Posts * All permutations of a given string * Memory Layout of C Programs * Understanding “extern&quot; keyword in C * Median of two sorted arrays * Tree traversal without recursion and without stack!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Structure Member Alignment, Padding and Data Packing * Intersection point of two Linked Lists * Lowest Common Ancestor in a BST.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Check if a binary tree is BST or not * Sorted Linked List to Balanced BST * * Follow Subscribe * Recent Comments * praveen on Do we need forward declarations in Java?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* vandermonde on Check if a number is Palindrome * GeeksforGeeks on Dynamic Programming | Set 22 (Box Stacking Problem)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Hill Billy on Dynamic Programming | Set 22 (Box Stacking Problem)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* shek8034 on GS Labs Interview | Set 1 * Ravi on GS Labs Interview | Set 1 * maverick01 on Check if a number is Palindrome * vishwanath on Reverse a Linked List in groups of given size @geeksforgeeks,Some rights reserved        Contact Us Powered by WordPress &amp; MooTools , customized by geeksforgeeks team Technical Interview Questions | CareerCup CareerCup * Questions * Forum * Salaries * Resume Tips * RSS * Sign In ▼ * Sign In * View Cart Companies A9 (7) Abs india pvt. ltd.
(1) Accenture (29) Achieve Internet (25) Adap.tv (1) Adobe (343) ADP (1) Advisory Board Company (2) Agilent Technologies (20) Akamai (17) Alcatel Lucent (8) Altair Engineering (2) Altera (3) Amazon (3012) AMD (2) Amdocs (14) American Airlines (13) Apache Design (2) Apple (85) AppNexus (1) Argus (1) Aricent (16) Arista Networks (31) Aristocrat Gaming (1) Ask.com (1) Aspire Systems (1) ASU (1) Athena Health (2) Automated Traders Desk (7) Autonomy Zantaz (9) Axiom Sources (2) Baidu (2) Bank of America (11) Barclays Capital (16) Bazaarvoice (8) Big Fish (3) Binecs (2) Bloomberg LP (581) Blue Jeans (2) Bocada (6) Boeing (5) Booking.com (2) Brainware (3) BT (4) Cadence Inc (1) Capgemini (2) CapitalIQ (31) Caritor (2) Cavium Networks (2) CCN (1) CDAC-ACTS (3) CGI-AMS (5) Chegg.com (3) Chelsio Communications (5) Chicago Mercantile Exchange (10) Chronus (7) Cisco Systems (65) Citigroup (11) Citrix Online (10) Citrix System Inc (25) Cloudera (1) Cloudmere, Inc.
(1) CMC LTD (1) Cognzant Technology Solutions (7) Collective (5) Computer Associates (2) Continental (1) Credit Suisse (6) Crompton Greeves (1) CSC (3) CSR (1) Cubic Transportation Systems Limited (1) Daptiv (4) Defense Research and Development Organization of India (1) Deloitte Consulting LLP (7) Delve Networks (2) Denmin Group (4) Deshaw Inc (20) Did-it.com (3) Directi (45) Dover Organization (3) Ebay (58) EFI (8) Egenera (1) Electronic Arts (19) EMC (26) Epic Systems (151) Epsilon (1) Ericsson (7) Eterno Infotech Pvt Ltd (1) Expedia (69) EZ Prints (2) F5 Networks (5) Fabrix (1) Facebook (230) FactSet Research Systems, Inc (10) Fair Issac (3) Fiorano (1) FlexTrade (17) Flipkart (82) Fortinet (4) Future Advisor (1) Future Group, Mumbai (3) Fynanz (1) Gartner (2) Gayatri Vidya Parishad (1) GE (General Electric) (9) Georgia Pacific (1) Global Scholar (5) Globaltech Research (14) Gluster (6) GoDaddy (1) Gold-Tier (2) Goldman Sachs (173) Google (665) Green Bricks (2) Groupon (14) GrubHub (1) Guruji (2) Harman Kadron (1) HCL America (9) HCL (34) Headrun Technologies Pvt Ltd (2) Hewlett Packard (20) Hi5 (6) Highbridge Capital (17) Home Depot (7) Honeywell (2) Huawei (3) Hunan Asset (1) Ibibo (2) IBM (74) Iconologic (3) Igate (5) IIT-D (1) iLabs (4) Imagination Technologies (2) IMG (1) Infibeam (6) Infinium (1) Informatica (11) Infosys (28) Initto (1) InMobi (18) Intel (24) Interactive Brokers (4) Interactive Design (1) Internet Question (1) InterraIT (1) Intuit (8) ION idea (2) ION Trading (1) iPowerFour (1) Iron Mountain (1) Ittiam Systems (7) Ivycomptech (1) Izon (1) Jane Street (4) JDA (2) JP Morgan (16) Juniper Networks (5) Kalido (11) Kaseya (2) Kerkestavni Computecha Corporatci (1) Kingfisher Airlines (3) Kingfisher (1) Kiwox (1) Knewton (1) Knoa Software (2) Knowledge Systems (3) KnowledgeBase (1) Komli Media (3) Kpro Solutions (1) Lab126 (1) Labs247 (5) Laserfiche (4) LexisNexis (2) Lime Labs (1) Linkedin (38) LiteratureBay.com (2) Live Nation (2) LiveRamp (1) Lockheed Martin (7) London Investment Bank (1) Loyom (1) LSI (1) Lunatic Server Solutions (15) MAGMA (18) Manhattan associates (10) MAQ (2) MarketRX (11) Marvell (1) Mathworks (3) McAfee (12) Medio Systems (3) Megasoft (5) Mentor Graphics (2) Micron (7) Microsoft (1674) MicroStrategy (1) MIH (4) Mindtree Wireless India (2) Model N (2) Monitor Group (1) Morgan Stanley (61) Motorola (25) MounzIT (1) Moyer Group (3) mSpot (1) Myntra (3) Myntra.com (3) National Informatics Centre (1) National Instruments (17) Ness (2) NetApp (92) Netflix (1) Nexabion (1) Nextag (2) Nisum Technologies (4) Nivio Technologies (1) Nomura (1) Novell (3) NVIDIA (185) One97 (9) OnMobile (2) Oracle (43) Overstock.com (11) Palantir Technology (1) PayPal (17) Pega (6) Persistent Systems (3) Philips (2) Pinterest (4) PJ Pvt Ltd (1) Pocketgems (2) Polaris (12) PRDS (1) Progress (1) QNX (1) QSI HealthCare (5) Qualcomm (202) Rapleaf (6) Raytheon (4) Real Networks (7) Rebellion Research (8) RelQ Software Company Limited (8) Research In Motion (17) Ricoh (1) RightC (1) Riverbed (35) Roamware (1) RoviCorp (1) Roxar (1) RSA (8) Sabre Holdings (7) Safenet (2) Sage Software (17) Salesforce (10) Samsung (45) Sap Labs (8) Sapient Corporation (5) SAS Research (5) Schneider Electric (5) Search Media (2) Sears Holding (1) Shutterfly (5) Siemens (9) SIG (Susquehanna International Group)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(5) SignPost (2) Sileria Inc.
(1) Singapore Technologies (1) Socialcam (1) Softchoice (11) Sonoa Systems (12) Sophos (25) SRMicro Info Systems (1) Starent Networks (1) StartUp (3) SunGard (6) SWAPTON SOLUTIONS (1) Symantec (31) Symphony Services (9) SynCfusion (1) Synopsys R&amp;D (7) Take Two Interactive (2) Tally Solutions (1) TATA Consultancy Services (3) Tech India Line (1) Techlogix (1) Tejas Networks (9) Tellabs (6) Texas Instruments (5) The Digital Group (1) The Royal Bank of Scotland Chennai (1) thePlatform (3) Thirdware Technologies (1) Thomson Reuters (4) ThoughtWorks (7) TP (1) TRG (1) Tribal Fusion (6) Trilogy (1) Turing Software (2) Twitter (16) Two Sigma (5) United HealthGroup (4) Urban Touch (3) USAA (5) USInternetworking (2) VANS (1) Vanu (4) Vdopia (3) Video Gaming Technologies (1) Vizury (1) VMWare Inc (72) Walmart Labs (16) Watchguard (1) Wichorus (1) Wipro Technologies (11) Wireless Generation (3) WorksApp (2) X (2) Xurmo (2) Yahoo (215) Yatra.com (10) Yelp (1) Zillow (9) Zoosk (1) ZS Associates (2) Zycus (3) Zynga (12) Question Topics Algorithm (3493) Android (3) Application / UI Design (179) Arrays (276) Assembly (3) Automata (3) Behavioral (203) Bit Manipulation (66) Brain Teasers (288) C (504) C++ (457) C# (56) Cache (4) Coding (753) Compiler (1) Computer Architecture &amp; Low Level (103) Data Mining (9) Data Structures (537) Database (132) Debugging (24) Distributed Computing (11) Dynamic Programming (11) Experience (136) Front End Web Development (17) General Questions and Comments (122) Graphics (3) Hash Table (30) Ideas (58) Java (453) JavaScript (2) Knowledge Based (11) Large Scale Computing (24) Linked Lists (163) Linux Kernel (81) Math &amp; Computation (77) Matrix (21) Networking / Web / Internet (75) Object Oriented Design (232) OODesign (2) Operating System (154) Operators (1) Perl (20) PHP (26) Probability (15) Problem Solving (2) Python (6) Questions YOU should ask!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(5) Sales (9) Security (18) Sets (3) Sorting (23) SQL (5) Stacks (10) String Manipulation (108) System Administration (5) System Design (58) Terminology &amp; Trivia (294) test (3) Testing (201) Threads (72) Trees and Graphs (172) Unix (16) XML (10) Job Titles Accountant (10) Analyst (79) Android test engineer (1) Applications Developer (83) Area Sales Manager (3) Associate (19) Computer Scientist (33) Consultant (24) Developer Program Engineer (341) Development Support Engineer (59) Field Sales (16) Financial Application Engineer (3) Financial Software Developer (274) Firmware Engineer (1) Front-end Software Engineer (28) Graphics Programmer (3) Intern (20) iOS Developer (3) Java Developer (60) Member Technical Staff (17) MTS (14) Network Engineer (3) Personnel (3) Principal Software Engineer (2) Product Security Engineer (3) Production Engineer (14) Program Manager (83) Quality Assurance Engineer (40) Research Scientist (1) Reverse Engineering and System Developer (3) Scientific Officer (1) SDE-2 (6) SDE1 (25) Security Analyst (1) Senior Software Development Engineer (19) Site Reliability Engineer (22) Software Analyst (7) Software Architect (4) Software Development Manager (25) Software Engineer / Developer (7003) Software Engineer in Test (723) Software Engineer Intern (12) Software Trainee (6) Solutions Architect (4) Student (3) System Administrator (20) Systems Design Engineer (8) Tech Lead (4) Technical Architect (10) Technical Support Engineer (4) Testing / Quality Assurance (105) Virus Researcher (25) Web Developer (33) Add Question CareerCup is the world's biggest and best source for software engineering interview preparation.See all our resources .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Disable Chat: To disable chat, go to the top right of the &quot;buddy list&quot;, click the settings icon, and then click &quot;Turn Off.&quot;
How Can You Help CareerCup?
Find Out When Gayle / CareerCup / Cracking the Coding Interview is in Your City Top Companies * Amazon (3013) * Microsoft (1675)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Google (666) * Bloomberg LP (581)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Adobe (345) * Facebook (230)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Yahoo (215) * Qualcomm (202)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* NVIDIA (185) * Goldman Sachs (174)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Companies » Top Jobs * Software Engineer / Dev...
(7008)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Software Engineer in Te...
(724)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Developer Program Engin...
(341)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Financial Software Deve...
(274)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Testing / Quality Assur...
(105)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Program Manager (84)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Applications Developer (83)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Analyst (79) * Java Developer (60)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Development Support Eng...
(59)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Jobs » Top Topics * Algorithm (3493)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Coding (753) * Data Structures (537)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* C (504) * C++ (457)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Java (453) * Terminology &amp; Trivia (294)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Brain Teasers (288)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Arrays (276) * Object Oriented Design (232)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* More Topics » What's Going On Report a Bug or Issue Books is a comprehensive book walking you through every aspect of getting a job at a top tech company, while focuses on software engineering interviews.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Videos CareerCup's interview videos give you a real-life look at technical interviews.
In these unscripted videos, watch how other candidates handle tough questions and how the interviewer thinks about their performance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Resume Review Most engineers make critical mistakes on their resumes -- we can fix your resume with our custom resume review service.
And, we use fellow engineers as our resume reviewers, so you can be sure that we &quot;get&quot; what you're saying.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Mock Interviews Our Mock Interviews will be conducted &quot;in character&quot; just like a real interview, and can focus on whatever topics you want.
All our interviewers have worked for Microsoft, Google or Amazon, you know you'll get a true-to-life experience.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learn More Information * Team, Contact &amp; About * Salaries * RSS * Behavioral Preparation Grid * Sample Resumes Products * * * CtCI iPhone App * Videos Services * Mock Interviews * Resume Review * Wiser Profile (LinkedIn Review) Social * CareerCup on Facebook * CtCI on Facebook * Gayle McDowell on Facebook * CareerCup on Twitter * Gayle on Twitter * CareerCup Blog CareerCup.com © 2012 Data Structures and Algorithms For GATE: Solutions to all previous ...
SlideShare * Upload * Browse   * Popular * Downloaded * Liked * Videos * Featured * Go Pro * Login * Signup * Email * Like * Liked × * Save * Private Content * Embed * Loading embed code… * We have emailed the verification/download link to &quot;&quot;.
Login to your email and click the link to download the file directly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To request the link at a different email address, update it here.
Close Validation messages.
Success message.
Fail message.
Check your bulk/spam folders if you can't find our mail.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* * Loading   ‹ ›     /15     * Related * More * Lect 8(pointers) Zaheer Abbas 490 views Like Liked * Lect 9(pointers) Zaheer Abbas 322 views Like Liked * Ch6 pointers (latest) 393 views Like Liked * Pointer in c++ part2 554 views Like Liked * Chp3(pointers ref) 176 views Like Liked * Pointers in C/C++ 172 views Like Liked * Chapter 13.1.8 90 views Like Liked * Introduction to pointers and memory management in C 8259 views Like Liked * 09 1 Pointers 906 views Like Liked * Scope, binding, papameter passing techniques 1067 views Like Liked * Unit4 Slides 986 views Like Liked * Pointers 180 views Like Liked * Pointers (Pp Tminimizer) 2764 views Like Liked * Pointers in C 1526 views Like Liked * Lecturer23 pointersin c.ppt 3450 views Like Liked * C++ Beginner S Guide C H04 1139 views Like Liked * Advanced+pointers 625 views Like Liked * oop Lecture 17 164 views Like Liked * Savitch Ch 09 689 views Like Liked * Savitch ch 09 125 views Like Liked * Ponters 348 views Like Liked * Ponters 419 views Like Liked * Pointer 1970 views Like Liked * C programming session 05 645 views Like Liked * Unit3 C 260 views Like Liked * C Language Unit-3 687 views Like Liked * C material 990 views Like Liked * L03-ajc-C-arrays 527 views Like Liked * Pointers 329 views Like Liked * Pointers 250 views Like Liked * Pointers c imp 265 views Like Liked * Pointers 109 views Like Liked * The Function Pointer Tutorials 1073 views Like Liked * C interview-questions-techpreparation 118 views Like Liked * C interview-questions-techpreparation 119 views Like Liked * C interview-questions-techpreparation 241 views Like Liked * C tutorial[1] 340 views Like Liked * The ultimate C Like Liked * Data structures and algorithms made easy Like Liked * Peeling Design Patterns Like Liked * The ultimate C 125 views Like Liked * Data structures and algorithms made easy 1834 views Like Liked * Peeling Design Patterns 171 views Like Liked * Coding interview questions 91 views Like Liked * Data structures and algorithms made easy java 951 views Like Liked Follow Author * * Tweet * * * Pin It * Wordpress + Follow Data Structures and Algorithms For GATE: Solutions to all previous GATE questions since 1991 by CareerMonk Publications on Oct 13, 2012 * 1,864 views Data structures and algorithms for gate More… Data structures and algorithms for gate Less Accessibility * View text version Categories * * Books Upload Details Uploaded via SlideShare as Adobe PDF Usage Rights © All Rights Reserved Flagged as inappropriate Flag as inappropriate Flag as inappropriate Select your reason for flagging this presentation as inappropriate.
If needed, use thefeedback form to let us know more details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>None Pornographic Defamatory Illegal/Unlawful Spam Other Terms Of Service Violation Cancel File a copyright complaint Statistics Likes 0 Downloads 68 Comments 0 Embed Views 0 Views on SlideShare 1,864 Total Views 1,864 * No comments yet * Notes on Slide 1 Subscribe to comments Post Comment Edit your comment Cancel More… Data Structures and Algorithms For GATE: Solutions to all previous GATE questions since 1991 Document Transcript * DATA STRUCTURES ANDALGORITHMS FOR GATE-To All Hard Working GATE Aspirants * Copyright© by All rights reserved.
Designed byCopyright© Career Monk Publications.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All rights reserved.All rights reserved.
No part of this book may be reproduced in any form or by any electronic or mechanicalmeans, including information storage and retrieval systems, without written permission from the publisher orauthor * AcknowledgementsI would like to express my gratitude to many people who saw me through this book, to all those who providedsupport, talked things over, read, wrote, offered comments, allowed me to quote their remarks and assisted inthe editing, proofreading and design.
In particular, I would like to thank the following individuals. [ ], for his encouragement during my stay at . [ ], [ , ] forspending their valuable time in reviewing the book, suggestions and encouragement. &amp; [Founders of ], for approaching me for teaching at their training centers. , and have contributed greatly to the quality of this book.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I thank all offor your help and suggestions.Last but not least, I would like to thank of , &amp; [ ], [ of ], [ , ],[ ], [ , ]&amp; for helping me andmy family during our studies. - M-Tech, Founder of * A stone is broken by the last stroke.
This does not mean that first stroke was useless.
Success is a result of continuous daily effort. --Stand up, be bold, be strong.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Take the whole responsibility on your own shoulders, and know that you are the creator of your own destiny. -- * PrefaceDear Reader,Please Hold on!
I know many people do not read preface.
But I would like to strongly recommend readingpreface of this book at least.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This preface has from regular prefaces.This book assumes you have some basic knowledge about computer science.
Main objective of the book is not togive you the theorems and proofs about and .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I have followed a pattern ofimproving the problem solutions with different complexities (for each problem, you observe multiple solutionswith different improved complexities).
Basically, it’s an enumeration of possible solutions.
With this approach,even if we get a new question it gives us a way to think about all possible solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For all other topics, it willact as a refreshment.
This book is very much useful for interview preparation, competitive exams preparation,campus preparations.This book is aimed for GATE students.
We have tried to solve all problems related to and from the last twenty years papers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Each solution has explanation associated with it and this givesthe confidence for readers about the correctness of the solutions.
As a if you read complete bookwith good understanding, I am sure you will challenge the interviewers and that is the objective of this book.This book is very much useful for the of and during their academicpreparations.
All the chapters of this book contain theory and their related problems as many as possible.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If youread as a preparing for competition exams for Computer Science/Information Technology], the contentof this book covers the topics in full details.
While writing the book, an intense care has beentaken to help students who are preparing for these kinds of exams.In all the chapters you will see more importance given to and analyzing them instead ofconcentrating more on theory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For each chapter, first you will see the basic required theory and then followedby problems.For many of the problems, solutions are provided with different complexities.
We start with solution and slowly move towards the possible for that problem.
For each problemwe will try to understand how much time the algorithm is taking and how much memory the algorithm istaking.It is that, at least one complete reading of this book is required to get full understanding of allthe topics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the subsequent readings, you can directly go to any chapter and refer.
Even though, enoughreadings were given for correcting the errors, due to human tendency there could be some minor typos in thebook.
If any such typos found, they will be updated at .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I request you to constantlymonitor this site for any corrections, new problems and solutions.
Also, please provide your valuablesuggestions at: .
Wish you all the best.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Have a nice reading. - M-Tech, Founder of * ForewordWith the availability of different books on Data Structures and/or Algorithms, their design and analysis with ageneral or language based orientation; one would be in gross error to think that this book is one more to the list.Keeping in view the GATE and other competitive exams perspective in mind and critical time managementrequirement, the author has taken the approach of embedding theoretical concepts through efficient problemsolving.The different topics related to data structures and algorithms and their intricate interdependency have beendealt with comprehensive eloquence and subtle clarity.The topics coverage in the book spans from primitive to advanced data structures, their characteristics, theirspace and time complexity analysis, the different algorithmic paradigms/classifications, application areas andproblems and their analysis.Each topic is explained through a problem solving approach so that at the end, the reader is well equipped to beable to apply to any type of problem solving requirement and distinctly choose one strategy or type from theother.The book also includes solved GATE questions of last twenty years which works as a mock exam practice planefor the reader.
It is a very handy and must have book for any reader aiming for competitive exams of alluniversities and boards and as well as for campus recruitment.
It can also serve as a reference text-book forsoftware developers, who wanted to design and implement efficient algorithms. . , . * Table of Contents1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Programming Basics ---------------------------------------------------------------------- 92.
Introduction ----------------------------------------------------------------------------- 303.
Recursion and Backtracking ------------------------------------------------------------ 524.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Linked Lists ----------------------------------------------------------------------------- 575.
Stacks ------------------------------------------------------------------------------------ 936.
Queues---------------------------------------------------------------------------------- 1137.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Trees ------------------------------------------------------------------------------------ 1238.
Priority Queue and Heaps ------------------------------------------------------------- 1939.
Disjoint Sets ADT ---------------------------------------------------------------------- 21110.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Graph Algorithms ---------------------------------------------------------------------- 22011.
Sorting ---------------------------------------------------------------------------------- 25912.
Searching ------------------------------------------------------------------------------- 28013.
Selection Algorithms ------------------------------------------------------------------- 30414.
Symbol Tables -------------------------------------------------------------------------- 31115.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Hashing --------------------------------------------------------------------------------- 31316.
String Algorithms ---------------------------------------------------------------------- 32917.
Algorithms Design Techniques -------------------------------------------------------- 35018.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Greedy Algorithms --------------------------------------------------------------------- 35319.
Divide and Conquer Algorithms ------------------------------------------------------ 36320.
Dynamic Programming ---------------------------------------------------------------- 37721.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Complexity Classes --------------------------------------------------------------------- 41522.
Miscellaneous Concepts --------------------------------------------------------------- 422 * Other Titles by Success keys for Big Job Hunters Data Structures and Algorithms Made Easy (C/C++) Data Structures and Algorithms Made Easy in Java Coding Interview Questions Peeling Design Patterns * Data Structures and Algorithms For GATE Programming Basics Chapter-1 PROGRAMMING BASICSThe objective of this chapter is to explain the importance of analysis of algorithms, their notations, relationships andsolving as many problems as possible.
We first concentrate on understanding the basic elements of algorithms,importance of analysis and then slowly move towards analyzing the algorithms with different notations and finally theproblems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>After completion of this chapter you should be able to find the complexity of any given algorithm(especially recursive functions).1.1 VariablesBefore going to the definition of variables, let us relate them to old mathematical equations.
All of us have solvedmany mathematical equations since childhood.
As an example, consider the below equation:We don’t have to worry about the use of above equation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The important thing that we need to understand is, theequation has some names ( and ) which hold values (data).
That means, the ( and ) are the place holdersfor representing data.
Similarly, in computer science we need something for holding data and are thefacility for doing that.1.2 Data typesIn the above equation, the variables and can take any values like integral numbers ( , etc...), real numbers( etc…) or just and .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To solve the equation, we need to relate them to kind of values they can take and is the name being used in computer science for this purpose.A in a programming language is a set of data with values having predefined characteristics.
Examples ofdata types are: integer, floating point unit number, character, string etc...Computer memory is all filled with zeros and ones.
If we have a problem and wanted to code it, it’s very difficult toprovide the solution in terms of zeros and ones.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To help users, programming languages and compilers are providing thefacility of data types.For example, takes bytes (actual value depends on compiler), takes bytes etc… This says that, inmemory we are combining bytes ( bits) and calling it as .
Similarly, combining bytes ( bits) andcalling it as .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A data type reduces the coding effort.
Basically, at the top level, there are two types of data types:  System defined data types (also called data types)  User defined data typesSystem defined data types (Primitive data types)Data types which are defined by system are called data types.
The primitive data types which are providedby many programming languages are: int, float, char, double, bool, etc… The number of bits allocated for eachprimitive data type depends on the programming languages, compiler and operating system.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For the same primitivedata type, different languages may use different sizes.
Depending on the size of the data types the total available values(domain) will also changes.
For example, “ &quot; may take bytes or bytes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If it takes bytes ( bits) then the total1.1 Variables 9 * Data Structures and Algorithms For GATE Programming Basicspossible values are - to + (- -1).
If it takes, bytes ( bits), then the possible values arebetween to (- -1).
Same is the case with remaining data types too.User defined data typesIf the system defined data types are not enough then most programming languages allows the users to define their owndata types called as user defined data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Good example of user defined data types are: structures in andclasses in .For example, in the below case, we are combining many system defined data types and called it as user defined datatype with name “ &quot;.
This gives more flexibility and comfort in dealing with computer memory. struct newType { int data1; float data 2; … char data; };1.3 Data StructureBased on the above discussion, once we have data in variables, we need some mechanism for manipulating that data tosolve problems. is a particular way of storing and organizing data in a computer so that it can be usedefficiently.
That means, a is a specialized format for organizing and storing data.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>General datastructure types include arrays, files, linked lists, stacks, queues, trees, graphs and so on.
Depending on the organizationof the elements, data structures are classified into two types: 1) Elements are accessed in a sequential order but it is not compulsory to store all elements sequentially (say, Linked Lists). : Linked Lists, Stacks and Queues.
2) : Elements of this data structure are stored/accessed in a non-linear order. : Trees and graphs.1.4 Abstract Data Types (ADTs)Before defining abstract data types, let us consider the different view of system defined data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We all know that,by default, all primitive data types (int, float, et..) supports basic operations like addition, subtraction etc… The systemis providing the implementations for the primitive data types.
For user defined data types also we need to defineoperations.
The implementation for these operations can be done when we want to actually use them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>That means, ingeneral user defined data types are defined along with their operations.To simplify the process of solving the problems, we generally combine the data structures along with their operationsand are called (ADTs).
An ADT consists of parts: 1.
Declaration of data 2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Declaration of operationsCommonly used ADTs : Linked Lists, Stacks, Queues, Priority Queues, Binary Trees, Dictionaries, Disjoint Sets(Union and Find), Hash Tables, Graphs, and many other.
For example, stack uses LIFO (Last-In-First-Out) mechanismwhile storing the data in data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The last element inserted into the stack is the first element that gets deleted.Common operations of it are: creating the stack, pushing an element onto the stack, popping an element from stack,finding the current top of the stack, finding number of elements in the stack etc...While defining the ADTs do not care about implementation details.
They come in to picture only when we want touse them.
Different kinds of ADTs are suited to different kinds of applications, and some are highly specialized tospecific tasks.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By the end of this book, we will go through many of them and you will be in a position to relate the datastructures to the kind of problems they solve.1.3 Data Structure 10 * Data Structures and Algorithms For GATE Programming Basics1.5 Memory and Variables Address Memory Value 0 Memory Value 1 2 ... … … … …First let’s understand the way memory is organized in a computer.
We can treat the memory as an array of bytes.
Eachlocation is identified by an address (index to array).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In general, the address is not a valid memory location.
It isimportant to understand that the address of any byte (location) in memory is an integer.
In the below diagram valuedepends on the main memory size of the system.To read or write any location, CPU accesses it by sending its address to the memory controller.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When we create avariable (for example, in : ), the compiler allocates a block of contiguous memory locations and its size dependson the size of the variable.
The compiler also keeps an internal tag that associates the variable name with the addressof the first byte allocated to it (sometimes called as ).
So when we want to access that variable like this: , the compiler knows where that variable is located and it writes the value .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value 0 Memory Value 1 2 ...
X … … 2000 …Size of a Variable: operator is used to find size of the variable (how much memory a variable occupies).
Forexample, on some computers, ( ) gives the value .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means an integer needs contiguous bytes in memory.If the address of would be , then the actual memory locations used by are: and .Address of a Variable: In language, we can get the address of a variable using operator ( ).
The belowcode prints the address of variable.
In general, addresses are printed in hexadecimal as they are compact and alsoeasy to understand if the addresses are big.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value 0 Memory Value X 1 2 ...
&amp;XAddress of X … … is 2000 2000 … int X; printf(&quot;The address is: %un&quot;, &amp;X);1.5 Memory and Variables 11 * Data Structures and Algorithms For GATE Programming Basics1.6 PointersPointers are also variables which can hold the address of another variable.Declaration of Pointers: To declare a pointer, we have to specify the type of the variable it will point to.
That meanswe need to specify the type of the variable whose address it’s going to hold.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The declaration is very simple.
Let us seesome examples of pointer declarations below: int *ptr1; float *ptr2; unsigned int *ptr3; char *ptr4; void *ptr5;Here is a pointer that can point to an variable, can point to a , to an , andto a .
Finally is a pointer that can point to anything.
These pointers are called pointers, and there aresome restrictions on what we can do with void pointers.Pointers Usage: As we said, pointers hold addresses.
That means, we can assign the address of a variable to it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let usconsider the below sample code: int X = 10; int *ptr = &amp;X;Here, we first declare an integer named and initialize it to the value .
Then we create a pointer to namedand assign the address of to it.
This is called, “ .&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A common operation we can dowith a pointer is what is called and it is a way to access the contents of the memory that it points to.
Theindirection operator is represented by the asterisk symbol.
Do not confuse this operator with the use of the sameasterisk symbol in the declaration of pointers, they are not the same thing.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value &amp;ptrAddress of 0 Memory Value ptr is 2 1 ptr 2 2000 … … &amp;XAddress of X X 2000 is 2000 …If we would like to access the contents of the memory where points to, we would do it like this: Let’s see asmall code that shows pointer indirections. int X = 10; int *ptr = &amp;X; printf(&quot;X contains the value %dn&quot;, X); printf(&quot;ptr points to %pn&quot;, ptr); printf(&quot;there lies the value %dn&quot;, *ptr); *ptr = 25; printf(&quot;now X contains the value %dn&quot;, X);Here we first declare and just like before.
Then we print (which is ), followed by , i.e., the contents ofthe variable which is an address; the address of .
And finally we print , which is the value of the memorylocation where points to (again 10, since it points to the location occupied by the variable in memory).Finally we change the contents of the location where points to by writing , this means assign the value to wherever is pointing to.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Note that when we do that, what actually happening is modifying the value of .1.6 Pointers 12 * Data Structures and Algorithms For GATE Programming BasicsThis is because, holds the address of , and changing the contents of the memory at that address changes the valueof .One limitation of pointers, i.e. pointers that can point to any type, is that they cannot be .
This isbecause of the fact that each variable type takes different amount of memory.
On a -bit computer for exampleusually an int needs bytes, while a short bytes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So in order to read the actual value stored there, the compiler has toknow how many consecutive memory locations to read in order to get the full value.Pointer Manipulation: Another very useful thing we can do with pointers is to perform arithmetic operations on them.This might be obvious to the careful reader, since we said that pointers are just integers.
However, there are a fewsmall differences on pointer arithmetic that make their use even more intuitive and easy.
Try the following code: char *cptr = (char*)2; printf(&quot;cptr before: %p &quot;, cptr); cptr++; printf(&quot;and after: %pn&quot;, cptr);We declare a pointer named and assign the address to it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We print the contents of the pointer (i.e. the address ), increment it, and print again.
Sure enough the first time it prints and then , and that was exactly what weexpected.
However try this one as well: int *iptr = (int*)2; printf(&quot;iptr before: %p &quot;, iptr); iptr++; printf(&quot;and after: %pn&quot;, iptr);Now the output, on my computer, is before: and after: Why does this pointer point to the address 6 afterincremented it by one and not to as the previous pointer?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The answer lies with what we said about thevariables.
An int is bytes on my computer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means that if we have an int at the address , then that int occupiesthe memory locations and .
So in order to access to the next int we have to look at the address and .Thus when we add one to a pointer, it is not the same as adding one to any integer, it means give me a pointer to thenext variable which for variables of type int, in this case, is bytes ahead.The reason that in the first example with the char pointer, the actual address after incrementing, was one more thanthe previous address is because the size of char is exactly .
So the next char can indeed be found on the next address.Another limitation of void pointers is that we cannot perform arithmetic on them, since the compiler cannot knowhow many bytes ahead is the next variable located.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So void pointers can only be used to keep addresses that we have toconvert later on to a specific pointer type, before using them.Arrays and Pointers: There is a strong connection between arrays and pointers.
So strong in fact, that most of the timewe can treat them as the same thing.
The name of an array can be considered just as a pointer to the beginning of amemory block as big as the array.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So for example, making a pointer point to the beginning of an array is done inexactly the same way as assigning the contents of a pointer to another: short *ptr; short array[10]; ptr = array;and then we can access the contents of the array through the pointer as if the pointer itself was that array.
Forexample this: is perfectly legal.
Furthermore, we can treat the array itself as a pointer, for example, is equivalent to In general is equivalent to .The only difference between an array, and a pointer to the beginning of an array, is that the compiler keeps some extrainformation for the arrays, to keep track of their storage requirements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example if we get the size of both an arrayand a pointer using the operator, sizeof(ptr) will give us how much space does the pointer itself occupies ( onmy computer), while sizeof array will give us, the amount of space occupied by the whole array (on my computer elements of bytes each).1.6 Pointers 13 * Data Structures and Algorithms For GATE Programming BasicsDynamic Memory Allocation: In the earlier sections, we have seen that pointers can hold addressed of anothervariables.
There is another use of pointers: pointers can hold addresses of memory locations that do not have a specificcompile-time variable name, but are allocated dynamically while the program runs (sometimes such memory is called ).To allocate memory during runtime, language provides us the facility interns of function.
This functionallocates the requested amount of memory, and returns a pointer to that memory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To deallocate that block of memory, supports it by providing function.
This function takes the pointer as an argument.
For example, in the belowcode, an array of 5 integers is allocated dynamically, and then deleted. int count = 5; int *A = malloc(count * sizeof(int)); ……… free(arr);In this example, the calculates the amount of bytes we need to allocate for the array, bymultiplying the number of elements, to the size of each element (i.e. the size of one integer).Function Pointers: Like data, executable code (including functions) also stored in memory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can get the address of afunction.
But the question is what type of pointers we use for that purpose?In general, we use function pointers and they store the address of functions.
Using function pointers we can call thefunction indirectly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But, function pointers manipulation has limitation: limited to assignment and indirection andcannot do arithmetic on function pointers.
Because for function pointers there no ordering (functions can be storedanywhere in memory).
The following example illustrates how to create and use function pointers. int (*fptr)(int); fptr = function1; printf(&quot;function1of 0 is: %dn&quot;, fptr(5)); fptr = function2; printf(&quot;function2 of 0 is: %dn&quot;, fptr(10));First we create a pointer that can point to functions accepting an as an argument and returning int, named .Then we make point to the , and proceed to call it through the pointer, to print the of .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Finally, we change to point to , and call it again in exactly the same manner, to print the of .1.7 Parameter Passing TechniquesBefore starting our discussion on parameter passing techniques, let us concentrate on the terminology we use.Actual and Formal Parameters: Let us assume that a function is called from another function .
In this case, iscalled the “caller function&quot; and is called the “called function or callee function&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Also, the arguments which sendsto are called actual arguments and the parameters of function are called formal arguments.
In the below example,the is called from function. is the caller function and is the called function.
Also, thearguments and are formal arguments and of function are actual arguments. int main() { long i = 1; double j = 2; // Call func with actual arguments i and j. func( i, j ); } // func with formal parameters param1 and param2. void func( long param1, double param2 ){ }1.7 Parameter Passing Techniques 14 * Data Structures and Algorithms For GATE Programming BasicsSemantics of Parameter Passing: Logically, parameter passing uses the following semantics:  IN: Passes info from caller to .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Formal arguments can take values from actual arguments, but cannot send values to actual arguments.  OUT: Callee writes values in the caller.
Formal arguments can send values from actual arguments, but cannot take values from actual arguments.  IN/OUT: Caller tells callee value of variable, which may be updated by callee.
Formal arguments can send values from actual arguments, and also can take values from actual arguments.Language Support for Parameter Passing Techniques Passing Technique Supported by Languages Pass by value Pass by result Pass by value-result , sometimes Pass by reference (achieves through pointers), Pass by namePass by Value: This method uses in-mode semantics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A formal parameter is like a new local variable that exists withinthe scope of the procedure/function/subprogram.
Value of actual parameter is used to initialize the formal parameter.Changes made to formal parameter get transmitted back to the caller.
If pass by value is used then the formalparameters will be allocated on stack like a normal local variable.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This method is sometimes called as .Advantage of this method is that, it allows the actual arguments not to modify.In general the pass by value technique is implemented by copy and it has the following disadvantages:  Inefficiency in storage allocation  Inefficiency in copying value  For objects and arrays, the copy semantics are costlyExample: In the following example, main passes func two values: and .
The function func receives copies of thesevalues and accesses them by the identifiers a and b.
The function func changes the value of a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When control passesback to main, the actual values of and are not changed. void func (int a, int b) { a += b; printf(&quot;In func, a = %d b = %dn&quot;, a, b); } int main(void) { int x = 5, y = 7; func(x, y); printf(&quot;In main, x = %d y = %dn&quot;, x, y); return 0; } The output of the program is: In func, a = 12 b = 7.
In main, x = 5 y = 7Pass by Result: This method uses out-mode semantics.
A formal parameter is a new local variable that exists within thescope of the function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>No value is transmitted from actual arguments to formal arguments.
Just before control istransferred back to the caller, the value of the formal parameter is transmitted back to the actual parameter.
Thismethod is sometimes called asActual parameter be a variable. and are fine but not or .Parameter collisions can occur: That means, suppose let us assume that there is a function If the twoformal parameters in write had different names, which value should go into ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Order in which actual parameters arecopied determines their value.
In general the pass by result technique is implemented by copy and it has the followingdisadvantages:1.7 Parameter Passing Techniques 15 * Follow us on LinkedIn * Follow us on Twitter * Find us on Facebook * Find us on Google+ * Learn About Us * About * Careers * Our Blog * Press * Contact us * Help &amp; Support * Using SlideShare * SlideShare 101 * Terms of Use * Privacy Policy * Copyright &amp; DMCA * Community Guidelines * SlideShare on mobile * Pro &amp; more * Go PRO New * Business Solutions * Developers &amp; API * Developers Section * Developers Group * Engineering Blog * Blog Widgets © 2013 SlideShare Inc.
All rights reserved.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>RSS Feed * × This activity has also been shared with your LinkedIn network  Undo LinkedIn share  Settings * Edit your favorites Cancel Data Structures and Algorithms | Set 29 - GeeksforGeeks | GeeksforGeeks GeeksforGeeks A computer science portal for geeks Log in * Home * Q&amp;A * Interview Corner * Ask a question * Contribute * GATE * Algorithms * C * C++ * Books * About us * Arrays * Bit Magic * C/C++ Puzzles * Articles * GFacts * Linked Lists * MCQ * Misc * Output * Strings * Trees Data Structures and Algorithms | Set 29 February 28, 2012 Following questions have been asked in GATE 2012 exam.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1) The recurrence relation capturing the optimal time of the Tower of Hanoi problem with n discs is (A) T(n) = 2T(n – 2) + 2 (B) T(n) = 2T(n – 1) + n (C) T(n) = 2T(n/2) + 1 (D) T(n) = 2T(n – 1) + 1 Answer (D)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Following are the steps to follow to solve Tower of Hanoi problem recursively.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let the three pegs be A, B and C.
The goal is to move n pegs from A to C.
To move n discs from peg A to peg C: move n-1 discs from A to B.
This leaves disc n alone on peg A move disc n from A to C move n?1 discs from B to C so they sit on disc n The recurrence function T(n) for time complexity of the above recursive solution can be written as following.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>T(n) = 2T(n-1) + 1 2) Consider the directed graph shown in the figure below.
There are multiple shortest paths between vertices S and T.
Which one will be reported by Dijstra?s shortest path algorithm?
Assume that, in any iteration, the shortest path to a vertex v is updated only when a strictly shorter path to v is discovered.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(A) SDT (B) SBDT (C) SACDT (D) SACET Answer (D)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>3) Suppose a circular queue of capacity (n – 1) elements is implemented with an array of n elements.
Assume that the insertion and deletion operation are carried out using REAR and FRONT as array index variables, respectively.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Initially, REAR = FRONT = 0.
The conditions to detect queue full and queue empty are (A) Full: (REAR+1) mod n == FRONT, empty: REAR == FRONT (B) Full: (REAR+1) mod n == FRONT, empty: (FRONT+1) mod n == REAR (C) Full: REAR == FRONT, empty: (REAR+1) mod n == FRONT (D) Full: (FRONT+1) mod n == REAR, empty: REAR == FRONT Answer (A) See this for details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Please write comments if you find any of the answers/explanations incorrect, or you want to share more information about the topics discussed above.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You may also like following posts * Data Structures and Algorithms | Set 2 * Data Structures and Algorithms | Set 11 * Data Structures and Algorithms | Set 15 * Data Structures and Algorithms | Set 18 * Data Structures and Algorithms | Set 28 * * * Tweet * You may also like following posts * Data Structures and Algorithms | Set 2 * Data Structures and Algorithms | Set 11 * Data Structures and Algorithms | Set 15 * Data Structures and Algorithms | Set 18 * Data Structures and Algorithms | Set 28 Facebook Comments comments 5 comments so far * Anil says: December 24, 2012 at 10:23 PM please Explain the question 2 how it find Shortest path of given graph.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * Anil says: December 24, 2012 at 10:21 PM Please the give detail of Question 2 because it is unable to understand logic behind the find out shorted path Reply * ajit says: October 23, 2012 at 6:16 PM 1) The recurrence relation capturing the optimal time of the Tower of Hanoi problem with n discs is (A) T(n) = 2T(n – 2) + 2 (B) T(n) = 2T(n – 1) + n (C) T(n) = 2T(n/2) + 1 (D) T(n) = 2T(n – 1) + 1 Answer (D)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Following are the steps to follow to solve Tower of Hanoi problem recursively.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let the three pegs be A, B and C.
The goal is to move n pegs from A to C.
To move n discs from peg A to peg C: move n-1 discs from A to B.
This leaves disc n alone on peg A move disc n from A to C move n?1 discs from B to C so they sit on disc n The recurrence function T(n) for time complexity of the above recursive solution can be written as following.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>T(n) = 2T(n-1) + 1 Reply * upama shilpee says: September 16, 2012 at 1:56 PM /* */ [/sour please give the detail explanation of this question.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Consider the directed graph shown in the figure below.
There are multiple shortest paths between vertices S and T.
Which one will be reported by Dijstra?s shortest path algorithm?
Assume that, in any iteration, the shortest path to a vertex v is updated only when a strictly shorter path to v is discovered.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(A) SDT (B) SBDT (C) SACDT (D) SACET Answer (D)cecode]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply * Funda says: May 22, 2012 at 10:30 PM Normally in an interview you get some qunistoes on linked-lists, arrays, binary trees and such and knowing the differences between them.I practical uses, ArrayList, Collection, Dictionary, HashMap, TreeMap object are much more practical.You should definately understand string parsing, such as counting vowels in a sentence or being able to write your own find/replace substring algorithm.At the advanced level you should be intimately familar with stacks, heaps, trees, recursions, different ways to implement sorting algorithm, and way one is better then another for your given use, and data structure or cominational structure would be good given a certain situation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reply Comment Click here to cancel reply.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Name (Required) Email (Required) Website URI Your Comment (Writing code? please paste your code between sourcecode tags) [sourcecode language=&quot;C&quot;] /* Paste your code here (You may delete these lines if not writing code) */ [/sourcecode]
Notify me of followup comments via e-mail.
You can alsosubscribe without commenting.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  * Loading * * Interview Experiences * Advanced Data Structures * Dynamic Programming * Greedy Algorithms * Backtracking * Pattern Searching * Divide &amp; Conquer * Graph * Mathematical Algorithms * Recursion * Java * * * Popular Posts * All permutations of a given string * Memory Layout of C Programs * Understanding “extern&quot; keyword in C * Median of two sorted arrays * Tree traversal without recursion and without stack!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Structure Member Alignment, Padding and Data Packing * Intersection point of two Linked Lists * Lowest Common Ancestor in a BST.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Check if a binary tree is BST or not * Sorted Linked List to Balanced BST * * Follow Subscribe * Recent Comments * vandermonde on Check if a number is Palindrome * GeeksforGeeks on Dynamic Programming | Set 22 (Box Stacking Problem)
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Hill Billy on Dynamic Programming | Set 22 (Box Stacking Problem)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* shek8034 on GS Labs Interview | Set 1 * Ravi on GS Labs Interview | Set 1 * maverick01 on Check if a number is Palindrome * vishwanath on Reverse a Linked List in groups of given size * utk on Microsoft Interview | 18 @geeksforgeeks,Some rights reserved        Contact Us Powered by WordPress &amp; MooTools , customized by geeksforgeeks team
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
            </sectionList>
        </query>
        <query>
            <text>data structures and algorithms solved examples</text>
            <linkList>
                <link>http://interactivepython.org/courselib/static/pythonds/</link>
                <link>http://www.fiu.edu/~weiss/</link>
                <link>http://www.cs.ucsb.edu/~suri/cs130a/Analysis.ppt</link>
                <link>http://www.springer.com/?SGWID=4-102-45-168599-p43141324</link>
                <link>http://www2.warwick.ac.uk/fac/sci/dcs/teaching/modules/cs243/</link>
                <link>http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=570330</link>
                <link>http://www.slideshare.net/careermonk/data-structures-and-algorithms-for-gate-solutions-to-all-previous-gate-questions-since-1991</link>
                <link>http://ocw.utm.my/mod/resource/view.php?id=128</link>
                <link>http://www.amazon.com/Algorithms-Data-Structures-Problem-Solving/dp/0805316663</link>
                <link>http://www.freetechbooks.com/algorithms-and-data-structures-f11.html</link>
                <link>http://stackoverflow.com/questions/1499359/how-to-deal-with-algorithm-data-structures-problems-in-interview-process</link>
                <link>http://www.ece.vt.edu/ugrad/viewcourse.php?number=2574-8</link>
                <link>http://interactivepython.org/courselib/static/pythonds/Introduction/introduction.html</link>
                <link>https://sites.google.com/site/atulkg/courses/es-103-data-structure-and-algorithms-2012</link>
                <link>http://en.wikipedia.org/wiki/Algorithm</link>
                <link>http://staff.washington.edu/jon/dsa-perl/dsa-perl.html</link>
            </linkList>
            <sectionList>
                <section>
                    <text>Welcome to Problem Solving with Algorithms and Data Structures — Problem Solving with Algorithms and Data Structures Navigation * index * next | * Problem Solving with Algorithms and Data Structures » * logout | Table Of Contents * Welcome to Problem Solving with Algorithms and Data Structures * Introduction * Analysis * Basic Data Structures * Recursion * Sorting and Searching * Trees and Tree Agorithms * Graphs and Graph Algorithms * Acknowledgements * Indices and tables Next topic Introduction Runestone Links * Report a Problem * About Runestone * Instructors Page Follow @iRunestone Quick search Enter search terms or a module, class or function name.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Welcome to Problem Solving with Algorithms and Data Structures¶ By Brad Miller and David Ranum, Luther College Introduction¶ * Introduction * Objectives * Getting Started * What Is Computer Science?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Review of Basic Python * Summary * Key Terms * Discussion Questions * Programming Exercises Analysis¶ * Algorithm Analysis * Objectives * What Is Algorithm Analysis?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Performance of Python Data Structures * Summary * Key Terms * Discussion Questions * Programming Exercises Basic Data Structures¶ * Basic Data Structures * Objectives * What Are Linear Structures?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Stacks * What is a Stack?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Stack Abstract Data Type * Implementing a Stack in Python * Simple Balanced Parentheses * Balanced Symbols (A General Case)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Converting Decimal Numbers to Binary Numbers * Infix, Prefix and Postfix Expressions * Queues * What Is a Queue?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Queue Abstract Data Type * Implementing a Queue in Python * Simulation: Hot Potato * Simulation: Printing Tasks * Deques * What Is a Deque?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* The Deque Abstract Data Type * Implementing a Deque in Python * Palindrome-Checker * Lists * The Unordered List Abstract Data Type * Implementing an Unordered List: Linked Lists * The Ordered List Abstract Data Type * Implementing an Ordered List * Summary * Key Terms * Discussion Questions * Programming Exercises Recursion¶ * Recursion * Objectives * What Is Recursion?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Calculating the Sum of a List of Numbers * The Three Laws of Recursion * Converting an Integer to a String in Any Base * Stack Frames: Implementing Recursion * Visualizing Recursion * Sierpinski Triangle * Complex Recursive Problems * Tower of Hanoi * Exploring a Maze * Dynamic Programming * Summary * Key Terms * Discussion Questions * Programming Exercises Sorting and Searching¶ * Sorting and Searching * Objectives * Searching * Sorting * The Bubble Sort * The Selection Sort * The Insertion Sort * The Shell Sort * The Merge Sort * The Quick Sort * Searching and Sorting * Summary * Key Terms * Discussion Questions * Programming Exercises Trees and Tree Agorithms¶ * Trees * Objectives * Examples of Trees * Vocabulary and Definitions * Implementation * List of Lists Representation * Nodes and References * Binary Tree Applications * Parse Tree * Tree Traversals * Priority Queues with Binary Heaps * Binary Heap Operations * Binary Heap Implementation * Binary Search Trees * Search Tree Operations * Search Tree Implementation * Search Tree Analysis * Balanced Binary Search Trees * AVL Tree Performance * AVL Tree Implementation * Summary of Map ADT Implementations * Summary * Key Terms * Discussion Questions * Programming Exercises Graphs and Graph Algorithms¶ * Graphs * Objectives * Vocabulary and Definitions * The Graph Abstract Data Type * Breadth First Search * The Word Ladder Problem * Building the Word Ladder Graph * Implementing Breadth First Search * Breadth First Search Analysis * Depth First Search * The Knight’s Tour Problem * Building the Knight’s Tour Graph * Implementing Knight’s Tour * Knight’s Tour Analysis * General Depth First Search * Depth First Search Analysis * Topological Sorting * Strongly Connected Components * Shortest Path Problems * Dijkstra’s Algorithm * Analysis of Dijkstra’s Algorithm * Prim’s Spanning Tree Algorithm * Summary * Key Terms * Discussion Questions * Programming Exercises Acknowledgements¶ Indices and tables¶ * Index * Module Index * Search Page Navigation * index * next | * Problem Solving with Algorithms and Data Structures » * logout | © Copyright 2012, Brad Miller, David Ranum.
Created usingSphinx 1.1.3.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Mark Weiss redirecting... please hold CS243 Data Structures and Algorithms Skip to content Skip to navigation * Study * | * Research * | * Business * | * Alumni * | * News * | * About * Text only * | * Sign in * Search Computer Science * Search University of Warwick * Search for people at Warwick * Search Warwick Blogs * Search past exam papers * Search video * More… Department of Computer Science * Prospective Students * Research * Current Students * People * Schools * Events * News * Modules Taught » * CS243 CS243 Data Structures and Algorithms Academic Aims Data Structures and Algorithms are fundamental to programming and to understanding computation.
The purpose of this module is to provide students with a coherent introduction to techniques for using data structures and some basic algorithms, and with the tools for applying these techniques to computational problems.
Teaching and learning methods include lectures and reading material which describe techniques for analysing algorithms and applications of data structures, and a problem sheet which gives students an opportunity to practice problem solving.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learning Outcomes On completion of the module the student should be able to:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Understand a variety of techniques for designing algorithms. * Understand a wide variety of data structures and should be able to use them appropriately to solve problems * Understand some fundamental algorithms.
Content * Analysis of running time of algorithms: asymptotic notation, analysis of recursive algorithms. * Efficient algorithms for sorting and selection: selection sort, merge sort, insertion sort, quick sort, binary search. * Efficient data structures: sets, lists, queues and stacks. * Dictionary data structures: hash tables, binary search trees. * Elementary tree and graph algorithms: depth first and breadth first search.
7.5 CATS (3.75 ECTS) Term 1 Organiser: Marcin Jurdzinski Syllabus Online material Intranet Department of Computer Science, University of Warwick, Coventry CV4 7AL Directions to the University Jobs in Computer Science Contact details Page contact: Jackie Pinks Last revised: Thu 25 Aug 2011 * Sign in * | * Powered by Sitebuilder * | * © MMXIII * | * Terms * | * Privacy * | * Cookies * | * Accessibility IEEE Xplore - Improved algorithms and data structures for solving graph problems in external memory Skip to Main Content Sign In Please enter a valid username or password.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Username Password * Forgot Username or Password IEEE.org | IEEE Xplore Digital Library| IEEE Standards | IEEE Spectrum | More Sites Cart | Create Account | Sign In Access provided by: NATIONAL INSTITUTE OF TECHNOLOGY CALICUT Sign Out Contact Administrator Browse * Books &amp; eBooks * Conference Publications * Education &amp; Learning * Journals &amp; Magazines * Standards * By Topic By Topic * Aerospace * Bioengineering * Communication, Networking &amp; Broadcasting * Components, Circuits, Devices &amp; Systems * Computing &amp; Processing (Hardware/Software)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Engineered Materials, Dielectrics &amp; Plasmas * Engineering Profession * Fields, Waves &amp; Electromagnetics * General Topics for Engineers (Math, Science &amp; Engineering)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Geoscience * Nuclear Engineering * Photonics &amp; Electro-Optics * Power, Energy, &amp; Industry Applications * Robotics &amp; Control Systems * Signal Processing &amp; Analysis * Transportation * My Settings * Alerts * Purchase History * Saved Searches * Preferences * What can I access?
* My Projects What can I access?  
| About IEEE Xplore  | Terms of Use  | Feedback    Search Term(s) Author Searchbeta First Name Middle Name Last Name Author Searchbeta  |  Advanced Search  |  Preferences  |  Search Tips  | More Search Options More Search Options * Command Search * Publication Quick Search * Saved Searches and Alerts * Search History     Browse Conference Publications &gt; Parallel and Distributed Proc ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Improved algorithms and data structures for solving graph problems in external memory This paper appears in: Parallel and Distributed Processing, 1996., Eighth IEEE Symposium on Date of Conference: 23-26 Oct 1996 Author(s): Kumar, V.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Dept. of Electr.
Eng. &amp; Comput.
Sci., Northwestern Univ., Evanston, IL, USA Schwabe, E.J.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Page(s): 169 - 176 Product Type: Conference Publications * 570330 searchabstract * * * * * * Abstract Recently, the study of I/O-efficient algorithms has moved beyond fundamental problems of sorting and permuting and into wider areas such as computational geometry and graph algorithms.
With this expansion has come a need for new algorithmic techniques and data structures.
In this paper, we present I/O-efficient analogues of well-known data structures that we show to be useful for obtaining simpler and improved algorithms for several graph problems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Our results include improved algorithms for minimum spanning trees, breadth-first search, and single-source shortest paths.
The descriptions of these algorithms are greatly simplified by their use of well-defined I/O-efficient data structures with good amortized performance bounds.
We expect that I/O efficient data structures such as these will be a useful tool for the design-of I/O-efficient algorithms Index Terms * IEEE Terms Algorithm design and analysis , Communication networks , Computational geometry , Data structures , Parallel processing , Pressing , Read-write memory , Sorting , Throughput , Tree graphs * INSPEC * Controlled Indexing computational complexity , computational geometry , data structures , graph theory , parallel algorithms * Non Controlled Indexing I/O-efficient algorithms , amortized performance bounds , breadth-first search , data structures , external memory , graph problems , minimum spanning trees , single-source shortest paths   * Additional Details * References (7)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Citing Documents (3)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Meeting Date : 23 Oct 1996-26 Oct 1996 Conference Location :  New Orleans, LA Print ISBN: 0-8186-7683-3 INSPEC Accession Number: 5465326 Digital Object Identifier :  10.1109/SPDP.1996.570330 Loading References Loading Citing Documents Related Content * Improving Search Speed on Pointer-Based Large Data Structures Using a Hierarchical Clustering Copying Algorithm * New gender genetic algorithm for solving graph partitioning problems * Solving weighted graph matching problem by modified microgenetic algorithm * Parallel external memory graph algorithms * An improved artificial immune algorithm for solving weapon-target assignment problem Sign In | Create Account IEEE Account * Change Username/Password &lt;https://www.ieee.org/profile/changeusrpwd/showChangeUsrPwdPage.html?
refSite=http://ieeexplore.ieee.org&amp;refSiteName=IEEE Xplore&gt; * Update Address &lt;https://www.ieee.org/profile/address/getAddrInfoPage.html?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>refSite=http://ieeexplore.ieee.org&amp;refSiteName=IEEE Xplore&gt; Purchase Details * Payment Options &lt;https://www.ieee.org/profile/payment/showPaymentHome.html?
refSite=http://ieeexplore.ieee.org&amp;refSiteName=IEEE Xplore&gt; * Order History &lt;https://www.ieee.org/profile/vieworder/showOrderHistory.html?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>refSite=http://ieeexplore.ieee.org&amp;refSiteName=IEEE Xplore&gt; * Access Purchased Documents Profile Information * Communications Preferences &lt;https://www.ieee.org/profile/commprefs/showcommPrefpage.html?
refSite=http://ieeexplore.ieee.org&amp;refSiteName=IEEE Xplore&gt; * Profession and Education &lt;https://www.ieee.org/profile/profedu/getProfEduInformation.html?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>refSite=http://ieeexplore.ieee.org&amp;refSiteName=IEEE Xplore&gt; * Technical Interests &lt;https://www.ieee.org/profile/tips/getTipsInfo.html?
refSite=http://ieeexplore.ieee.org&amp;refSiteName=IEEE Xplore&gt; Need Help?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* US &amp; Canada: +1 800 678 4333 * Worldwide: +1 732 981 0060 * Contact &amp; Support About IEEE Xplore | Contact | Help | Terms of Use | Nondiscrimination Policy | Site Map | Privacy &amp; Opting Out of Cookies A non-profit organization, IEEE is the world's largest professional association for the advancement of technology. © Copyright 2013 IEEE - All rights reserved.
Use of this web site signifies your agreement to the terms and conditions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structures and Algorithms For GATE: Solutions to all previous ...
SlideShare * Upload * Browse   * Popular * Downloaded * Liked * Videos * Featured * Go Pro * Login * Signup * Email * Like * Liked × * Save * Private Content * Embed * Loading embed code… * We have emailed the verification/download link to &quot;&quot;.
Login to your email and click the link to download the file directly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To request the link at a different email address, update it here.
Close Validation messages.
Success message.
Fail message.
Check your bulk/spam folders if you can't find our mail.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* * Loading   ‹ ›     /15     * Related * More * Lect 8(pointers) Zaheer Abbas 490 views Like Liked * Lect 9(pointers) Zaheer Abbas 322 views Like Liked * Ch6 pointers (latest) 392 views Like Liked * Pointer in c++ part2 554 views Like Liked * Chp3(pointers ref) 174 views Like Liked * Pointers in C/C++ 171 views Like Liked * Chapter 13.1.8 89 views Like Liked * Introduction to pointers and memory management in C 8258 views Like Liked * 09 1 Pointers 904 views Like Liked * Scope, binding, papameter passing techniques 1067 views Like Liked * Unit4 Slides 986 views Like Liked * Pointers 179 views Like Liked * Pointers (Pp Tminimizer) 2764 views Like Liked * Pointers in C 1526 views Like Liked * Lecturer23 pointersin c.ppt 3447 views Like Liked * C++ Beginner S Guide C H04 1139 views Like Liked * Advanced+pointers 625 views Like Liked * oop Lecture 17 164 views Like Liked * Savitch Ch 09 689 views Like Liked * Savitch ch 09 125 views Like Liked * Ponters 348 views Like Liked * Ponters 419 views Like Liked * Pointer 1970 views Like Liked * C programming session 05 645 views Like Liked * Unit3 C 260 views Like Liked * C Language Unit-3 687 views Like Liked * C material 990 views Like Liked * L03-ajc-C-arrays 527 views Like Liked * Pointers 329 views Like Liked * Pointers 250 views Like Liked * Pointers c imp 265 views Like Liked * Pointers 109 views Like Liked * The Function Pointer Tutorials 1073 views Like Liked * C interview-questions-techpreparation 118 views Like Liked * C interview-questions-techpreparation 119 views Like Liked * C interview-questions-techpreparation 241 views Like Liked * C tutorial[1] 340 views Like Liked * The ultimate C Like Liked * Data structures and algorithms made easy Like Liked * Peeling Design Patterns Like Liked * The ultimate C 125 views Like Liked * Data structures and algorithms made easy 1834 views Like Liked * Peeling Design Patterns 171 views Like Liked * Coding interview questions 91 views Like Liked * Data structures and algorithms made easy java 949 views Like Liked Follow Author * * Tweet * * * Pin It * Wordpress + Follow Data Structures and Algorithms For GATE: Solutions to all previous GATE questions since 1991 by CareerMonk Publications on Oct 13, 2012 * 1,861 views Data structures and algorithms for gate More… Data structures and algorithms for gate Less Accessibility * View text version Categories * * Books Upload Details Uploaded via SlideShare as Adobe PDF Usage Rights © All Rights Reserved Flagged as inappropriate Flag as inappropriate Flag as inappropriate Select your reason for flagging this presentation as inappropriate.
If needed, use thefeedback form to let us know more details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>None Pornographic Defamatory Illegal/Unlawful Spam Other Terms Of Service Violation Cancel File a copyright complaint Statistics Likes 0 Downloads 68 Comments 0 Embed Views 0 Views on SlideShare 1,861 Total Views 1,861 * No comments yet * Notes on Slide 1 Subscribe to comments Post Comment Edit your comment Cancel More… Data Structures and Algorithms For GATE: Solutions to all previous GATE questions since 1991 Document Transcript * DATA STRUCTURES ANDALGORITHMS FOR GATE-To All Hard Working GATE Aspirants * Copyright© by All rights reserved.
Designed byCopyright© Career Monk Publications.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All rights reserved.All rights reserved.
No part of this book may be reproduced in any form or by any electronic or mechanicalmeans, including information storage and retrieval systems, without written permission from the publisher orauthor * AcknowledgementsI would like to express my gratitude to many people who saw me through this book, to all those who providedsupport, talked things over, read, wrote, offered comments, allowed me to quote their remarks and assisted inthe editing, proofreading and design.
In particular, I would like to thank the following individuals. [ ], for his encouragement during my stay at . [ ], [ , ] forspending their valuable time in reviewing the book, suggestions and encouragement. &amp; [Founders of ], for approaching me for teaching at their training centers. , and have contributed greatly to the quality of this book.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I thank all offor your help and suggestions.Last but not least, I would like to thank of , &amp; [ ], [ of ], [ , ],[ ], [ , ]&amp; for helping me andmy family during our studies. - M-Tech, Founder of * A stone is broken by the last stroke.
This does not mean that first stroke was useless.
Success is a result of continuous daily effort. --Stand up, be bold, be strong.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Take the whole responsibility on your own shoulders, and know that you are the creator of your own destiny. -- * PrefaceDear Reader,Please Hold on!
I know many people do not read preface.
But I would like to strongly recommend readingpreface of this book at least.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This preface has from regular prefaces.This book assumes you have some basic knowledge about computer science.
Main objective of the book is not togive you the theorems and proofs about and .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I have followed a pattern ofimproving the problem solutions with different complexities (for each problem, you observe multiple solutionswith different improved complexities).
Basically, it’s an enumeration of possible solutions.
With this approach,even if we get a new question it gives us a way to think about all possible solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For all other topics, it willact as a refreshment.
This book is very much useful for interview preparation, competitive exams preparation,campus preparations.This book is aimed for GATE students.
We have tried to solve all problems related to and from the last twenty years papers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Each solution has explanation associated with it and this givesthe confidence for readers about the correctness of the solutions.
As a if you read complete bookwith good understanding, I am sure you will challenge the interviewers and that is the objective of this book.This book is very much useful for the of and during their academicpreparations.
All the chapters of this book contain theory and their related problems as many as possible.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If youread as a preparing for competition exams for Computer Science/Information Technology], the contentof this book covers the topics in full details.
While writing the book, an intense care has beentaken to help students who are preparing for these kinds of exams.In all the chapters you will see more importance given to and analyzing them instead ofconcentrating more on theory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For each chapter, first you will see the basic required theory and then followedby problems.For many of the problems, solutions are provided with different complexities.
We start with solution and slowly move towards the possible for that problem.
For each problemwe will try to understand how much time the algorithm is taking and how much memory the algorithm istaking.It is that, at least one complete reading of this book is required to get full understanding of allthe topics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the subsequent readings, you can directly go to any chapter and refer.
Even though, enoughreadings were given for correcting the errors, due to human tendency there could be some minor typos in thebook.
If any such typos found, they will be updated at .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I request you to constantlymonitor this site for any corrections, new problems and solutions.
Also, please provide your valuablesuggestions at: .
Wish you all the best.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Have a nice reading. - M-Tech, Founder of * ForewordWith the availability of different books on Data Structures and/or Algorithms, their design and analysis with ageneral or language based orientation; one would be in gross error to think that this book is one more to the list.Keeping in view the GATE and other competitive exams perspective in mind and critical time managementrequirement, the author has taken the approach of embedding theoretical concepts through efficient problemsolving.The different topics related to data structures and algorithms and their intricate interdependency have beendealt with comprehensive eloquence and subtle clarity.The topics coverage in the book spans from primitive to advanced data structures, their characteristics, theirspace and time complexity analysis, the different algorithmic paradigms/classifications, application areas andproblems and their analysis.Each topic is explained through a problem solving approach so that at the end, the reader is well equipped to beable to apply to any type of problem solving requirement and distinctly choose one strategy or type from theother.The book also includes solved GATE questions of last twenty years which works as a mock exam practice planefor the reader.
It is a very handy and must have book for any reader aiming for competitive exams of alluniversities and boards and as well as for campus recruitment.
It can also serve as a reference text-book forsoftware developers, who wanted to design and implement efficient algorithms. . , . * Table of Contents1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Programming Basics ---------------------------------------------------------------------- 92.
Introduction ----------------------------------------------------------------------------- 303.
Recursion and Backtracking ------------------------------------------------------------ 524.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Linked Lists ----------------------------------------------------------------------------- 575.
Stacks ------------------------------------------------------------------------------------ 936.
Queues---------------------------------------------------------------------------------- 1137.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Trees ------------------------------------------------------------------------------------ 1238.
Priority Queue and Heaps ------------------------------------------------------------- 1939.
Disjoint Sets ADT ---------------------------------------------------------------------- 21110.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Graph Algorithms ---------------------------------------------------------------------- 22011.
Sorting ---------------------------------------------------------------------------------- 25912.
Searching ------------------------------------------------------------------------------- 28013.
Selection Algorithms ------------------------------------------------------------------- 30414.
Symbol Tables -------------------------------------------------------------------------- 31115.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Hashing --------------------------------------------------------------------------------- 31316.
String Algorithms ---------------------------------------------------------------------- 32917.
Algorithms Design Techniques -------------------------------------------------------- 35018.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Greedy Algorithms --------------------------------------------------------------------- 35319.
Divide and Conquer Algorithms ------------------------------------------------------ 36320.
Dynamic Programming ---------------------------------------------------------------- 37721.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Complexity Classes --------------------------------------------------------------------- 41522.
Miscellaneous Concepts --------------------------------------------------------------- 422 * Other Titles by Success keys for Big Job Hunters Data Structures and Algorithms Made Easy (C/C++) Data Structures and Algorithms Made Easy in Java Coding Interview Questions Peeling Design Patterns * Data Structures and Algorithms For GATE Programming Basics Chapter-1 PROGRAMMING BASICSThe objective of this chapter is to explain the importance of analysis of algorithms, their notations, relationships andsolving as many problems as possible.
We first concentrate on understanding the basic elements of algorithms,importance of analysis and then slowly move towards analyzing the algorithms with different notations and finally theproblems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>After completion of this chapter you should be able to find the complexity of any given algorithm(especially recursive functions).1.1 VariablesBefore going to the definition of variables, let us relate them to old mathematical equations.
All of us have solvedmany mathematical equations since childhood.
As an example, consider the below equation:We don’t have to worry about the use of above equation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The important thing that we need to understand is, theequation has some names ( and ) which hold values (data).
That means, the ( and ) are the place holdersfor representing data.
Similarly, in computer science we need something for holding data and are thefacility for doing that.1.2 Data typesIn the above equation, the variables and can take any values like integral numbers ( , etc...), real numbers( etc…) or just and .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To solve the equation, we need to relate them to kind of values they can take and is the name being used in computer science for this purpose.A in a programming language is a set of data with values having predefined characteristics.
Examples ofdata types are: integer, floating point unit number, character, string etc...Computer memory is all filled with zeros and ones.
If we have a problem and wanted to code it, it’s very difficult toprovide the solution in terms of zeros and ones.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To help users, programming languages and compilers are providing thefacility of data types.For example, takes bytes (actual value depends on compiler), takes bytes etc… This says that, inmemory we are combining bytes ( bits) and calling it as .
Similarly, combining bytes ( bits) andcalling it as .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A data type reduces the coding effort.
Basically, at the top level, there are two types of data types:  System defined data types (also called data types)  User defined data typesSystem defined data types (Primitive data types)Data types which are defined by system are called data types.
The primitive data types which are providedby many programming languages are: int, float, char, double, bool, etc… The number of bits allocated for eachprimitive data type depends on the programming languages, compiler and operating system.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For the same primitivedata type, different languages may use different sizes.
Depending on the size of the data types the total available values(domain) will also changes.
For example, “ &quot; may take bytes or bytes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If it takes bytes ( bits) then the total1.1 Variables 9 * Data Structures and Algorithms For GATE Programming Basicspossible values are - to + (- -1).
If it takes, bytes ( bits), then the possible values arebetween to (- -1).
Same is the case with remaining data types too.User defined data typesIf the system defined data types are not enough then most programming languages allows the users to define their owndata types called as user defined data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Good example of user defined data types are: structures in andclasses in .For example, in the below case, we are combining many system defined data types and called it as user defined datatype with name “ &quot;.
This gives more flexibility and comfort in dealing with computer memory. struct newType { int data1; float data 2; … char data; };1.3 Data StructureBased on the above discussion, once we have data in variables, we need some mechanism for manipulating that data tosolve problems. is a particular way of storing and organizing data in a computer so that it can be usedefficiently.
That means, a is a specialized format for organizing and storing data.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>General datastructure types include arrays, files, linked lists, stacks, queues, trees, graphs and so on.
Depending on the organizationof the elements, data structures are classified into two types: 1) Elements are accessed in a sequential order but it is not compulsory to store all elements sequentially (say, Linked Lists). : Linked Lists, Stacks and Queues.
2) : Elements of this data structure are stored/accessed in a non-linear order. : Trees and graphs.1.4 Abstract Data Types (ADTs)Before defining abstract data types, let us consider the different view of system defined data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We all know that,by default, all primitive data types (int, float, et..) supports basic operations like addition, subtraction etc… The systemis providing the implementations for the primitive data types.
For user defined data types also we need to defineoperations.
The implementation for these operations can be done when we want to actually use them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>That means, ingeneral user defined data types are defined along with their operations.To simplify the process of solving the problems, we generally combine the data structures along with their operationsand are called (ADTs).
An ADT consists of parts: 1.
Declaration of data 2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Declaration of operationsCommonly used ADTs : Linked Lists, Stacks, Queues, Priority Queues, Binary Trees, Dictionaries, Disjoint Sets(Union and Find), Hash Tables, Graphs, and many other.
For example, stack uses LIFO (Last-In-First-Out) mechanismwhile storing the data in data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The last element inserted into the stack is the first element that gets deleted.Common operations of it are: creating the stack, pushing an element onto the stack, popping an element from stack,finding the current top of the stack, finding number of elements in the stack etc...While defining the ADTs do not care about implementation details.
They come in to picture only when we want touse them.
Different kinds of ADTs are suited to different kinds of applications, and some are highly specialized tospecific tasks.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By the end of this book, we will go through many of them and you will be in a position to relate the datastructures to the kind of problems they solve.1.3 Data Structure 10 * Data Structures and Algorithms For GATE Programming Basics1.5 Memory and Variables Address Memory Value 0 Memory Value 1 2 ... … … … …First let’s understand the way memory is organized in a computer.
We can treat the memory as an array of bytes.
Eachlocation is identified by an address (index to array).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In general, the address is not a valid memory location.
It isimportant to understand that the address of any byte (location) in memory is an integer.
In the below diagram valuedepends on the main memory size of the system.To read or write any location, CPU accesses it by sending its address to the memory controller.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When we create avariable (for example, in : ), the compiler allocates a block of contiguous memory locations and its size dependson the size of the variable.
The compiler also keeps an internal tag that associates the variable name with the addressof the first byte allocated to it (sometimes called as ).
So when we want to access that variable like this: , the compiler knows where that variable is located and it writes the value .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value 0 Memory Value 1 2 ...
X … … 2000 …Size of a Variable: operator is used to find size of the variable (how much memory a variable occupies).
Forexample, on some computers, ( ) gives the value .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means an integer needs contiguous bytes in memory.If the address of would be , then the actual memory locations used by are: and .Address of a Variable: In language, we can get the address of a variable using operator ( ).
The belowcode prints the address of variable.
In general, addresses are printed in hexadecimal as they are compact and alsoeasy to understand if the addresses are big.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value 0 Memory Value X 1 2 ...
&amp;XAddress of X … … is 2000 2000 … int X; printf(&quot;The address is: %un&quot;, &amp;X);1.5 Memory and Variables 11 * Data Structures and Algorithms For GATE Programming Basics1.6 PointersPointers are also variables which can hold the address of another variable.Declaration of Pointers: To declare a pointer, we have to specify the type of the variable it will point to.
That meanswe need to specify the type of the variable whose address it’s going to hold.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The declaration is very simple.
Let us seesome examples of pointer declarations below: int *ptr1; float *ptr2; unsigned int *ptr3; char *ptr4; void *ptr5;Here is a pointer that can point to an variable, can point to a , to an , andto a .
Finally is a pointer that can point to anything.
These pointers are called pointers, and there aresome restrictions on what we can do with void pointers.Pointers Usage: As we said, pointers hold addresses.
That means, we can assign the address of a variable to it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let usconsider the below sample code: int X = 10; int *ptr = &amp;X;Here, we first declare an integer named and initialize it to the value .
Then we create a pointer to namedand assign the address of to it.
This is called, “ .&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A common operation we can dowith a pointer is what is called and it is a way to access the contents of the memory that it points to.
Theindirection operator is represented by the asterisk symbol.
Do not confuse this operator with the use of the sameasterisk symbol in the declaration of pointers, they are not the same thing.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Address Memory Value &amp;ptrAddress of 0 Memory Value ptr is 2 1 ptr 2 2000 … … &amp;XAddress of X X 2000 is 2000 …If we would like to access the contents of the memory where points to, we would do it like this: Let’s see asmall code that shows pointer indirections. int X = 10; int *ptr = &amp;X; printf(&quot;X contains the value %dn&quot;, X); printf(&quot;ptr points to %pn&quot;, ptr); printf(&quot;there lies the value %dn&quot;, *ptr); *ptr = 25; printf(&quot;now X contains the value %dn&quot;, X);Here we first declare and just like before.
Then we print (which is ), followed by , i.e., the contents ofthe variable which is an address; the address of .
And finally we print , which is the value of the memorylocation where points to (again 10, since it points to the location occupied by the variable in memory).Finally we change the contents of the location where points to by writing , this means assign the value to wherever is pointing to.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Note that when we do that, what actually happening is modifying the value of .1.6 Pointers 12 * Data Structures and Algorithms For GATE Programming BasicsThis is because, holds the address of , and changing the contents of the memory at that address changes the valueof .One limitation of pointers, i.e. pointers that can point to any type, is that they cannot be .
This isbecause of the fact that each variable type takes different amount of memory.
On a -bit computer for exampleusually an int needs bytes, while a short bytes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So in order to read the actual value stored there, the compiler has toknow how many consecutive memory locations to read in order to get the full value.Pointer Manipulation: Another very useful thing we can do with pointers is to perform arithmetic operations on them.This might be obvious to the careful reader, since we said that pointers are just integers.
However, there are a fewsmall differences on pointer arithmetic that make their use even more intuitive and easy.
Try the following code: char *cptr = (char*)2; printf(&quot;cptr before: %p &quot;, cptr); cptr++; printf(&quot;and after: %pn&quot;, cptr);We declare a pointer named and assign the address to it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We print the contents of the pointer (i.e. the address ), increment it, and print again.
Sure enough the first time it prints and then , and that was exactly what weexpected.
However try this one as well: int *iptr = (int*)2; printf(&quot;iptr before: %p &quot;, iptr); iptr++; printf(&quot;and after: %pn&quot;, iptr);Now the output, on my computer, is before: and after: Why does this pointer point to the address 6 afterincremented it by one and not to as the previous pointer?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The answer lies with what we said about thevariables.
An int is bytes on my computer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means that if we have an int at the address , then that int occupiesthe memory locations and .
So in order to access to the next int we have to look at the address and .Thus when we add one to a pointer, it is not the same as adding one to any integer, it means give me a pointer to thenext variable which for variables of type int, in this case, is bytes ahead.The reason that in the first example with the char pointer, the actual address after incrementing, was one more thanthe previous address is because the size of char is exactly .
So the next char can indeed be found on the next address.Another limitation of void pointers is that we cannot perform arithmetic on them, since the compiler cannot knowhow many bytes ahead is the next variable located.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So void pointers can only be used to keep addresses that we have toconvert later on to a specific pointer type, before using them.Arrays and Pointers: There is a strong connection between arrays and pointers.
So strong in fact, that most of the timewe can treat them as the same thing.
The name of an array can be considered just as a pointer to the beginning of amemory block as big as the array.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So for example, making a pointer point to the beginning of an array is done inexactly the same way as assigning the contents of a pointer to another: short *ptr; short array[10]; ptr = array;and then we can access the contents of the array through the pointer as if the pointer itself was that array.
Forexample this: is perfectly legal.
Furthermore, we can treat the array itself as a pointer, for example, is equivalent to In general is equivalent to .The only difference between an array, and a pointer to the beginning of an array, is that the compiler keeps some extrainformation for the arrays, to keep track of their storage requirements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example if we get the size of both an arrayand a pointer using the operator, sizeof(ptr) will give us how much space does the pointer itself occupies ( onmy computer), while sizeof array will give us, the amount of space occupied by the whole array (on my computer elements of bytes each).1.6 Pointers 13 * Data Structures and Algorithms For GATE Programming BasicsDynamic Memory Allocation: In the earlier sections, we have seen that pointers can hold addressed of anothervariables.
There is another use of pointers: pointers can hold addresses of memory locations that do not have a specificcompile-time variable name, but are allocated dynamically while the program runs (sometimes such memory is called ).To allocate memory during runtime, language provides us the facility interns of function.
This functionallocates the requested amount of memory, and returns a pointer to that memory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To deallocate that block of memory, supports it by providing function.
This function takes the pointer as an argument.
For example, in the belowcode, an array of 5 integers is allocated dynamically, and then deleted. int count = 5; int *A = malloc(count * sizeof(int)); ……… free(arr);In this example, the calculates the amount of bytes we need to allocate for the array, bymultiplying the number of elements, to the size of each element (i.e. the size of one integer).Function Pointers: Like data, executable code (including functions) also stored in memory.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can get the address of afunction.
But the question is what type of pointers we use for that purpose?In general, we use function pointers and they store the address of functions.
Using function pointers we can call thefunction indirectly.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But, function pointers manipulation has limitation: limited to assignment and indirection andcannot do arithmetic on function pointers.
Because for function pointers there no ordering (functions can be storedanywhere in memory).
The following example illustrates how to create and use function pointers. int (*fptr)(int); fptr = function1; printf(&quot;function1of 0 is: %dn&quot;, fptr(5)); fptr = function2; printf(&quot;function2 of 0 is: %dn&quot;, fptr(10));First we create a pointer that can point to functions accepting an as an argument and returning int, named .Then we make point to the , and proceed to call it through the pointer, to print the of .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Finally, we change to point to , and call it again in exactly the same manner, to print the of .1.7 Parameter Passing TechniquesBefore starting our discussion on parameter passing techniques, let us concentrate on the terminology we use.Actual and Formal Parameters: Let us assume that a function is called from another function .
In this case, iscalled the “caller function&quot; and is called the “called function or callee function&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Also, the arguments which sendsto are called actual arguments and the parameters of function are called formal arguments.
In the below example,the is called from function. is the caller function and is the called function.
Also, thearguments and are formal arguments and of function are actual arguments. int main() { long i = 1; double j = 2; // Call func with actual arguments i and j. func( i, j ); } // func with formal parameters param1 and param2. void func( long param1, double param2 ){ }1.7 Parameter Passing Techniques 14 * Data Structures and Algorithms For GATE Programming BasicsSemantics of Parameter Passing: Logically, parameter passing uses the following semantics:  IN: Passes info from caller to .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Formal arguments can take values from actual arguments, but cannot send values to actual arguments.  OUT: Callee writes values in the caller.
Formal arguments can send values from actual arguments, but cannot take values from actual arguments.  IN/OUT: Caller tells callee value of variable, which may be updated by callee.
Formal arguments can send values from actual arguments, and also can take values from actual arguments.Language Support for Parameter Passing Techniques Passing Technique Supported by Languages Pass by value Pass by result Pass by value-result , sometimes Pass by reference (achieves through pointers), Pass by namePass by Value: This method uses in-mode semantics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A formal parameter is like a new local variable that exists withinthe scope of the procedure/function/subprogram.
Value of actual parameter is used to initialize the formal parameter.Changes made to formal parameter get transmitted back to the caller.
If pass by value is used then the formalparameters will be allocated on stack like a normal local variable.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This method is sometimes called as .Advantage of this method is that, it allows the actual arguments not to modify.In general the pass by value technique is implemented by copy and it has the following disadvantages:  Inefficiency in storage allocation  Inefficiency in copying value  For objects and arrays, the copy semantics are costlyExample: In the following example, main passes func two values: and .
The function func receives copies of thesevalues and accesses them by the identifiers a and b.
The function func changes the value of a.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When control passesback to main, the actual values of and are not changed. void func (int a, int b) { a += b; printf(&quot;In func, a = %d b = %dn&quot;, a, b); } int main(void) { int x = 5, y = 7; func(x, y); printf(&quot;In main, x = %d y = %dn&quot;, x, y); return 0; } The output of the program is: In func, a = 12 b = 7.
In main, x = 5 y = 7Pass by Result: This method uses out-mode semantics.
A formal parameter is a new local variable that exists within thescope of the function.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>No value is transmitted from actual arguments to formal arguments.
Just before control istransferred back to the caller, the value of the formal parameter is transmitted back to the actual parameter.
Thismethod is sometimes called asActual parameter be a variable. and are fine but not or .Parameter collisions can occur: That means, suppose let us assume that there is a function If the twoformal parameters in write had different names, which value should go into ?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Order in which actual parameters arecopied determines their value.
In general the pass by result technique is implemented by copy and it has the followingdisadvantages:1.7 Parameter Passing Techniques 15 * Follow us on LinkedIn * Follow us on Twitter * Find us on Facebook * Find us on Google+ * Learn About Us * About * Careers * Our Blog * Press * Contact us * Help &amp; Support * Using SlideShare * SlideShare 101 * Terms of Use * Privacy Policy * Copyright &amp; DMCA * Community Guidelines * SlideShare on mobile * Pro &amp; more * Go PRO New * Business Solutions * Developers &amp; API * Developers Section * Developers Group * Engineering Blog * Blog Widgets © 2013 SlideShare Inc.
All rights reserved.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>RSS Feed * × This activity has also been shared with your LinkedIn network  Undo LinkedIn share  Settings * Edit your favorites Cancel Amazon.com: Algorithms, Data Structures, and Problem Solving With C++ (9780805316667): Mark Allen Weiss: Books Amazon Join Prime * Your Amazon.com * Today's Deals * Gift Cards * Help Shop by Department Search All All DepartmentsAmazon Instant VideoAppliancesApps for AndroidArts, Crafts &amp; SewingAutomotiveBabyBeauty BooksCell Phones &amp; AccessoriesClothing &amp; AccessoriesCollectiblesComputersCredit CardsElectronicsGift Cards StoreGrocery &amp; Gourmet FoodHealth &amp; Personal Care Home &amp; KitchenIndustrial &amp; ScientificJewelryKindle StoreMagazine Subscriptions Movies &amp; TVMP3 MusicMusicMusical InstrumentsOffice ProductsPatio, Lawn &amp; Garden Pet SuppliesShoesSoftwareSports &amp; OutdoorsTools &amp; Home ImprovementToys &amp; Games Video GamesWatches Hello.
Sign in Your Account Join Prime Cart 0 Wish List * Books * Advanced Search * New Releases * Best Sellers * The New York Times® Best Sellers * Children's Books * Textbooks * Sell Your Books * Best Books of the Month Buy Used OOOOOO OOOO OOOOO $9.99 FREE Shipping on orders over $25.
Used - Very Good | See details Seller: thebookgypsies Condition: Used - Very Good Comment: Very Good!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Eligible for FREE Super Saving Shipping!
Fast Amazon shipping plus a hassle free return policy mean your satisfaction is guaranteed!
Tracking number provided with every order.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Slight wear on edges and covers; otherwise item is in very good condition.
Fulfilled by Amazon or Sign in to turn on 1-Click ordering       Have one to sell?
Sell yours here Tell the Publisher!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I'd like to read this book on Kindle Don't have a Kindle?
Get your Kindle here , or download a FREE Kindle Reading App .
Sorry, this item is not available in Image not available for Color: Image not available To view this video download Flash Player   Share your own customer images I own the rights to this title and would like to make it available again through Amazon.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithms, Data Structures, and Problem Solving With C++[Hardcover]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Mark Allen Weiss (Author) 3.2 out of 5 stars   See all reviews  (4 customer reviews ) Available from these sellers .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>My goal in writing this text is to provide a practical introduction to data structures and algorithms, from the viewpoint of abstract thinking and problem solving, as well as to the use of C++.
I try to cover all important details concerning the data structures, the analyses, and their C++ implementations, and have stayed away from data structures that are theoretically interesting but not widely used.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I have designed the textbook to allow flexibility in topic coverage for the instructor.
It is impossible to cover all the C++ details, all the different data structures, and all the mathematics described in the text in a single course.
The instructor will need to decide on an appropriate balance between practice, theory, and level of C++ detail.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Approach The most unique aspect of the text is the clear separation of the interface and implementation.
In C++ the class mechanism allows the programmer to write the interface and implementation separately, to place them in separate files and compile separately, and to hide implementation details.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In this textbook we take this a step further: The interface and implementation are discussed in separate parts of the book.
Parts I, II, and III lay the groundwork, discussing basic concepts and tools and providing some practical examples, but implementation of the basic data structures are not shown until Part IV.
This is the first CS-2 textbook to take this approach.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The separation of interface and implementation provides several benefits.
Generally, it promotes abstract thinking: Class interfaces are written and used before the implementation is known, and it forces the reader to think about the functionality and potential efficiency of the various data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example, programs that use a hash table are written hundreds of pages before the hash table is implemented.
The proposed standard template library (STL) for C++ (which is likely to be mimicked in Ada and other languages) provides classes for stacks, queues, and almost all the fundamental data structures.
We believe it will hasten the shift in emphasis of data structures courses from implemention to use.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Prerequisites The prerequisite is a working knowledge of small C or a C-like subset of C++, including basic data types, operators, control structures, functions, and input and output.
Appendix A contains a review of this material.
Students that have had a first course using C++ should be able to start at Chapter 1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Students that have had a first course using C should scan Appendix A to see the differences between C and C++.
Students whose first course was neither C nor C++ will need to read Appendix A carefully.
In any event, this textbook is not about C++; it is about data structures and algorithm design, which is the proper focus of a CS-2 course.
Readers who are not fluent C++ programmers should have a C++ reference book available; some recommendations are listed in Chapter 1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Discrete math is not a prerequisite.
Mathematical proofs are relatively rare (except towards the end of the text), and when done they are usually preceded by a brief math review.
However, establishing some of our claims requires proof; Chapters 7 and 18 through 23 require some degree of mathematical sophistication.
The instructor may elect to skip mathematical aspects of the proofs by presenting only the results.
All proofs in the text are clearly marked and are separate from the body of the text.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>C++ Using C++ presents both advantages and disadvantages.
The C++ class allows the separation of interface and implementation, as well as the hiding of internal details of the implementation.
It cleanly supports the notion of abstraction.
However, other languages support this also, notably Turbo Pascal and Ada.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The advantage of C++ is that it is widely used in industry.
Students perceive that the material they are learning is practical and will help them find employment, which provides motivation to persevere through the course.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The disadvantage of C++ is that it is far from a perfect language pedagogically, especially in a second course, and thus additional care needs to be expended to avoid bad programming practices.
A second disadvantage is that C++ is still not a stable language, so the various compilers behave differently.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It might have been preferable to write the book in a language-independent fashion, concentrating only on general principles such as the theory of the data structures and referring to C++ code only in passing, but that is impossible.
C++ code is complex, and readers will need to see complete examples to understand some of the finer points.
As mentioned earlier, a brief review of the simpler parts of C++ is provided in Appendix A. Part I of the book describes some of C++'s more advanced features relevant to data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Three parts of the language stand out as requiring special pedagogical consideration: templates, inheritance, and exceptions.
The approach to this material is as follows:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Templates: Templates are used extensively.
Some readers may have reservations with this approach because it complicates the code, but I have included them because they are fundamental concepts in any sophisticated C++ program.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Inheritance: Inheritance is used relatively sparingly because it adds complications, and data structures are not a strong application area for it.
The main instance in which it is used is to derive implementations of data structures from abstract specifications.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Exceptions: At the time of this writing, development of exceptions is several years behind that of templates.
They are not universally implemented, and the exact semantics have yet to be standardized.
Eventually they will be standardized, they will work, and they will be widely used.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In recognition of this, my preference would have been to include them, but except for the handling of memory exhaustion, this is not possible right now.
Consequently, exceptions are not otherwise used in the code.
However, throughout the text we use the function EXCEPTION, described in Appendix D, to signal points at which an exception could be used.
Appendix D also describes how to incorporate exceptions into the code should they be available on your compiler.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Text Organization This text introduces C++ and object-oriented programming (particularly abstraction) in Part I. We discuss pointers, arrays, and some other C++ topics and then go on to discuss the syntax and use of classes, templates, and inheritance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Part II discusses Big-Oh and algorithmic paradigms, including recursion and randomization.
Sorting is covered in a full chapter, and basic data structures are described in another chapter.
The interfaces and running times of the data structures are presented without giving the implementations.
The instructor then may take several approaches to present the remaining material.
Two of these are:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Use the corresponding implementations in Part IV as each data structure is described.
The instructor can ask students to extend the classes in various ways, as suggested in the exercises.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Show how the interface is used and cover implementation at a later point in the course.
The case studies in Part III can be used to support this approach.
Since complete implementations will be available on the internet, the instructor can provide a library of classes for use in programming projects.
Details on using this approach are given below.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Part V describes advanced data structures such as splay trees, pairing heaps, and the disjoint set data structure that can be covered if time permits.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Chapter-by-Chapter Text Organization Part I consists of four chapters describing some advanced features of C++ that are used throughout the text.
Chapter 1 describes pointers, arrays, and structures and also contains a short study that describes how a profiling tool is used to measure the running time of a program.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Chapter 2 begins the discussion of object-oriented programming by describing the class mechanism in C++.
Chapter 3 continues this discussion by examining templates, and Chapter 4 illustrates the use of inheritance.
Several components, including strings and vectors, are written in these chapters.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Part II is about the basic algorithms and building blocks.
In Chapter 5 a complete discussion of time complexity and Big-Oh notation is provided.
Binary search is discussed and analyzed here.
Chapter 6 is a crucial chapter that discusses the interface to the data structures and argues intuitively what the running time of the supported operations should be for each data structure.
However, implementation of these data structures is not provided until Part IV.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Chapter 7 describes recursion by first introducing the notion of proof by induction.
This chapter also discusses divide-and-conquer, dynamic programming, and backtracking.
One section describes several recursive numerical algorithms that are used to implement the RSA cryptosystem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Chapter 8 describes, codes, and analyzes several basic sorting algorithms, including the insertion sort, Shellsort, mergesort, and quicksort, as well as indirect sorting.
It also proves the classic lower bound for sorting and discusses the related problems of selection.
Finally, Chapter 9 is a short chapter that discusses random numbers, including their generation and use in randomized algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Part III provides several case studies, and each chapter is organized along a general theme.
Chapter 10 illustrates several important techniques by examining games.
Chapter 11 discusses the use of stacks in computer languages by examining an algorithm to check for balanced symbols and the classic operator precedence parsing algorithm.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Complete implementations with code are provided for both algorithms.
Chapter 12 discusses the basic utilities of file compression and cross-reference generation, and a complete implementation of the cross-reference generator is provided.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Chapter 13 broadly examines simulation by looking at one problem that can be viewed as a simulation and then the more classic event-driven simulation.
Finally, Chapter 14 illustrates how data structures are used to implement several shortest path algorithms efficiently for graphs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The data structure implementations that correspond to the interfaces in Chapter 6 are presented in Part IV.
Some mathematics is used in this part, especially in Chapters 18 to 20, and can be skipped at the discretion of the instructor.
Chapter 15 provides implementations for both stacks and queues.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>First these data structures are implemented using a dynamic array; then they are implemented using linked lists.
In Chapter 16 general linked lists are described.
Extensions such as doubly linked lists, circular linked lists, and cursor implementations are left as exercises.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Chapter 17 describes trees and illustrates the basic traversal schemes.
Chapter 18 is a detailed chapter that provides several implementations of binary search trees.
Initially, the basic binary search tree is shown, and then a binary search tree that supports order statistics is derived.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>AVL trees are discussed but not implemented; however, the more practical red black trees and AA-trees are implemented.
Finally, the B-tree is examined.
Chapter 19 discusses hash tables, and the quadratic probing scheme is implementated after examination of a simpler alternative.
In Chapter 20 we describe the binary heap and examine heapsort and external sorting.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Part V contains material that is suitable for use in a more advanced course or for general reference.
The algorithms are accessible even at the first-year level; however, for completeness we have included sophisticated mathematical analyses that are almost certainly beyond the reach of a first-year student.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Chapter 21 describes the splay tree, which is a binary search tree that seems to perform extremely well in practice and is also competitive with the binary heap in some applications that require priority queues.
Chapter 22 describes priority queues that support merging operations and provides an implementation of the pairing heap.
Finally, Chapter 23 examines the classic disjoint set data structure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Course Organization Ignoring factors such as the balance between theory and practice, the crucial issue in teaching the course is deciding how the materials in Parts II to IV are to be used.
The material in Part I should be covered in depth, and the student should write one or two programs that illustrate the design, implementation, and testing of classes and template classes, and depending on how much C++ is desired to be taught, inheritance.
Next, Chapter 5 discusses Big-Oh, and an exercise in which the student writes a short program and compares the running time with an analysis can be given to test comprehension.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the separation approach, the key concept of Chapter 6 is simply the fact that different data structures support different access schemes with different efficiency.
Students can be asked first to write an inefficient data structure.
Any case study (except the tic-tac-toe example that uses recursion) can be used to test their programs, and the students can compare their inefficient data structures with an efficient library routine (provided by anonymous ftp, as discussed below).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In this scheme all the case studies (except tic-tac-toe) can be examined to see how each of the particular data structures is used.
In this way we see the interface for each data structure, and we see how it is used, but we do not see how it is efficiently implemented.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is truly a separation, and viewing things this way will greatly enhance the ability of students to think abstractly.
Students can be asked to extend the case study but, once again, do not have to know any of the details of the data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The implementation of the data structures can be discussed afterward, and recursion can be introduced whenever the instructor feels it is appropriate (but prior to binary search trees).
The details of sorting can be discussed at any point after recursion.
At this point the course can continue by using the same case studies and experimenting with modifications to the implementations of the data structures.
For instance, the student can experiment with various forms of balanced binary search trees.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Instructors opting for a more traditional approach can simply discuss a case study in Part III after discussing a data structure implementation in Part IV.
The book chapters are meant to be as independent of each other as possible.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Exercises Exercises come in various flavors.
The basic In Short exercise asks a simple question or requires hand-drawn simulations of an algorithm described in the text.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The In Theory section asks questions that either require mathematical analysis or perhaps ask for theoretically interesting solutions to problems.
The In Practice section contains simple programming questions, including questions about syntax or particularly tricky lines of code.
The Programming Projects section contains ideas for extended assignments.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Pedagogical Features The code in the text is fully functional and has been tested on the following compilers: g++ 2.6.2, Sun 3.0.1, and Borland 4.5.
The code is available by anonymous ftp, as discussed below.
This code will be updated as the language evolves, and a version that uses exceptions is provided.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Margin notes are used to highlight important topics.
At the end of each chapter, a list of common errors is provided in the Common Errors section.
The Objects of the Game section lists important terms along with definitions and page references.
References for further reading are provided at the end of most chapters.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Supplements Code Availability: The exact location of this material may change.
The example program code in the book is available via anonymous ftp at ftp.aw.com.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Instructor's Resource Guide: A guide that illustrates several approaches to the material is available to instructors on a disk.
These approaches vary from a strong focus on theory to an emphasis on C++, to a more balanced approach.
Each approach is outlined with sample test questions, sample assignments, and sample syllabi.
Answers to select exercises are also provided.
For more information on this disk, please contactyour sales rep.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Acknowledgements Many, many people have helped me in the preparation of this book.
First, I would like to thank all the folks at Addison-Wesley.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>My editor Carter Shanklin helped me refine my thinking and his assistant Christine Kulke kept everything flowing smoothly.
Craig Johnson, Production Technology Supervisor, was especially helpful with my Frame questions.
I would especially like to thank the people involved in the production of the text: Barbara Conway did a wonderful job of copyediting the manuscript and suggesting improvements throughout; Teri Holden was a fantastic production editor; Holly McLean-Aldis did a great job proofreading; and Lisa Jahred wrote the templates for the book design.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Some of the material in this text is adapted from my textbook Efficient C Programming: A Practical Approach (Prentice-Hall, 1995) and is used with per-mission of the publisher.
I have attempted to place end-of-chapter references where appropriate.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I would like to thank the reviewers, who provided valuable comments, many of which have been incoprorated into the text:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Owen Astrachan Duke University Joe Faletti University of California, San Diego K.
M.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>George Oklahoma State University Jim Heliotis Rochester Institute of Technology Jim Levenick Willamette University George Novacky University of Pittsburgh John Russo Indiana University Laurie White Armstrong State College of Georgia Edward Wright Western Oregon State University Alan Zaring Ohio Weslyan University As usual, I had help from my friends at FIU.
Thanks to Diane Kelly for handling all my other work and leaving me with enough time to work on the text.
I would also like to thank Catherine Hernandez, Steve Luis, and Cory Tsang for their help installing Frame and keeping the printers up and running.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Most of all, I thank Becky, whom I love more than she can imagine, for her support during my book writing, especially in the last year.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>From the Back Cover Algorithms, Data Structures, and Problem Solving with C++ is the first CS2 textbook that clearly separates the interface and implementation of data structures.
The interface and running time of data structures are presented first, and students have the opportunity to use the data structures in a host of practical examples before being introduced to the implementations.
This unique approach enhances the ability of students to think abstractly.Features Retains an emphasis on data structures and algorithm design while using C++ as the language of implementation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reinforces abstraction by discussing interface and implementations of data structures in different parts of the book.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Incorporates case studies such as expression evaluation, cross-reference generation, and shortest path calculations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Provides a complete discussion of time complexity and Big-Oh notation early in the text.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Gives the instructor flexibility in choosing an appropriate balance between practice, theory, and level of C++ detail.
Contains optional advanced material in Part V.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Covers classes, templates, and inheritance as fundamental concepts in sophisticated C++ programs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Contains fully functional code that has been tested on g++2.6.2, Sun 3.0.1, and Borland 4.5 compilers.
Code is integrated into the book and also available by ftp.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Includes end-of-chapter glossaries, summaries of common errors, and a variety of exercises.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>See all Editorial Reviews Product Details * Hardcover: 820 pages * Publisher: Addison-Wesley; 2 edition (June 1996) * Language: English * ISBN-10: 0805316663 * ISBN-13: 978-0805316667 * Product Dimensions: 9.3 x 7.6 x 1.5 inches * Shipping Weight: 3.2 pounds * Average Customer Review: 3.2 out of 5 stars   See all reviews  (4 customer reviews ) * Amazon Best Sellers Rank: #1,183,920 in Books (See Top 100 in Books ) Would you like to update product info orgive feedback on images ?
More About the Author › Visit Amazon's Mark Allen Weiss Page Discover books, learn about writers, read author blogs, and more.
Customer Reviews 3.2 out of 5 stars (4 ) 3.2 out of 5 stars 5 star 1 4 star 1 3 star 1 2 star 0 1 star 1 See all 4 customer reviews Share your thoughts with other customers Write a customer review Most Helpful Customer Reviews 16 of 16 people found the following review helpful 4.0 out of 5 stars Good, but needs improvement January 1, 1998 By A Customer Format:Hardcover I just finished a semester at the University of Texas at Austin in which this book was the text book for an abstract data types class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The book is a good textbook, but not a good desk reference.
The book is obviously written with students in mind, using rhetorical questions, leaving vital areas unexplained as &quot;exercises for the reader&quot;, etc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>As an introductory text, in an introductory class, the book served its purpose, though the professor was required to explain some of the details that the book lacked.
The code that is included in the book is all written in pseudo-code, most of it does not compile without some tweaking, and when a student is trying to grasp a diffucult concept in graph theory, the last thing that student wants is to have to trace through the program, line-by-line, to catch some error that is irrelevant to the larger problem, such as semicolons that have been left out, unmatched parenthesis, variable names that are not allowed by most of the commercial compilers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The book does have a good learning curve, however, and makes for good reading when first approaching a new computer science concept; however, when having to program a particularly hard section of a certain data structure, wading through pages of diatribe against older methods is not what is needed at that time.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For instance, after spending a large portion of an entire chapter on AVL trees, Weiss proceeds to give example code (that doesn't compile on Borland 5.0, Visual C++, or GNU compilers without some tweaking), but leaves out a crucial method!
When first learning about AVL trees, one of the lessons that was drilled into our heads was the diffuculty of AVL deletion... yet the book summed it up in *one* sentence: &quot;As with most data structures, deletion is the hardest task; it is left as an exercise to the reader.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Comment |  Was this review helpful to you?
Yes No 7 of 7 people found the following review helpful 1.0 out of 5 stars Thorough, but NOT for people new to advanced data structures July 26, 1999 By A Customer Format:Hardcover This book is very thorough, but thats really all I can tell you about it's content, because the material (both the algorithm analysis and the data structures material), is presented in such a way as that the author expects you to already have a basic understanding of these concepts.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Worst yet, the author's code is extremely poorly documented.
Stay away from this book if you are new to advanced data types or algorithm analysis.
Comment |  Was this review helpful to you?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Yes No 2 of 2 people found the following review helpful 3.0 out of 5 stars Many details missing or left unexplained.
September 20, 1999 By A Customer Format:Hardcover Tries to cover all topics but leaves many details that are needed by a beginner.
Examples of code are difficult to comprehend.
Comment |  Was this review helpful to you?
Yes No › See all 4 customer reviews (newest first)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Write a customer review Most Recent Customer Reviews 5.0 out of 5 stars This is one book every C++ Programmer should purchase.
This book should be on every C++ programmers list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Of all the books I've read on Data Structures and Algorithms using the C++ language this is the most comprehensive.Read more Published on April 4, 1998 Search Customer Reviews Only search this product's reviews Start your free trial and join millions of Amazon Prime members who enjoy: Prime Instant Videos Watch over 38,000 movies and TV episodes Free Two-Day Shipping Get fast, free shipping on over 15 million items Kindle Owners' Lending Library Borrow from over 300,000 titles for free &gt; Get started Watch.
Read.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Millions of Amazon Prime members enjoy instant videos, free Kindle books and unlimited free two-day shipping. &gt; Get started * Unlimited Instant Videos * Prime Instant Videos Unlimited streaming of thousands of movies and TV shows with Amazon Prime * Learn More About Amazon Prime * Amazon Instant Video Store Rent or buy hit movies and TV shows to stream or download * Your Video Library Your movies and TV shows stored in the cloud * Watch Anywhere Watch instantly on your Kindle Fire, TV, Blu-ray player, or set-top box * MP3s &amp; Cloud Player * MP3 Music Store Shop over 20 million songs * Music on Kindle Fire Discover how to play your music * Cloud Player for Web Play from any browser * Cloud Player for Android For Android phones and tablets * Cloud Player for iOS For iPhone, iPad and iPod touch * Cloud Player for Home For Sonos and Roku * Amazon Cloud Drive * Your Cloud Drive 5 GB of free storage * Get the Desktop App For Windows and Mac * Cloud Drive Photos for Android For Android phones and tablets * Learn More About Cloud Drive * Kindle E-readers * Kindle Small, light, perfect for reading * Kindle Paperwhite World's most advanced e-reader * Kindle Paperwhite 3G With free 3G wireless * Kindle E-reader Accessories Covers, chargers, sleeves and more * Kindle Store * Kindle Books * Newsstand * Kindle Owners' Lending Library With Prime, Kindle owners read for free * Kindle Fire * Fire All new--faster, twice the memory * Fire HD 7&quot;, Dolby audio, ultra-fast Wi-Fi * Fire HD 8.9&quot; 8.9&quot;, Dolby audio, ultra-fast Wi-Fi * Fire HD 8.9&quot; 4G With ultra-fast 4G LTE wireless * Kindle Fire Accessories Cases, chargers, sleeves and more * Kindle Apps &amp; Resources * Kindle Cloud Reader Read your Kindle books in a browser * Free Kindle Reading Apps For PC, iPad, iPhone, Android, and more * Manage Your Kindle * Appstore for Android * Apps * Games * Test Drive Apps Try thousands of apps and games right now * Amazon Apps Kindle, mobile shopping, MP3, and more * Your Apps and Devices View your apps and manage your devices * Digital Games &amp; Software * Game Downloads For PC and Mac * Free-to-Play Games For PC and Mac * Software Downloads For PC and Mac * Your Games &amp; Software Library * Audible Audiobooks * Audible Membership Get to know Audible * Audible Audiobooks &amp; More * Bestsellers * New &amp; Notable * Listener Favorites * Whispersync for Voice Switch between reading and listening * Books * Books * Kindle Books * Children's Books * Textbooks * Audiobooks * Magazines * Movies, Music &amp; Games * Movies &amp; TV * Blu-ray * Amazon Instant Video * Music * MP3 Downloads * Musical Instruments * Entertainment Collectibles * Video Games * Game Downloads * Electronics * TV &amp; Video * Home Audio &amp; Theater * Camera, Photo &amp; Video * Cell Phones &amp; Accessories * Video Games * MP3 Players &amp; Accessories * Car Electronics &amp; GPS * Appliances * Musical Instruments * Electronics Accessories * Computers * Laptops, Tablets &amp; Netbooks * Desktops &amp; Servers * Computer Accessories &amp; Peripherals External drives, mice, networking &amp; more * Computer Parts &amp; Components * Software * PC Games * Printers &amp; Ink * Office &amp; School Supplies * Home, Garden &amp; Pets * Kitchen &amp; Dining * Furniture &amp; Décor * Bedding &amp; Bath * Appliances * Patio, Lawn &amp; Garden * Arts, Crafts &amp; Sewing * Pet Supplies * Tools, Home Improvement * Home Improvement * Power &amp; Hand Tools * Lamps &amp; Light Fixtures * Kitchen &amp; Bath Fixtures * Hardware * Building Supplies * Grocery, Health &amp; Beauty * Grocery &amp; Gourmet Food * Wine * Natural &amp; Organic * Health &amp; Personal Care * Beauty * Toys, Kids &amp; Baby * Toys &amp; Games * Baby * Kids' Clothing * Baby Clothing * Video Games for Kids * Amazon Mom 20% off diapers, free shipping and more * Baby Registry * Clothing, Shoes &amp; Jewelry * Clothing * Shoes * Handbags * Accessories * Luggage * Jewelry * Watches * Sports &amp; Outdoors * Exercise &amp; Fitness * Outdoor Recreation * Hunting &amp; Fishing * Cycling * Athletic &amp; Outdoor Clothing * Boating &amp; Water Sports * Team Sports * Fan Shop * Sports Collectibles * Golf * All Sports &amp; Outdoors * Automotive * Automotive Parts &amp; Accessories * Automotive Tools &amp; Equipment * Car Electronics &amp; GPS * Tires &amp; Wheels * Motorcycle &amp; ATV * Industrial &amp; Scientific * Industrial Supplies * Lab &amp; Scientific * Janitorial * Safety * Unlimited Instant Videos * MP3s &amp; Cloud Player20 million songs, play anywhere * Amazon Cloud Drive5 GB of free storage * Kindle * Appstore for AndroidGet a premium app for free today * Digital Games &amp; Software * Audible Audiobooks * Books * Movies, Music &amp; Games * Electronics &amp; Computers * Home, Garden &amp; Tools * Grocery, Health &amp; Beauty * Toys, Kids &amp; Baby * Clothing, Shoes &amp; Jewelry * Sports &amp; Outdoors * Automotive &amp; Industrial * ›Full Store Directory * Sign in New customer?
Start here.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Your Account * Your Orders * Your Wish List * Your Recommendations * Your Subscribe &amp; Save Items * Manage Your Kindle * Your Cloud Player Play from any browser * Your Cloud Drive 5 GB of free storage * Prime Instant Videos Unlimited streaming of thousands of movies and TV shows * Your Video Library * Your Games &amp; Software Library * Your Android Apps &amp; Devices Your Shopping Cart is empty.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Give it purpose—fill it with books, DVDs, clothes, electronics, and more.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you already have an account, sign in .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There's a problem previewing your cart right now.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Check your Internet connection and go to your cart , or try again .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>View Cart (0 items) (0 item) (0 items)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Create a Wish List * Find a Wish List or Registry * Wish from Any Website Add items to your List from anywhere * Wedding Registry * Baby Registry * Kids' Birthdays * Friends &amp; Family Gifting What Other Items Do Customers Buy After Viewing This Item?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures and Problem Solving Using C++ (2nd Edition)   by Mark A. Weiss Paperback 3.2 out of 5 stars  (14 ) $117.08 * Data Structures and Algorithms in C++   by Adam Drozdek Hardcover 4.5 out of 5 stars  (16 )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Data Structures and Algorithm Analysis in C++ (2nd Edition)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text> by Mark Allen Weiss Hardcover 3.3 out of 5 stars  (27 )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching, Third Edition  by Robert Sedgewick Paperback 4.1 out of 5 stars  (27 ) $19.99 › Explore similar items Sell a Digital Version of This Book in the Kindle Store If you are a publisher or author and hold the digital rights to a book, you can sell a digital version of it in our Kindle Store.Learn more Like 1365878355 false -1 0 0 0 (0) Forums There are no discussions about this product yet.
Be the first to discuss this product with the community.
Start a Discussion Start a new discussion Topic: First post: Receive e-mail when new posts are made Prompts for sign-in   Guidelines Listmania!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>*   Must Have Books for Geek Developers : A list byT.
DEVANESAN &quot;bookman&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>*   Programming Interview Preparation : A list byIgor Kuzmitshov *   Programming Booklist : A list by Zuoliang Hou Create a Listmania! list Search Listmania!
So You'd Like to...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Create a guide Search Guides Look for Similar Items by Category * Books &gt; Computers &amp; Technology &gt; Microsoft &gt;Development &gt;C &amp; C++ Windows Programming * Books &gt; Computers &amp; Technology &gt; Programming &gt;Algorithms * Books &gt; Computers &amp; Technology &gt; Programming &gt;Languages &amp; Tools &gt; C * Books &gt; Computers &amp; Technology &gt; Software * Books &gt; Education &amp; Reference * Books &gt; New, Used &amp; Rental Textbooks &gt; Computer Science &gt;Programming Languages * Books &gt; Science &amp; Math &gt; Mathematics Get to Know Us * Careers * Investor Relations * Press Releases * Amazon and Our Planet * Amazon in the Community Make Money with Us * Sell on Amazon * Become an Affiliate * Advertise Your Products * Independently Publish with Us * › See all Let Us Help You * Your Account * Shipping Rates &amp; Policies * Amazon Prime * Returns Are Easy * Manage Your Kindle * Help Brazil Canada China France Germany Italy Japan Spain United Kingdom 6pm Score deals on fashion brands AbeBooks Rare Books &amp; Textbooks AfterSchool.com Kids' Sports, Footwear, Dance &amp; Crafts AmazonFresh Groceries &amp; More Right To Your Door AmazonLocal Great Local Deals in Your City AmazonSupply Business, Industrial &amp; Scientific Supplies AmazonWebServices Scalable Cloud Services Askville Community Answers   Audible Download Audio Books BeautyBar.com Prestige Beauty Delivered Book Depository Books With Free Delivery Worldwide Bookworm.com Books For Children Of All Ages Casa.com Kitchen, Storage &amp; Everything Home CreateSpace Indie Print Publishing Made Easy Diapers.com Everything But The Baby DPReview Digital Photography   Fabric Sewing, Quilting &amp; Knitting IMDb Movies, TV &amp; Celebrities Junglee.com Shop Online in India Kindle Direct Publishing Indie Digital Publishing Made Easy MYHABIT Private Fashion Designer Sales Shopbop Designer Fashion Brands Soap.com Health, Beauty &amp; Home Essentials Vine.com Everything to Live Life Green     Wag.com Everything For Your Pet Warehouse Deals Open-Box Discounts Woot Never Gonna Give You Up Yoyo.com A Happy Place To Shop For Toys Zappos Shoes &amp; Clothing     Conditions of Use Privacy Notice Interest-Based Ads © 1996-2013, Amazon.com, Inc. or its affiliates Free Online Algorithms and Data Structures Books :: FreeTechBooks.com FreeTechBooks.com Free Online Computer Science and Programming Books, Textbooks, and Lecture Notes  Register   |   FAQ   |  Search   |  Memberlist   |  RSS Feed     |  Contact Form   |  Log in   FreeTechBooks.com Homepage » Algorithms and Data Structures Goto page 1, 2   Next   Algorithms and Data Structures  Topics   Views  Advertisements A Practical Introduction to Data Structures and Algorithm Analysis Third Edition (C++ Version)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This book provides a thorough and comprehensive treatment of fundamental data structures and the principles of algorithm analysis.
Focuses on the principles required to select or design the data structure that will best solve the problem.
42166 Algorithmic Problem Solving An introduction to problem-solving and algorithm formulation using an example-driven approach.
It demonstrates the importance of mathematical calculation, but the chosen examples are typically not mathematical.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>76082 Algorithms Contains carefully selected and clustered algorithm topics.
No attempt was made to be encyclopedic, so that this book can include topics traditionally de-emphasized or omitted from most Algorithms books.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>48886 Algorithms for Programmers Selected algorithms for programmers who are interested in the treated algorithms and actually want to create a working and reasonably optimized code.
83286 Algorithms in the Real World: Lecture Notes This document looks both at algorithms and at case studies in which the problems are used in real-world applications.
24572 Art Gallery Theorems and Algorithms Art gallery theorems and algorithms are so called because they relate to problems involving the visibility of geometrical shapes and their internal surfaces.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This book explores generalizations and specializations in these areas.
8653 Art of Programming Contest A textbook for an algorithm course focusing on programming as well as a programming course focusing on algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The book is designed to train students to participate in competitions, especially the ACM International Collegiate Programming Contest.
24573 Average Case Analysis of Algorithms on Sequences Describes methods employed in average case analysis of algorithms, combining both analytical and probabilistic tools.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>13346 Computational Modeling and Complexity Science This book is about data structures and algorithms, intermediate programming in Python, complexity science and the philosophy of science.
9329 Data Structures and Algorithms with Object-Oriented Design Patterns in C# Promotes object-oriented design using C# and to illustrate the use of the emerging object-oriented design patterns.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>43088 Data Structures and Algorithms with Object-Oriented Design Patterns in C++ Promotes object-oriented design using C++ and illustrates the use of the emerging object-oriented design patterns.
103979 Data Structures and Algorithms With Object-Oriented Design Patterns in Java Covers the fundamentals of data structures and algorithms -- the basic elements from which large and complex software artifacts are built -- using Java programming language.
33734 Design and Analysis of Algorithms: Course Notes These notes teach the techniques for the design and analysis of algorithms and data structures.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It also study efficient algorithms from areas such as graph theory, networks, scheduling etc.
52800 Design and Analysis of Computer Algorithms Focuses on how to design good algorithms, and how to analyze their efficiency.
33320 Efficient Algorithms for Sorting and Synchronization Presents efficient algorithms for internal and external parallel sorting and remote data update.
24946 Foundations of Computer Science Introduces the principles of data structures and algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Emphasises the algorithmic side of programming, focusing on problem-solving rather than on hardware-level bits and bytes.
22752 GNU libavl Online Book Provides an introduction to binary tree techniques using GNU libavl, a library in ANSI C for manipulation of various types of binary trees.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>11027 Introduction to Algorithms Covers the behaviour, implementation, correctness and complexity of some well known array algorithms, especially for sorting and searching.
27592 Jeff Erickson's Algorithms Course Materials Helps students develop algorithmic intuition, i.e. understanding how various algorithms really work, how to attack a problem for the first time, how to tell which techniques will work at all and which ones will work best.
16720 Notes for the Course of Advanced Algorithms Describe a couple of the classical algorithms which are not taught in a first algorithms course.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Also give a general understanding of efficient algorithms and a better understanding for how to design and analyze efficient algorithms.
13768 Notes for the Course of Algorithms Deal with how to design good algorithms, which is about the mathematical theory behind the design of good programs. [ Goto page: 1 ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>5 ,6 , 7 ] 16862 Notes for the Course of Data Structures Focus on the representation and algorithms, the concrete issues of implementation of data structures.
Provide the students with the tools needed to design and implement their own data structures.
31901 Object-oriented Programming with Ansi-C Uses ANSI-C to discover how object-oriented programming is done, what its techniques are, why they help us solve bigger problems, and how we harness generality and program to catch mistakes earlier.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>18216 Optimization Algorithms on Matrix Manifolds This book offers techniques with broad applications in linear algebra, signal processing, data mining, computer vision, and statistical analysis.
It can serve as a graduate-level textbook.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>9467 Practical Optimization: A Gentle Introduction An introduction to the most important topics in applied optimization.
9464 Advertisements   Select a category Computer Science Books----------------Introduction to Computer ScienceAlgorithms and Data StructuresObject Oriented ProgrammingTheory of ComputationFormal MethodsFunctional ProgrammingLogic ProgrammingArtificial IntelligenceComputer VisionCompiler Design and ConstructionComputer Organization and ArchitectureParallel ComputingConcurrent ProgrammingOperating SystemsData Communication and NetworksInformation SecurityInformation Theory Digital LibrariesInformation SystemsSoftware EngineeringGame Development and Multimedia Mathematics Books----------------MathematicsAlgebraCategory Theory Linear AlgebraComputer Aided MathematicsDiscrete MathematicsNumerical Methods Graph TheoryOperations Research Supporting Fields Books----------------Electric CircuitsSignal ProcessingWeb Design and Development Operating System Books ----------------UnixGNU/LinuxFreeBSDiPhone iOS 4 Programming/Scripting Books ----------------AdaAssemblyC / C++Common LispForthJavaJavaScriptLuaMicrosoft .NETPerlPHPPythonRebolRubySchemeTcl/Tk Miscellaneous Books---------------- Software Libre and Open Source MovementHackers and Computer PhilosophyOpen Source Productivity Tools General----------------Open Document LicensesOther 'free computer books' sites   Goto page 1, 2   Next   Powered by phpBB © phpBB Group Design by Vjacheslav Trushkin for phpBBStyles.com . phpBB SEO Content © FreeTechBooks.com How to Deal with Algorithm/Data Structures Problems in Interview Process?
- Stack Overflow Stack Exchange log in | careers 2.0 | chat | meta | about | faq Stack Overflow * Questions * Tags * Users * Badges * Unanswered * Ask Question How to Deal with Algorithm/Data Structures Problems in Interview Process?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>up vote 6 down vote favorite 4 Recently I have been interviewing for quite a few Software Development Engineering position and almost every interview I have faced have been concentrated heavily on Algorithm and Data Structures, am wondering how could it be possible to face an unknown problem and design an algorithm for it using appropriate data structures that too in the span on minutes - 5 mins at max.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I would really appreciate if someone can put some light on the issue and how to make best of the interview process in terms of dealing with Algorithm/Data Structures Problems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>algorithm data-structures share |improve this question asked Sep 30 '09 at 16:47 community wiki Rachel 3   Practice.
The interviewer wants someone who can solve these kinds of problems, so you'll just have to familiarise yourself with the available arrays/trees/hashes etc in the languages you program, along with common searching and sorting algorithms, and possibly graph structures/algorithms too if you're seeing them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Once you can offer a viable approach quickly, you can ace those questions... – Steve Jessop Sep 30 '09 at 16:54 6 Answers active oldest votes up vote 8 down vote accepted When I've interviewed people, and asked them questions, I'm not looking for an answer (necessarily).
Talk it out - discuss what you're thinking.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>As an interviewer, seeing the logical train of thought will score more points with me than just saying &quot;I'd do ...&quot;.
If I can see that you know how to approach the problem, that demonstrates the ability to work out problems, which is usually the goal.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 30 '09 at 16:51 community wiki Reed Copsey 6   Speaking as an interviewer, this is exactly what I look for - what led you to a conclusion - not the conclusion itself.
Usually if its not an acceptable answer I will continue to prod and hint at the direction I am looking for.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Learning to talk out your thought process in a high stress situation like an interview is tough, but definitely something you want to practice. – Greg Rogers Sep 30 '09 at 16:57 2   Yeah - The fact that the interviewee will communicate with me while they're thinking about it is more valuable, IMO, then them being able to come up with an answer on the spot. – Reed Copsey Sep 30 '09 at 17:18 up vote 5 down vote The point of asking these questions is that as people who build software, we are supposed to know this stuff and be able to apply them.
This skill is a fundamental component and has uses beyond just passing the interview.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Most of the topics are discussed in any university algorithm course.
But to be really good at them, you can try practicing problems fromTopCoder , SPOJ and UVa (and lots of other sites like these).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 30 '09 at 17:24 community wiki MAK up vote 2 down vote If you are interviewing for a hands-on engineering job, with some design/architecture aspects, expect some of the basic algorithm and data structure questions.
These are the building blocks of a good programmer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I would familiarize myself with the basic data structures and the common algorithms (sort, search, match) and the inherent cpabilities, limitations and challenges of each.
Often, a 5-minute question is just presented to see how you approach a problem, not how you solve it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 30 '09 at 16:53 community wiki Traveling Tech Guy 1   +1 for 5-minute question is just presented to see how you approach a problem, not how to solve it. – Rachel Sep 30 '09 at 17:03 up vote 2 down vote Steve Yegge has a really great blog entry on getting a job at Google where he addresses what you need to know about algorithms for a Google interview and what preparation materials you should read.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 30 '09 at 16:55 community wiki Asaph up vote 1 down vote This is a really nebulous question, given that you're asking how to be prepared to write algorithms with data structures.
That's akin to asking how to know how to makethings with materials.
What sort of algorithms are they expecting you to produce?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What sort of data structures are they asking you to use or produce?
The interviewer is (likely) trying to get a feel for how you think.
There may be some that are looking for &quot;book answers&quot; too, unfortunately.
Some examples would be beneficial.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 30 '09 at 16:51 community wiki Adam Robinson Actually my question was about how to deal with algorithm/data structures questions which come out of blue and we need to solve them in short time span of couple of minutes.
I agree with your point about interviewer is trying to get a feel for how interviewee would think. – Rachel Sep 30 '09 at 16:56 up vote 0 down vote You might want to look at a book on Data structures and Algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Aside from the ones listed by the blog entry recommended by Asaph (and a quick look indicates that the blog is worth reading), I've been enjoying How to Think About Algorithms (which I got by ILL).
It is a college textbook which gives general patterns of algorithmic thinking as well as specific algorithm examples (and some exercises have answers in the back).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>share |improve this answer answered Sep 30 '09 at 17:40 community wiki Kathy Van Stone Your Answer   draft saved draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Stack Exchange Post as a guest Name Email required, but not shown Post as a guest Name Email required, but not shown discard By posting your answer, you agree to theprivacy policy and terms of service .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Not the answer you're looking for?
Browse other questions tagged algorithm data-structures or ask your own question .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>tagged algorithm  × 28836 data-structures  ×  7850 asked 3 years ago viewed 5213 times active 3 years ago Related 23 Algorithm/Data Structure Design Interview Questions 9 Where can I learn how to combine algorithms and data structures?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>38 Algorithms and data structures that are not mainstream?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>9 How can I rebuild my base of algorithms/data structures knowledge?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>27 Learning Algorithms and Data Structures Fundamentals 0 List of generic algorithms and data structures 5 Interview Question: Data structure for a large social network 5 How to prove a lower bound logn for a data structure?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>0 data structure and algorithm for table allocations in restaurant?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>2 How can I improve this JavaScript DOM-manipulation data-structure/algorithm?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>question feed about | faq | blog | chat | data | legal | privacy policy | jobs | advertising info |mobile | contact us | feedback ■ stackoverflow.com   ■ api/apps   ■ careers 2.0   ■ serverfault.com   ■ superuser.com   ■ meta   ■ area 51   ■ webapps   ■ gaming   ■ ubuntu   ■ webmasters   ■ cooking   ■ game development   ■ math   ■  photography   ■ stats   ■ tex   ■  english   ■ theoretical cs   ■ programmers   ■ unix   ■ apple   ■ wordpress   ■ physics   ■ home improvement   ■ gis   ■  electrical engineering   ■ android   ■ security   ■ bicycles   ■ dba   ■  drupal   ■ sharepoint   ■ scifi &amp; fantasy   ■ ux   ■ skeptics   ■ rpg   ■  judaism   ■ mathematica   ■ travel   rev 2013.4.12.642 site design / logo © 2013 stack exchange inc; user contributions licensed undercc-wiki with attribution required Stack Overflow works best with JavaScript enabled VT ECE 2574 Introduction to Data Structures and Algorithms (3C) Skip Menu * Skip to Search * Skip to Main Navigation * Skip to Sub Navigation * Skip to Main Content * Skip to Footer ECE: Electrical &amp; Computer Engineering Return to Skip Menu Search Return to Skip Menu Main Navigation * Home * About ECE * Undergraduate Programs * Graduate Programs * Research Programs * Service to Industry * ECE People * News &amp; Events Return to Skip Menu Sub Navigation Undergrad * Undergraduate Home * * News and Events * Prospective Student Info * Degree requirements * Courses * Design Projects * Research * Scholarships &amp; Awards * Student organizations * Advising * Forms, policies, procedures * Objectives Return to Skip Menu Main Content ECE 2574 Introduction to Data Structures and Algorithms Spring 2013 textbook list The Spring 2013 ECE textbook list is available online for students.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Courses for non-majors Current Prerequisites &amp; Course Offering For current prerequisites for a particular course, and to view course offerings for a particular semester, see the Virginia TechCourse Timetables .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Return to course list ECE 2574 Introduction to Data Structures and Algorithms (3C)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Introduces fundamental data structures, algorithms, and abstract data types.
Main topics include data structures such as arrays, linked lists, stacks, queues, graphs, and trees, and algorithms such as those that are used for list manipulation, graph searches, sorting, searching, and tree traversals.
Implementation of data structures and algorithms in C++.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What is the reason for this course?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This is the second course in computer programming for Computer Engineering (CpE) majors and is based on the recommended curriculum of the Association for Computing Machinery (ACM).
It provides the foundation for other courses in the CpE curriculum such as Object-Oriented Design, Data Structures and File Management, and Operating Systems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The course covers the fundamentals of computer programming including data structures such as arrays, lists, stacks, queues, and trees, and algorithms such as list manipulation, sorting, graph searches, and tree traversals.
The course thus provides a foundation for CpE students in computer programming.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Required for all CPE majors.
Typically offered: Fall, Spring.
Program Area: Computers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Prerequisites: C- or better in 1574.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Why are these prerequisites or corequisites required?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This course presupposes the ability to program in the beginning language C++; completion of prerequisites would suffice.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Department Syllabus Information:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Major Measurable Learning Objectives: * design algorithms for solving problems that use data structures such as arrays, linked lists, stacks, queues, graphs, and trees, and algorithms such as those that are used for list manipulation, graph manipulation (e.g., depth-first search), sorting, searching, and tree traversals * implement algorithms in C++ using good programming style.
Course Topics Topic Percentage Algorithm Design Methodology * Top-down design * Hierarchical modularization * Stepwise refinement 5% Abstract Data Types * Information hiding * Encapsulation * Physical vs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Logical abstraction * Design and implementation of list ADTs using arrays and linked lists 20% Recursion in Programming and Problem Solving * Recursive valued functions: Factorial * Classical problems: Ackermann’s function, 8-Queens problem, * Towers of Hanoi, detecting palindromes * Relation to mathematical induction 10% Stacks * Stack ADT * Implementation using arrays, linked lists, and list ADTs * Applications: Checking balanced braces, recognizing strings, depth-first searches on graphs 10% Queues * Queue ADT * Implementation using arrays, linked lists, and list ADTs * Applications: breadth-first searches, recognizing palindromes 10% Searching Techniques * Sequential search * Binary search 5% Sorting Algorithms * Selection sort, Bubble sort, Insertion sort, Mergesort * Non-comparison-based sorting: Counting sort 15% Introduction to Algorithm Analysis * Algorithm comparison * Big O notation * Orders of magnitude * Analysis of sorting and searching algorithms 10% Trees * Introduction, Terminology * Binary Trees * Tree Traversals * Applications: Huffman’s algorithm 15% Return to course list Return to Skip Menu Footer Copyright © 2012 Virginia Tech Department of Electrical and Computer Engineering Images on this site are the property of Virginia Tech.
They may not be used for commercial purposes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An Affirmative Action/Equal Opportunity Employer | Privacy Statement | Contact Webmaster Introduction — Problem Solving with Algorithms and Data Structures Navigation * index * next | * previous | * Problem Solving with Algorithms and Data Structures » * logout | Table Of Contents * Introduction * Objectives * Getting Started * What Is Computer Science?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* What Is Programming?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why Study Data Structures and Abstract Data Types?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Why Study Algorithms?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Review of Basic Python * Getting Started with Data * Built-in Atomic Data Types * Built-in Collection Data Types * Input and Output * String Formatting * Control Structures * Exception Handling * Defining Functions * Object-Oriented Programming in Python: Defining Classes * A Fraction Class * Inheritance: Logic Gates and Circuits * Summary * Key Terms * Discussion Questions * Programming Exercises Previous topic Welcome to Problem Solving with Algorithms and Data Structures Next topic Algorithm Analysis Runestone Links * Report a Problem * About Runestone * Instructors Page Follow @iRunestone Quick search Enter search terms or a module, class or function name.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Introduction¶ Objectives¶ * To review the ideas of computer science, programming, and problem-solving. * To understand abstraction and the role it plays in the problem-solving process. * To understand and implement the notion of an abstract data type. * To review the Python programming language.
Getting Started¶ The way we think about programming has undergone many changes in the years since the first electronic computers required patch cables and switches to convey instructions from human to machine.
As is the case with many aspects of society, changes in computing technology provide computer scientists with a growing number of tools and platforms on which to practice their craft.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Advances such as faster processors, high-speed networks, and large memory capacities have created a spiral of complexity through which computer scientists must navigate.
Throughout all of this rapid evolution, a number of basic principles have remained constant.
The science of computing is concerned with using computers to solve problems.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You have no doubt spent considerable time learning the basics of problem-solving and hopefully feel confident in your ability to take a problem statement and develop a solution.
You have also learned that writing computer programs is often hard.
The complexity of large problems and the corresponding complexity of the solutions can tend to overshadow the fundamental ideas related to the problem-solving process.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This chapter emphasizes two important areas for the rest of the text.
First, it reviews the framework within which computer science and the study of algorithms and data structures must fit, in particular, the reasons why we need to study these topics and how understanding these topics helps us to become better problem solvers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Second, we review the Python programming language.
Although we cannot provide a detailed, exhaustive reference, we will give examples and explanations for the basic constructs and ideas that will occur throughout the remaining chapters.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What Is Computer Science?¶ Computer science is often difficult to define.
This is probably due to the unfortunate use of the word “computer&quot; in the name.
As you are perhaps aware, computer science is not simply the study of computers.
Although computers play an important supporting role as a tool in the discipline, they are just that–tools.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Computer science is the study of problems, problem-solving, and the solutions that come out of the problem-solving process.
Given a problem, a computer scientist’s goal is to develop analgorithm, a step-by-step list of instructions for solving any instance of the problem that might arise.
Algorithms are finite processes that if followed will solve the problem.
Algorithms are solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Computer science can be thought of as the study of algorithms.
However, we must be careful to include the fact that some problems may not have a solution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Although proving this statement is beyond the scope of this text, the fact that some problems cannot be solved is important for those who study computer science.
We can fully define computer science, then, by including both types of problems and stating that computer science is the study of solutions to problems as well as the study of problems with no solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is also very common to include the word computable when describing problems and solutions.
We say that a problem is computable if an algorithm exists for solving it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An alternative definition for computer science, then, is to say that computer science is the study of problems that are and that are not computable, the study of the existence and the nonexistence of algorithms.
In any case, you will note that the word “computer&quot; did not come up at all.
Solutions are considered independent from the machine.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Computer science, as it pertains to the problem-solving process itself, is also the study ofabstraction.
Abstraction allows us to view the problem and solution in such a way as to separate the so-called logical and physical perspectives.
The basic idea is familiar to us in a common example.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Consider the automobile that you may have driven to school or work today.
As a driver, a user of the car, you have certain interactions that take place in order to utilize the car for its intended purpose.
You get in, insert the key, start the car, shift, brake, accelerate, and steer in order to drive.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>From an abstraction point of view, we can say that you are seeing the logical perspective of the automobile.
You are using the functions provided by the car designers for the purpose of transporting you from one location to another.
These functions are sometimes also referred to as theinterface.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>On the other hand, the mechanic who must repair your automobile takes a very different point of view.
She not only knows how to drive but must know all of the details necessary to carry out all the functions that we take for granted.
She needs to understand how the engine works, how the transmission shifts gears, how temperature is controlled, and so on.
This is known as the physical perspective, the details that take place “under the hood.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The same thing happens when we use computers.
Most people use computers to write documents, send and receive email, surf the web, play music, store images, and play games without any knowledge of the details that take place to allow those types of applications to work.
They view computers from a logical or user perspective.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Computer scientists, programmers, technology support staff, and system administrators take a very different view of the computer.
They must know the details of how operating systems work, how network protocols are configured, and how to code various scripts that control function.
They must be able to control the low-level details that a user simply assumes.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The common point for both of these examples is that the user of the abstraction, sometimes also called the client, does not need to know the details as long as the user is aware of the way the interface works.
This interface is the way we as users communicate with the underlying complexities of the implementation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>As another example of abstraction, consider the Python math module.
Once we import the module, we can perform computations such as &gt;&gt;&gt; import math &gt;&gt;&gt; math.sqrt(16) 4.0 &gt;&gt;&gt; This is an example of procedural abstraction.
We do not necessarily know how the square root is being calculated, but we know what the function is called and how to use it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If we perform the import correctly, we can assume that the function will provide us with the correct results.
We know that someone implemented a solution to the square root problem but we only need to know how to use it.
This is sometimes referred to as a “black box&quot; view of a process.
We simply describe the interface: the name of the function, what is needed (the parameters), and what will be returned.
The details are hidden inside (Figure 1 ).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Procedural Abstraction – test What Is Programming?¶ Programming is the process of taking an algorithm and encoding it into a notation, a programming language, so that it can be executed by a computer.
Although many programming languages and many different types of computers exist, the important first step is the need to have the solution.
Without an algorithm there can be no program.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Computer science is not the study of programming.
Programming, however, is an important part of what a computer scientist does.
Programming is often the way that we create a representation for our solutions.
Therefore, this language representation and the process of creating it becomes a fundamental part of the discipline.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithms describe the solution to a problem in terms of the data needed to represent the problem instance and the set of steps necessary to produce the intended result.
Programming languages must provide a notational way to represent both the process and the data.
To this end, languages provide control constructs and data types.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Control constructs allow algorithmic steps to be represented in a convenient yet unambiguous way.
At a minimum, algorithms require constructs that perform sequential processing, selection for decision-making, and iteration for repetitive control.
As long as the language provides these basic statements, it can be used for algorithm representation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All data items in the computer are represented as strings of binary digits.
In order to give these strings meaning, we need to havedata types.
Data types provide an interpretation for this binary data so that we can think about the data in terms that make sense with respect to the problem being solved.
These low-level, built-in data types (sometimes called the primitive data types) provide the building blocks for algorithm development.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example, most programming languages provide a data type for integers.
Strings of binary digits in the computer’s memory can be interpreted as integers and given the typical meanings that we commonly associate with integers (e.g. 23, 654, and -19).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In addition, a data type also provides a description of the operations that the data items can participate in.
With integers, operations such as addition, subtraction, and multiplication are common.
We have come to expect that numeric types of data can participate in these arithmetic operations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The difficulty that often arises for us is the fact that problems and their solutions are very complex.
These simple, language-provided constructs and data types, although certainly sufficient to represent complex solutions, are typically at a disadvantage as we work through the problem-solving process.
We need ways to control this complexity and assist with the creation of solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Why Study Data Structures and Abstract Data Types?¶ To manage the complexity of problems and the problem-solving process, computer scientists use abstractions to allow them to focus on the “big picture&quot; without getting lost in the details.
By creating models of the problem domain, we are able to utilize a better and more efficient problem-solving process.
These models allow us to describe the data that our algorithms will manipulate in a much more consistent way with respect to the problem itself.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Earlier, we referred to procedural abstraction as a process that hides the details of a particular function to allow the user or client to view it at a very high level.
We now turn our attention to a similar idea, that ofdata abstraction.
An abstract data type, sometimes abbreviated ADT, is a logical description of how we view the data and the operations that are allowed without regard to how they will be implemented.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means that we are concerned only with what the data is representing and not with how it will eventually be constructed.
By providing this level of abstraction, we are creating an encapsulation around the data.
The idea is that by encapsulating the details of the implementation, we are hiding them from the user’s view.
This is called information hiding.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Figure 2 shows a picture of what an abstract data type is and how it operates.
The user interacts with the interface, using the operations that have been specified by the abstract data type.
The abstract data type is the shell that the user interacts with.
The implementation is hidden one level deeper.
The user is not concerned with the details of the implementation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Abstract Data Type The implementation of an abstract data type, often referred to as a data structure, will require that we provide a physical view of the data using some collection of programming constructs and primitive data types.
As we discussed earlier, the separation of these two perspectives will allow us to define the complex data models for our problems without giving any indication as to the details of how the model will actually be built.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This provides an implementation-independent view of the data.
Since there will usually be many different ways to implement an abstract data type, this implementation independence allows the programmer to switch the details of the implementation without changing the way the user of the data interacts with it.
The user can remain focused on the problem-solving process.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Why Study Algorithms?¶ Computer scientists learn by experience.
We learn by seeing others solve problems and by solving problems by ourselves.
Being exposed to different problem-solving techniques and seeing how different algorithms are designed helps us to take on the next challenging problem that we are given.
By considering a number of different algorithms, we can begin to develop pattern recognition so that the next time a similar problem arises, we are better able to solve it.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithms are often quite different from one another.
Consider the example of sqrt seen earlier.
It is entirely possible that there are many different ways to implement the details to compute the square root function.
One algorithm may use many fewer resources than another.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One algorithm might take 10 times as long to return the result as the other.
We would like to have some way to compare these two solutions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Even though they both work, one is perhaps “better&quot; than the other.
We might suggest that one is more efficient or that one simply works faster or uses less memory.
As we study algorithms, we can learn analysis techniques that allow us to compare and contrast solutions based solely on their own characteristics, not the characteristics of the program or computer used to implement them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the worst case scenario, we may have a problem that is intractable, meaning that there is no algorithm that can solve the problem in a realistic amount of time.
It is important to be able to distinguish between those problems that have solutions, those that do not, and those where solutions exist but require too much time or other resources to work reasonably.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There will often be trade-offs that we will need to identify and decide upon.
As computer scientists, in addition to our ability to solve problems, we will also need to know and understand solution evaluation techniques.
In the end, there are often many ways to solve a problem.
Finding a solution and then deciding whether it is a good one are tasks that we will do over and over again.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Review of Basic Python¶ In this section, we will review the programming language Python and also provide some more detailed examples of the ideas from the previous section.
If you are new to Python or find that you need more information about any of the topics presented, we recommend that you consult the resources listed at the end of this book.{oreilly04}{zelle04} Our goal here is to reacquaint you with the language and also reinforce some of the concepts that will be central to later chapters.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Python is a modern, easy-to-learn, object-oriented programming language.
It has a powerful set of built-in data types and easy-to-use control constructs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Since Python is an interpreted language, it is most easily reviewed by simply looking at and describing interactive sessions.
You should recall that the interpreter displays the familiar&gt;&gt;&gt; prompt and then evaluates the Python construct that you provide.
For example, &gt;&gt;&gt; print(&quot;Algorithms and Data Structures&quot;) Algorithms and Data Structures &gt;&gt;&gt; shows the prompt, theprint function, the result, and the next prompt.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Getting Started with Data¶ We stated above that Python supports the object-oriented programming paradigm.
This means that Python considers data to be the focal point of the problem-solving process.
In Python, as well as in any other object-oriented programming language, we define aclass to be a description of what the data look like (the state) and what the data can do (the behavior).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Classes are analogous to abstract data types because a user of a class only sees the state and behavior of a data item.
Data items are calledobjects in the object-oriented paradigm.
An object is an instance of a class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Built-in Atomic Data Types¶ We will begin our review by considering the atomic data types.
Python has two main built-in numeric classes that implement the integer and floating point data types.
These Python classes are calledint and float.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The standard arithmetic operations, +, -, *, /, and ** (exponentiation), can be used with parentheses forcing the order of operations away from normal operator precedence.
Other very useful operations are the remainder (modulo) operator, %, and integer division, //.
Note that when two integers are divided, the result is a floating point.
The integer division operator returns the integer portion of the quotient by truncating any fractional part.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>print 2+3*4 print (2+3)*4 print 2**10 print 6/3 print 7/3 print 7//3 print 7%3 print 3/6 print 3//6 print 3%6 print 2**100 (intro_1)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load The boolean data type, implemented as the Python bool class, will be quite useful for representing truth values.
The possible state values for a boolean object areTrue and False with the standard boolean operators, and, or, and not.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10&gt;&gt;&gt; True True &gt;&gt;&gt; False False &gt;&gt;&gt; False or True True &gt;&gt;&gt; not (False or True) False &gt;&gt;&gt; True and True True Boolean data objects are also used as results for comparison operators such as equality (==) and greater than (\(&gt;\)).
In addition, relational operators and logical operators can be combined together to form complex logical questions.Table 1 shows the relational and logical operators with examples shown in the session that follows.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Operation Name Operator Explanation less than \(&lt;\) Less than operator greater than \(&gt;\) Greater than operator less than or equal \(&lt;=\) Less than or equal to operator greater than or equal \(&gt;=\) Greater than or equal to operator equal \(==\) Equality operator not equal \(!
=\) Not equal operator logical and \(and\) Both operands True for result to be True logical or \(or\) One or the other operand is True for the result to be True logical not \(not\) Negates the truth value, False becomes True, True becomes False Relational and Logical Operators print(5==10) print(10 &gt; 5) print((5 &gt;= 1) and (5 &lt;= 10)) (intro_2)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load Identifiers are used in programming languages as names.
In Python, identifiers start with a letter or an underscore (_), are case sensitive, and can be of any length.
Remember that it is always a good idea to use names that convey meaning so that your program code is easier to read and understand.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A Python variable is created when a name is used for the first time on the left-hand side of an assignment statement.
Assignment statements provide a way to associate a name with a value.
The variable will hold a reference to a piece of data and not the data itself.
Consider the following session:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9&gt;&gt;&gt; theSum = 0 &gt;&gt;&gt; theSum 0 &gt;&gt;&gt; theSum = theSum + 1 &gt;&gt;&gt; theSum 1 &gt;&gt;&gt; theSum = True &gt;&gt;&gt; theSum True The assignment statement theSum = 0 creates a variable calledtheSum and lets it hold the reference to the data object0 (see Figure 3 ).
In general, the right-hand side of the assignment statement is evaluated and a reference to the resulting data object is “assigned&quot; to the name on the left-hand side.
At this point in our example, the type of the variable is integer as that is the type of the data currently being referred to bythesum.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the type of the data changes (seeFigure 4 ), as shown above with the boolean valueTrue, so does the type of the variable ( thesum is now of the type boolean).
The assignment statement changes the reference being held by the variable.
This is a dynamic characteristic of Python.
The same variable can refer to many different types of data.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Variables Hold References to Data Objects Assignment Changes the Reference Built-in Collection Data Types¶ In addition to the numeric and boolean classes, Python has a number of very powerful built-in collection classes.
Lists, strings, and tuples are ordered collections that are very similar in general structure but have specific differences that must be understood for them to be used properly.
Sets and dictionaries are unordered collections.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A list is an ordered collection of zero or more references to Python data objects.
Lists are written as comma-delimited values enclosed in square brackets.
The empty list is simply[ ].
Lists are heterogeneous, meaning that the data objects need not all be from the same class and the collection can be assigned to a variable as below.
The following fragment shows a variety of Python data objects in a list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5&gt;&gt;&gt; [1,3,True,6.5] [1, 3, True, 6.5] &gt;&gt;&gt; myList = [1,3,True,6.5] &gt;&gt;&gt; myList [1, 3, True, 6.5]
Note that when Python evaluates a list, the list itself is returned.
However, in order to remember the list for later processing, its reference needs to be assigned to a variable.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Since lists are considered to be sequentially ordered, they support a number of operations that can be applied to any Python sequence.Table 2 reviews these operations and the following session gives examples of their use.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Operation Name Operator Explanation indexing [ ]
Access an element of a sequence concatenation + Combine sequences together repetition * Concatenate a repeated number of times membership in Ask whether an item is in a sequence length len Ask the number of items in the sequence slicing [ : ]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Extract a part of a sequence Operations on Any Sequence in Python Note that the indices for lists (sequences) start counting with 0.
The slice operation, myList[1:3], returns a list of items starting with the item indexed by 1 up to but not including the item indexed by 3.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sometimes, you will want to initialize a list.
This can quickly be accomplished by using repetition.
For example, &gt;&gt;&gt; myList = [0] * 6 &gt;&gt;&gt; myList [0, 0, 0, 0, 0, 0]
One very important aside relating to the repetition operator is that the result is a repetition of references to the data objects in the sequence.
This can best be seen by considering the following session:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>myList = [1,2,3,4]
A = [myList]*3 print(A) myList[2]=45 print(A) (intro_3)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load The variable A holds a collection of three references to the original list calledmyList.
Note that a change to one element of myList shows up in all three occurrences inA.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Lists support a number of methods that will be used to build data structures.
Table 3 provides a summary.
Examples of their use follow.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Method Name Use Explanation append alist.append(item) Adds a new item to the end of a list insert alist.insert(i,item) Inserts an item at the ith position in a list pop alist.pop() Removes and returns the last item in a list pop alist.pop(i) Removes and returns the ith item in a list sort alist.sort() Modifies a list to be sorted reverse alist.reverse() Modifies a list to be in reverse order del del alist[i]
Deletes the item in the ith position index alist.index(item) Returns the index of the first occurrence of item count alist.count(item) Returns the number of occurrences of item remove alist.remove(item) Removes the first occurrence of item Methods Provided by Lists in Python myList = [1024, 3, True, 6.5] myList.append(False) print(myList) myList.insert(2,4.5) print(myList) print(myList.pop()) print(myList) print(myList.pop(1)) print(myList) myList.pop(2) print(myList) myList.sort() print(myList) myList.reverse() print(myList) print(myList.count(6.5)) print(myList.index(4.5)) myList.remove(6.5) print(myList) del myList[0] print(myList) (intro_5)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load You can see that some of the methods, such as pop, return a value and also modify the list.
Others, such asreverse, simply modify the list with no return value.pop will default to the end of the list but can also remove and return a specific item.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The index range starting from 0 is again used for these methods.
You should also notice the familiar “dot&quot; notation for asking an object to invoke a method.myList.append(False) can be read as “ask the object myList to perform itsappend method and send it the value False.&quot;
Even simple data objects such as integers can invoke methods in this way.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&gt;&gt;&gt; (54).__add__(21) 75 &gt;&gt;&gt; In this fragment we are asking the integer object 54 to execute its add method (called __add__ in Python) and passing it 21 as the value to add.
The result is the sum,75.
Of course, we usually write this as 54+21.
We will say much more about these methods later in this section.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One common Python function that is often discussed in conjunction with lists is therange function. range produces a range object that represents a sequence of values.
By using thelist function, it is possible to see the value of the range object as a list.
This is illustrated below.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10 11 12 13&gt;&gt;&gt; range(10) range(0, 10) &gt;&gt;&gt; list(range(10)) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &gt;&gt;&gt; range(5,10) range(5, 10) &gt;&gt;&gt; list(range(5,10 )) [5, 6, 7, 8, 9] &gt;&gt;&gt; list(range(5,10,2)) [5, 7, 9] &gt;&gt;&gt; list(range(10,1,-1)) [10, 9, 8, 7, 6, 5, 4, 3, 2] &gt;&gt;&gt; The range object represents a sequence of integers.
By default, it will start with 0.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If you provide more parameters, it will start and end at particular points and can even skip items.
In our first example,range(10), the sequence starts with 0 and goes up to but does not include 10.
In our second example,range(5,10) starts at 5 and goes up to but not including 10.range(5,10,2) performs similarly but skips by twos (again, 10 is not included).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Strings are sequential collections of zero or more letters, numbers and other symbols.
We call these letters, numbers and other symbolscharacters.
Literal string values are differentiated from identifiers by using quotation marks (either single or double).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10&gt;&gt;&gt; &quot;David&quot; 'David' &gt;&gt;&gt; myName = &quot;David&quot; &gt;&gt;&gt; myName[3] 'i' &gt;&gt;&gt; myName*2 'DavidDavid' &gt;&gt;&gt; len(myName) 5 &gt;&gt;&gt; Since strings are sequences, all of the sequence operations described above work as you would expect.
In addition, strings have a number of methods, some of which are shown inTable 4 .
For example, 1 2 3 4 5 6 7 8 9 10&gt;&gt;&gt; myName 'David' &gt;&gt;&gt; myName.upper() 'DAVID' &gt;&gt;&gt; myName. center(10) ' David ' &gt;&gt;&gt; myName.find('v') 2 &gt;&gt;&gt; myName.split('v') ['Da', 'id']
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Of these,split will be very useful for processing data. split will take a string and return a list of strings using the split character as a division point.
In the example,v is the division point.
If no division is specified, the split method looks for whitespace characters such as tab, newline and space.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Method Name Use Explanation center astring.center(w) Returns a string centered in a field of sizew count astring.count(item) Returns the number of occurrences ofitem in the string ljust astring.ljust(w) Returns a string left-justified in a field of sizew lower astring.lower() Returns a string in all lowercase rjust astring.rjust(w) Returns a string right-justified in a field of sizew find astring.find(item) Returns the index of the first occurrence ofitem split astring.split(schar) Splits a string into substrings at schar Methods Provided by Strings in Python A major difference between lists and strings is that lists can be modified while strings cannot.
This is referred to asmutability.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Lists are mutable; strings are immutable.
For example, you can change an item in a list by using indexing and assignment.
With a string that change is not allowed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15&gt;&gt;&gt; myList [1, 3, True, 6.5] &gt;&gt;&gt; myList[0] =2**10 &gt;&gt;&gt; myList [1024, 3, True, 6.5] &gt;&gt;&gt; &gt;&gt;&gt; myName 'David' &gt;&gt;&gt; myName[0]='X' Traceback (most recent call last): File &quot;&quot;, line 1, in -toplevel- myName[0]='X' TypeError: object doesn't support item assignment &gt;&gt;&gt; Tuples are very similar to lists in that they are heterogeneous sequences of data.
The difference is that a tuple is immutable, like a string.
A tuple cannot be changed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Tuples are written as comma-delimited values enclosed in parentheses.
As sequences, they can use any operation described above.
For example, 1 2 3 4 5 6 7 8 9 10 11 12&gt;&gt;&gt; myTuple = (2,True,4.96) &gt;&gt;&gt; myTuple (2, True, 4.96) &gt;&gt;&gt; len(myTuple) 3 &gt;&gt;&gt; myTuple[0] 2 &gt;&gt;&gt; myTuple * 3 (2, True, 4.96, 2, True, 4.96, 2, True, 4.96) &gt;&gt;&gt; myTuple[0:2] (2, True) &gt;&gt;&gt; However, if you try to change an item in a tuple, you will get an error.
Note that the error message provides location and reason for the problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7&gt;&gt;&gt; myTuple[1]=False Traceback (most recent call last): File &quot;&quot;, line 1, in -toplevel- myTuple[1]=False TypeError: object doesn't support item assignment &gt;&gt;&gt; A set is an unordered collection of zero or more immutable Python data objects.
Sets do not allow duplicates and are written as comma-delimited values enclosed in curly braces.
The empty set is represented byset().
Sets are heterogeneous, and the collection can be assigned to a variable as below.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6&gt;&gt;&gt; {3,6,&quot;cat&quot;,4.5,False} {False, 4.5, 3, 6, 'cat'} &gt;&gt;&gt; mySet = {3, 6,&quot;cat&quot;,4.5,False} &gt;&gt;&gt; mySet {False, 4.5, 3, 6, 'cat'} &gt;&gt;&gt; Even though sets are not considered to be sequential, they do support a few of the familiar operations presented earlier.Table 5 reviews these operations and the following session gives examples of their use.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Operation Name Operator Explanation membership in Set membership length len Returns the cardinality of the set | aset | otherset Returns a new set with all elements from both sets &amp; aset &amp; otherset Returns a new set with only those elements common to both sets - aset - otherset Returns a new set with all items from the first set not in second &lt;= aset &lt;= otherset Asks whether all elements of the first set are in the second Operations on a Set in Python 1 2 3 4 5 6 7 8 9&gt;&gt;&gt; mySet {False, 4.5, 3, 6, 'cat'} &gt;&gt;&gt; len(mySet) 5 &gt;&gt;&gt; False in mySet True &gt;&gt;&gt;&quot;dog&quot; in mySet False &gt;&gt;&gt; Sets support a number of methods that should be familiar to those who have worked with them in a mathematics setting.Table 6 provides a summary.
Examples of their use follow.
Note thatunion, intersection, issubset, and difference all have operators that can be used as well.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Method Name Use Explanation union aset.union(otherset) Returns a new set with all elements from both sets intersection aset.intersection(otherset) Returns a new set with only those elements common to both sets difference aset.difference(otherset) Returns a new set with all items from first set not in second issubset aset.issubset(otherset) Asks whether all elements of one set are in the other add aset.add(item) Adds item to the set remove aset.remove(item) Removes item from the set pop aset.pop() Removes an arbitrary element from the set clear aset.clear() Removes all elements from the set Methods Provided by Sets in Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33&gt;&gt;&gt; mySet {False, 4.5, 3, 6, 'cat'} &gt;&gt;&gt; yourSet = {99,3,100} &gt;&gt;&gt; mySet.union(yourSet) {False, 4.5, 3, 100, 6, 'cat', 99} &gt;&gt;&gt; mySet | yourSet {False, 4.5, 3, 100, 6, 'cat', 99} &gt;&gt;&gt; mySet. intersection(yourSet) {3} &gt;&gt;&gt; mySet &amp; yourSet {3} &gt;&gt;&gt; mySet.difference(yourSet) {False, 4.5, 6, 'cat'} &gt;&gt;&gt; mySet - yourSet {False, 4.5, 6, 'cat'} &gt;&gt;&gt; {3,100}. issubset(yourSet) True &gt;&gt;&gt; {3,100}&gt;&gt; mySet.add(&quot;house&quot;) &gt;&gt;&gt; mySet {False, 4.5, 3, 6, 'house', 'cat'} &gt;&gt;&gt; mySet.remove(4.5) &gt;&gt;&gt; mySet {False, 3, 6, 'house', 'cat'} &gt;&gt;&gt; mySet.pop() False &gt;&gt;&gt; mySet {3, 6, 'house', 'cat'} &gt;&gt;&gt; mySet.clear() &gt;&gt;&gt; mySet set() &gt;&gt;&gt; Our final Python collection is an unordered structure called adictionary.
Dictionaries are collections of associated pairs of items where each pair consists of a key and a value.
This key-value pair is typically written as key:value.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Dictionaries are written as comma-delimited key:value pairs enclosed in curly braces.
For example, &gt;&gt;&gt; capitals = {'Iowa':'DesMoines','Wisconsin':'Madison'} &gt;&gt;&gt; capitals {'Wisconsin': 'Madison', 'Iowa': 'DesMoines'} &gt;&gt;&gt; We can manipulate a dictionary by accessing a value via its key or by adding another key-value pair.
The syntax for access looks much like a sequence access except that instead of using the index of the item we use the key value.
To add a new value is similar.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>capitals = {'Iowa':'DesMoines','Wisconsin':'Madison'} print(capitals['Iowa']) capitals['Utah']='SaltLakeCity' print(capitals) capitals['California']='Sacramento' print(len(capitals)) for k in capitals: print(capitals[k],&quot; is the capital of &quot;, k) (intro_7)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load It is important to note that the dictionary is maintained in no particular order with respect to the keys.
The first pair added ('Utah': 'SaltLakeCity') was placed first in the dictionary and the second pair added ('California': 'Sacramento') was placed last.
The placement of a key is dependent on the idea of “hashing,&quot; which will be explained in more detail in Chapter 4.
We also show the length function performing the same role as with previous collections.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Dictionaries have both methods and operators.
Table x andTable x describe them, and the sessions shows them in action.
Thekeys, values, and items methods all return objects that contain the values of interest.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You can use thelist function to convert them to lists.
You will also see that there are two variations on theget method.
If the key is not present in the dictionary, get will return None.
However, a second, optional parameter can specify a return value instead.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Operator Use Explanation [] myDict[k]
Returns the value associated with k, otherwise its an error in key in adict Returns True if key is in the dictionary, False otherwise del del adict[key]
Removes the entry from the dictionary Operators Provided by Dictionaries in Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19&gt;&gt;&gt; phoneext={'david':1410,'brad':1137} &gt;&gt;&gt; phoneext {'brad': 1137, 'david': 1410} &gt;&gt;&gt; phoneext.keys() dict_keys(['brad', 'david']) &gt;&gt;&gt; list( phoneext.keys()) ['brad', 'david'] &gt;&gt;&gt; phoneext.values() dict_values([1137, 1410]) &gt;&gt;&gt; list(phoneext.values()) [1137, 1410] &gt;&gt;&gt; phoneext.items() dict_items([('brad', 1137), ('david', 1410)]) &gt;&gt;&gt; list(phoneext.items()) [('brad', 1137), ('david', 1410)] &gt;&gt;&gt; phoneext.get(&quot;kent&quot;) &gt;&gt;&gt; phoneext.get( &quot;kent&quot;,&quot;NO ENTRY&quot;) 'NO ENTRY' &gt;&gt;&gt; Method Name Use Explanation keys adict.keys() Returns the keys of the dictionary in a dict_keys object values adict.values() Returns the values of the dictionary in a dict_values object items adict.items() Returns the key-value pairs in a dict_items object get adict.get(k) Returns the value associated withk, None otherwise get adict.get(k,alt) Returns the value associated withk, alt otherwise {Methods Provided by Dictionaries in Python} {dictmethods} Open Editor Input and Output¶ We often have a need to interact with users, either to get data or to provide some sort of result.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Most programs today use a dialog bcox as a way of asking the user to provide some type of input.
While Python does have a way to create dialog boxes, there is a much simpler function that we can use.
Python provides us with a function that allows us to ask a user to enter some data and returns a reference to the data in the form of a string.
The function is calledinput.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Python’s input function takes a single parameter that is a string.
This string is often called the {prompt} because it contains some helpful text prompting the user to enter something.
For example, you might call input as follows:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>aName = input('Please enter your name: ') Now whatever the user types after the prompt will be stored in theaName variable.
Using the input function, we can easily write instructions that will prompt the user to enter data and then incorporate that data into further processing.
For example, in the following two statements, the first asks the user for their name and the second prints the result of some simple processing based on the string that is provided.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>aName = input(&quot;Please enter your name &quot;) print(&quot;Your name in all capitals is &quot;,aName.upper(), &quot;and has length&quot;, len(aName)) (strstuff)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load It is important to note that the value returned from the input function will be a string representing the exact characters that were entered after the prompt.
If you want this string interpreted as another type, you must provide the type conversion explicitly.
In the statements below, the string that is entered by the user is converted to a float so that it can be used in further arithmetic processing.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>sradius = input(&quot;Please enter the radius of the circle &quot;) radius = float( sradius) diameter = 2 * radius String Formatting¶ We have already seen that the print function provides a very simple way to output values from a Python program.print takes zero or more parameters and displays them using a single blank as the default separator.
It is possible to change the separator character by setting thesep argument.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In addition, each print ends with a newline character by default.
This behavior can be changed by setting theend argument.
These variations are shown in the following session:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8&gt;&gt;&gt; print(&quot;Hello&quot;) Hello &gt;&gt;&gt; print(&quot;Hello&quot;,&quot;World&quot;) Hello World &gt;&gt;&gt;print(&quot;Hello&quot;,&quot;World&quot;, sep=&quot;***&quot;) Hello***World &gt;&gt;&gt; print(&quot;Hello&quot;,&quot;World&quot;, end=&quot;***&quot;) Hello World***&gt;&gt;&gt; It is often useful to have more control over the look of your output.
Fortunately, Python provides us with an alternative called formatted strings.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A formatted string is a template in which words or spaces that will remain constant are combined with placeholders for variables that will be inserted into the string.
For example, the statement print(aName, &quot;is&quot;, age, &quot;years old.&quot;) contains the words is and years old, but the name and the age will change depending on the variable values at the time of execution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Using a formatted string, we write the previous statement as print(&quot;%s is %d years old.&quot; % (aName, age)) This simple example illustrates a new string expression.
The% operator is a string operator called the format operator.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The left side of the expression holds the template or format string, and the right side holds a collection of values that will be substituted into the format string.
Note that the number of values in the collection on the right side corresponds with the number of% characters in the format string.
Values are taken—in order, left to right—from the collection and inserted into the format string.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Let’s look at both sides of this formatting expression in more detail.
The format string may contain one or more conversion specifications.
A conversion character tells the format operator what type of value is going to be inserted into that position in the string.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the example above, the%s specifies a string, while the%d specifies an integer.
Other possible type specifications includei, u, f, e, g, c, or %.
Table 7 summarizes all of the various type specifications.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Character Output Format d,&quot;i&quot; Integer u Unsigned integer f Floating point as m.ddddd e Floating point as m.ddddde+/-xx E Floating point as m.dddddE+/-xx g Use%e for exponents less than \(-4\) or greater than \(+5\), otherwise use %f c Single character s String, or any Python data object that can be converted to a string by using thestr function. % Insert a literal % character String Formatting Conversion Characters In addition to the format character, you can also include a format modifier between the% and the format character.
Format modifiers may be used to left-justify or right-justifiy the value with a specified field width.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Modifiers can also be used to specify the field width along with a number of digits after the decimal point.Table 8 explains these format modifiers Modifier Example Description number %20d Put the value in a field width of 20 * %-20d Put the value in a field 20 characters wide, left-justified * %+20d Put the value in a field 20 characters wide, right-justified 0 %020d Put the value in a field 20 characters wide, fill in with leading zeros. . %20.2f Put the value in a field 20 characters wide with 2 characters to the right of the decimal point.
(name) %(name)d Get the value from the supplied dictionary usingname as the key.
Additional formatting options The right side of the format operator is a collection of values that will be inserted into the format string.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The collection will be either a tuple or a dictionary.
If the collection is a tuple, the values are inserted in order of position.
That is, the first element in the tuple corresponds to the first format character in the format string.
If the collection is a dictionary, the values are inserted according to their keys.
In this case all format characters must use the(name) modifier to specify the name of the key.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10 11 12&gt;&gt;&gt; price = 24 &gt;&gt;&gt; item = &quot;banana&quot; &gt;&gt;&gt; print(&quot;The %s costs %d cents&quot;%(item,price)) The banana costs 24 cents &gt;&gt;&gt; print(&quot;The %+10s costs%5.2f cents&quot;%(item,price)) The banana costs 24.00 cents &gt;&gt;&gt; print(&quot;The %+10s costs %10.2f cents&quot;%(item,price)) The banana costs 24.00 cents &gt;&gt;&gt; itemdict = {&quot;item&quot;:&quot;banana&quot;,&quot;cost&quot;:24} &gt;&gt;&gt; print(&quot;The %(item)s costs %(cost)7.1f cents&quot;%itemdict) The banana costs 24.0 cents &gt;&gt;&gt; In addition to format strings that use format characters and format modifiers, Python strings also include a format method that can be used in conjunction with a new Formatter class to implement complex string formatting.
More about these features can be found in the Python library reference manual.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Control Structures¶ As we noted earlier, algorithms require two important control structures: iteration and selection.
Both of these are supported by Python in various forms.
The programmer can choose the statement that is most useful for the given circumstance.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For iteration, Python provides a standard while statement and a very powerful for statement.
The while statement repeats a body of code as long as a condition is true.
For example, 1 2 3 4 5 6 7 8 9 10 11&gt;&gt;&gt; counter = 1 &gt;&gt;&gt; while counter &lt;= 5: ... print( &quot;Hello, world&quot;) ... counter = counter + 1 Hello, world Hello, world Hello, world Hello, world Hello, world prints out the phrase “Hello, world&quot; five times.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The condition on thewhile statement is evaluated at the start of each repetition.
If the condition isTrue, the body of the statement will execute.
It is easy to see the structure of a Pythonwhile statement due to the mandatory indentation pattern that the language enforces.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The while statement is a very general purpose iterative structure that we will use in a number of different algorithms.
In many cases, a compound condition will control the iteration.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A fragment such as while counter &lt;= 10 and not done: ... would cause the body of the statement to be executed only in the case where both parts of the condition are satisfied.
The value of the variablecounter would need to be less than or equal to 10 and the value of the variabledone would need to be False (not False is True) so that True and True results in True.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Even though this type of construct is very useful in a wide variety of situations, another iterative structure, thefor statement, can be used in conjunction with many of the Python collections.
Thefor statement can be used to iterate over the members of a collection, so long as the collection is a sequence.
So, for example, 1 2 3 4 5 6 7 8&gt;&gt;&gt; for item in [1,3,6,2,5]: ... print(item) ...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 3 6 2 5 assigns the variableitem to be each successive value in the list [1,3,6,2,5].
The body of the iteration is then executed.
This works for any collection that is a sequence (lists, tuples, and strings).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A common use of the for statement is to implement definite iteration over a range of values.
The statement 1 2 3 4 5 6 7 8 9&gt;&gt;&gt; for item in range(5): ... print(item**2) ...
0 1 4 9 16 &gt;&gt;&gt; will perform the print function five times.
The range function will return a range object representing the sequence 0,1,2,3,4 and each value will be assigned to the variableitem.
This value is then squared and printed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The other very useful version of this iteration structure is used to process each character of a string.
The following code fragment iterates over a list of strings and for each string processes each character by appending it to a list.
The result is a list of all the letters in all of the words.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>wordlist = ['cat','dog','rabbit'] letterlist = [ ] for aword in wordlist: for aletter in aword: letterlist.append(aletter) print(letterlist) (intro_8)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load Selection statements allow programmers to ask questions and then, based on the result, perform different actions.
Most programming languages provide two versions of this useful construct: theifelse and the if.
A simple example of a binary selection uses theifelse statement.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if n&lt;0: print(&quot;Sorry, value is negative&quot;) else: print(math.sqrt(n)) In this example, the object referred to byn is checked to see if it is less than zero.
If it is, a message is printed stating that it is negative.
If it is not, the statement performs theelse clause and computes the square root.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Selection constructs, as with any control construct, can be nested so that the result of one question helps decide whether to ask the next.
For example, assume thatscore is a variable holding a reference to a score for a computer science test.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if score &gt;= 90: print('A') else: if score &gt;=80: print('B') else if score &gt;= 70: print('C') else: if score &gt;= 60: print('D') else: print('F') This fragment will classify a value calledscore by printing the letter grade earned.
If the score is greater than or equal to 90, the statement will printA.
If it is not ( else), the next question is asked.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If the score is greater than or equal to 80 then it must be between 80 and 89 since the answer to the first question was false.
In this case printB is printed.
You can see that the Python indentation pattern helps to make sense of the association betweenif and else without requiring any additional syntactic elements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An alternative syntax for this type of nested selection uses the elif keyword.
Theelse and the next if are combined so as to eliminate the need for additional nesting levels.
Note that the finalelse is still necessary to provide the default case if all other conditions fail.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10if score &gt;= 90: print('A') elif score &gt;=80: print('B') elif score &gt;= 70: print('C') elif score &gt;= 60: print('D') else: print('F') Python also has a single way selection construct, theif statement.
With this statement, if the condition is true, an action is performed.
In the case where the condition is false, processing simply continues on to the next statement after theif.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example, the following fragment will first check to see if the value of a variablen is negative.
If it is, then it is modified by the absolute value function.
Regardless, the next action is to compute the square root.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>if n&lt;0: n = abs(n) print(math.sqrt(n)) Self Check Test your understanding of what we have covered so far by trying the following exercise.
Modify the code from activecode_7 so that the final list only contains a single copy of each letter.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text># the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'b', 'i'] (self_check_1)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load No supported video types Returning to lists, there is an alternative method for creating a list that uses iteration and selection constructs.
The is known as alist comprehension.
A list comprehension allows you to easily create a list based on some processing or selection criteria.
For example, if we would like to create a list of the first 10 perfect squares, we could use afor statement:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7&gt;&gt;&gt; sqlist=[] &gt;&gt;&gt; for x in range(1,11): sqlist.append(x*x) &gt;&gt;&gt; sqlist [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] &gt;&gt;&gt; Using a list comprehension, we can do this in one step as &gt;&gt;&gt; sqlist=[x*x for x in range(1,11)] &gt;&gt;&gt; sqlist [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] &gt;&gt;&gt; The variable x takes on the values 1 through 10 as specified by thefor construct.
The value of x*x is then computed and added to the list that is being constructed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The general syntax for a list comprehension also allows a selection criteria to be added so that only certain items get added.
For example, &gt;&gt;&gt; sqlist=[x*x for x in range(1,11) if x%2 != 0] &gt;&gt;&gt; sqlist [1, 9, 25, 49, 81] &gt;&gt;&gt; This list comprehension constructed a list that only contained the squares of the odd numbers in the range from 1 to 10.
Any sequence that supports iteration can be used within a list comprehension to construct a new list.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&gt;&gt;&gt;[ch.upper() for ch in 'comprehension' if ch not in 'aeiou'] ['C', 'M', 'P', 'R', 'H', 'N', 'S', 'N'] &gt;&gt;&gt; Self Check Test your understanding of list comprehensions by redoing activecode 7 using list comprehensions.
For extra bonus points see if you can figure out how to remove the duplicates using comprehensions too.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text># the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'a', 'b', 'b', 'i', 't'] (self_check_2)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load No supported video types Exception Handling¶ There are two types of errors that typically occur when writing programs.
The first, known as a syntax error, simply means that the programmer has made a mistake in the structure of a statement or expression.
For example, it is incorrect to write a for statement and forget the colon.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&gt;&gt;&gt; for i in range(10) SyntaxError: invalid syntax (, line 1) In this case, the Python interpreter has found that it cannot complete the processing of this instruction since it does not conform to the rules of the language.
Syntax errors are usually more frequent when you are first learning a language.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The other type of error, known as a logic error, denotes a situation where the program executes but gives the wrong result.
This can be due to an error in the underlying algorithm or an error in your translation of that algorithm.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In some cases, logic errors lead to very bad situations such as trying to divide by zero or trying to access an item in a list where the index of the item is outside the bounds of the list.
In this case, the logic error leads to a runtime error that causes the program to terminate.
These types of runtime errors are typically calledexceptions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Most of the time, beginning programmers simply think of exceptions as fatal runtime errors that cause the end of execution.
However, most programming languages provide a way to deal with these errors that will allow the programmer to have some type of intervention if they so choose.
In addition, programmers can create their own exceptions if they detect a situation in the program execution that warrants it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When an exception occurs, we say that it has been “raised.&quot;
You can “handle&quot; the exception that has been raised by using atry statement.
For example, consider the following session that asks the user for an integer and then calls the square root function from the math library.
If the user enters a value that is greater than or equal to 0, the print will show the square root.
However, if the user enters a negative value, the square root function will report a ValueError exception.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8&gt;&gt;&gt; anumber = int(input(&quot;Please enter an integer &quot;)) Please enter an integer -23 &gt;&gt;&gt; print(math.sqrt(anumber)) Traceback (most recent call last): File &quot;&quot;, line 1, in print(math.sqrt(anumber)) ValueError: math domain error &gt;&gt;&gt; We can handle this exception by calling the print function from within atry block.
A corresponding except block “catches&quot; the exception and prints a message back to the user in the event that an exception occurs.
For example:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10 11&gt;&gt;&gt; try: print(math.sqrt(anumber)) except: print(&quot;Bad Value for square root&quot;) print(&quot;Using absolute value instead&quot;) print(math.sqrt(abs(anumber))) Bad Value for square root Using absolute value instead 4.79583152331 &gt;&gt;&gt; will catch the fact that an exception is raised by sqrt and will instead print the messages back to the user and use the absolute value to be sure that we are taking the square root of a non-negative number.
This means that the program will not terminate but instead will continue on to the next statements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is also possible for a programmer to cause a runtime exception by using the raise statement.
For example, instead of calling the square root function with a negative number, we could have checked the value first and then raised our own exception.
The code fragment below shows the result of creating a new RuntimeError exception.
Note that the program would still terminate but now the exception that caused the termination is something explicitly created by the programmer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9&gt;&gt;&gt; if anumber &lt; 0: ... raise RuntimeError(&quot;You can't use a negative number&quot;) ... else: ... print(math.sqrt(anumber)) ...
Traceback (most recent call last): File &quot;&quot;, line 2, in RuntimeError: You can't use a negative number &gt;&gt;&gt; There are many kinds of exceptions that can be raised in addition to theRuntimeError shown above.
See the Python reference manual for a list of all the available exception types, and for how to create your own.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Defining Functions¶ The earlier example of procedural abstraction called upon a Python function calledsqrt from the math module to compute the square root.
In general, we can hide the details of any computation by defining a function.
A function definition requires a name, a group of parameters, and a body.
It may also explicitly return a value.
For example, the simple function defined below returns the square of the value you pass into it.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8&gt;&gt;&gt; def square(n): ... return n**2 ... &gt;&gt;&gt; square(3) 9 &gt;&gt;&gt; square(square(3)) 81 &gt;&gt;&gt; The syntax for this function definition includes the name,square, and a parenthesized list of formal parameters.
For this function, n is the only formal parameter, which suggests thatsquare needs only one piece of data to do its work.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The details, hidden “inside the box,&quot; simply compute the result ofn**2 and return it.
We can invoke or call the square function by asking the Python environment to evaluate it, passing an actual parameter value, in this case,3.
Note that the call to square returns an integer that can in turn be passed to another invocation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We could implement our own square root function by using a well-known technique called “Newton’s Method.&quot;
Newton’s Method for approximating square roots performs an iterative computation that converges on the correct value.
The equation\(newguess = \frac {1}{2} * (oldguess + \frac {n}{oldguess})\) takes a value\(n\) and repeatedly guesses the square root by making each \(newguess\) the \(oldguess\) in the subsequent iteration.
The initial guess used here is\(\frac {n}{2}\).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Listing 1 shows a function definition that accepts a value\(n\) and returns the square root of\(n\) after making 20 guesses.
Again, the details of Newton’s Method are hidden inside the function definition and the user does not have to know anything about the implementation to use the function for its intended purpose.
Listing 1 also shows the use of the # character as a comment marker.
Any characters that follow the # on a line are ignored.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5&gt;&gt;&gt;squareroot(9) 3.0 &gt;&gt;&gt;squareroot(4563) 67.549981495186216 &gt;&gt;&gt; 1 2 3 4 5 6def squareroot(n): root = n/2 #initial guess will be 1/2 of n for k in range(20): root = (1/2)*(root + (n / root)) return root Self Check Here’s a self check that really covers everything so far.
You may have heard of the infinite monkey theorem?
The theorem states that a monkey hitting keys at random on a typewriter keyboard for an infinite amount of time will almost surely type a given text, such as the complete works of William Shakespeare.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Well, suppose we replace a monkey with a Python function.
How long do you think it would take for a Python function to generate just one sentence of Shakespeare?
The sentence we’ll shoot for is: “methinks it is like a weasel&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>You’re not going to want to run this one in the browser, so fire up your favorite Python IDE.
The way we’ll simulate this is to write a function that generates a string that is 27 characters long by choosing random letters from the 26 letters in the alphabet plus the space.
We’ll write another function that will score each generated string by comparing the randomly generated string to the goal.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A third function will repeatedly call generate and score, then if 100% of the letters are correct we are done.
If the letters are not correct then we will generate a whole new string.To make it easier to follow your program’s progress this third function should print out the best string generated so far and its score every 1000 tries.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Self Check Challenge See if you can improve upon the program in the self check by keeping letters that are correct and only modifying one character in the best string so far.
This is a type of algorithm in the class of ‘hill climbing’ algorithms, that is we only keep the result if it is better than the previous one.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>No supported video types Object-Oriented Programming in Python: Defining Classes¶ We stated earlier that Python is an object-oriented programming language.
So far, we have used a number of built-in classes to show examples of data and control structures.
One of the most powerful features in an object-oriented programming language is the ability to allow a programmer (problem solver) to create new classes that model data that is needed to solve the problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Remember that we use abstract data types to provide the logical description of what a data object looks like (its state) and what it can do (its methods).
By building a class that implements an abstract data type, a programmer can take advantage of the abstraction process and at the same time provide the details necessary to actually use the abstraction in a program.
Whenever we want to implement an abstract data type, we will do so with a new class.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A Fraction Class¶ A very common example to show the details of implementing a user-defined class is to construct a class to implement the abstract data typeFraction.
We have already seen that Python provides a number of numeric classes for our use.
There are times, however, that it would be most appropriate to be able to create data objects that “look like&quot; fractions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A fraction such as \(\frac {3}{5}\) consists of two parts.
The top value, known as the numerator, can be any integer.
The bottom value, called the denominator, can be any integer greater than 0 (negative fractions have a negative numerator).
Although it is possible to create a floating point approximation for any fraction, in this case we would like to represent the fraction as an exact value.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The operations for the Fraction type will allow a Fraction data object to behave like any other numeric value.
We need to be able to add, subtract, multiply, and divide fractions.
We also want to be able to show fractions using the standard “slash&quot; form, for example 3/5.
In addition, all fraction methods should return results in their lowest terms so that no matter what computation is performed, we always end up with the most common form.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In Python, we define a new class by providing a name and a set of method definitions that are syntactically similar to function definitions.
For this example, class Fraction: #the methods go here provides the framework for us to define the methods.
The first method that all classes should provide is the constructor.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The constructor defines the way in which data objects are created.
To create aFraction object, we will need to provide two pieces of data, the numerator and the denominator.
In Python, the constructor method is always called __init__ (two underscores before and afterinit) and is shown in Listing 2 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6class Fraction: def __init__(self,top,bottom): self.num = top self. den = bottom Notice that the formal parameter list contains three items (self, top, bottom). self is a special parameter that will always be used as a reference back to the object itself.
It must always be the first formal parameter; however, it will never be given an actual parameter value upon invocation.
As described earlier, fractions require two pieces of state data, the numerator and the denominator.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The notationself.num in the constructor defines thefraction object to have an internal data object called num as part of its state.
Likewise,self.den creates the denominator.
The values of the two formal parameters are initially assigned to the state, allowing the newfraction object to know its starting value.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To create an instance of the Fraction class, we must invoke the constructor.
This happens by using the name of the class and passing actual values for the necessary state (note that we never directlyinvoke __init__).
For example, myfraction = Fraction(3,5) creates an object called myfraction representing the fraction\(\frac {3}{5}\) (three-fifths).
Figure 5 shows this object as it is now implemented.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An Instance of the Fraction Class The next thing we need to do is implement the behavior that the abstract data type requires.
To begin, consider what happens when we try to print aFraction object.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&gt;&gt;&gt; myf = Fraction(3,5) &gt;&gt;&gt; print(myf) &lt;__main__.Fraction instance at 0x409b1acc&gt; The fraction object, myf, does not know how to respond to this request to print.
Theprint function requires that the object convert itself into a string so that the string can be written to the output.
The only choice myf has is to show the actual reference that is stored in the variable (the address itself).
This is not what we want.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are two ways we can solve this problem.
One is to define a method called show that will allow the Fraction object to print itself as a string.
We can implement this method as shown inListing 3 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If we create aFraction object as before, we can ask it to show itself, in other words, print itself in the proper format.
Unfortunately, this does not work in general.
In order to make printing work properly, we need to tell the Fraction class how to convert itself into a string.
This is what the print function needs in order to do its job.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>def show(self): print(self.num,&quot;/&quot;,self.den) 1 2 3 4 5 6&gt;&gt;&gt; myf = Fraction(3,5 ) &gt;&gt;&gt; myf.show() 3 / 5 &gt;&gt;&gt; print(myf) &gt;&gt;&gt; In Python, all classes have a set of standard methods that are provided but may not work properly.
One of these,__str__, is the method to convert an object into a string.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The default implementation for this method is to return the instance address string as we have already seen.
What we need to do is provide a “better&quot; implementation for this method.
We will say that this implementation overrides the previous one, or that it redefines the method’s behavior.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To do this, we simply define a method with the name __str__ and give it a new implementation as shown inListing 4 .
This definition does not need any other information except the special parameterself.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In turn, the method will build a string representation by converting each piece of internal state data to a string and then placing a/ character in between the strings using string concatenation.
The resulting string will be returned any time aFraction object is asked to convert itself to a string.
Notice the various ways that this function is used.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>def __str__(self): return str(self.num)+&quot;/&quot;+str(self.den) 1 2 3 4 5 6 7 8 9 10&gt;&gt;&gt; myf = Fraction(3,5) &gt;&gt;&gt; print(myf) 3/5 &gt;&gt;&gt; print(&quot;I ate&quot;, myf, &quot;of the pizza&quot;) I ate 3/5 of the pizza &gt;&gt;&gt; myf.__str__() '3/5' &gt;&gt;&gt; str(myf) '3/5' &gt;&gt;&gt; We can override many other methods for our newFraction class.
Some of the most important of these are the basic arithmetic operations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We would like to be able to create twoFraction objects and then add them together using the standard “+&quot; notation.
At this point, if we try to add two fractions, we get the following:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10&gt;&gt;&gt; f1 = Fraction(1,4) &gt;&gt;&gt; f2 = Fraction(1,2) &gt;&gt;&gt; f1+f2 Traceback (most recent call last): File &quot;&quot;, line 1, in -toplevel- f1+f2 TypeError: unsupported operand type(s) for +: 'instance' and 'instance' &gt;&gt;&gt; If you look closely at the error, you see that the problem is that the “+&quot; operator does not understand theFraction operands.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can fix this by providing the Fraction class with a method that overrides the addition method.
In Python, this method is called__add__ and it requires two parameters.
The first,self, is always needed, and the second represents the other operand in the expression.
For example, f1.__add__(f2) would ask the Fraction object f1 to add the Fraction object f2 to itself.
This can be written in the standard notation,f1+f2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Two fractions must have the same denominator to be added.
The easiest way to make sure they have the same denominator is to simply use the product of the two denominators as a common denominator so that\(\frac {a}{b} + \frac {c}{d} = \frac {ad}{bd} + \frac {cb}{bd} = \frac{ad+cb}{bd}\) The implementation is shown inListing 5 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The addition function returns a newFraction object with the numerator and denominator of the sum.
We can use this method by writing a standard arithmetic expression involving fractions, assigning the result of the addition, and then printing our result.
It is also worth noting that the\ in line 3 is called the continuation character, which is necessary when a Python statement is broken across more than one line.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7def __add__(self,otherfraction): newnum = self.num*otherfraction. den + \ self.den*otherfraction.num newden = self.den * otherfraction.den return Fraction(newnum,newden) 1 2 3 4 5 6&gt;&gt;&gt; f1=Fraction(1,4) &gt;&gt;&gt; f2=Fraction(1,2) &gt;&gt;&gt; f3=f1+f2 &gt;&gt;&gt; print(f3) 6/8 &gt;&gt;&gt; The addition method works as we desire, but one thing could be better.
Note that\(6/8\) is the correct result (\(\frac {1}{4} + \frac {1}{2}\)) but that it is not in the “lowest terms&quot; representation.
The best representation would be\(3/4\).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In order to be sure that our results are always in the lowest terms, we need a helper function that knows how to reduce fractions.
This function will need to look for the greatest common divisor, or GCD.
We can then divide the numerator and the denominator by the GCD and the result will be reduced to lowest terms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The best-known algorithm for finding a greatest common divisor is Euclid’s Algorithm, which will be discussed in detail in Chapter 8.
Euclid’s Algorithm states that the greatest common divisor of two integers\(m\) and \(n\) is \(n\) if\(n\) divides \(m\) evenly.
However, if \(n\) does not divide \(m\) evenly, then the answer is the greatest common divisor of\(n\) and the remainder of \(m\) divided by \(n\).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We will simply provide an iterative implementation here (seeListing 6 ).
Note that this implementation of the GCD algorithm only works when the denominator is positive.
This is acceptable for our fraction class because we have said that a negative fraction will be represented by a negative numerator.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>def gcd(m,n): while m%n != 0: oldm = m oldn = n m = oldn n = oldm%oldn return n print gcd(20,10) (gcd_cl)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load Now we can use this function to help reduce any fraction.
To put a fraction in lowest terms, we will divide the numerator and the denominator by their greatest common divisor.
So, for the fraction\(6/8\), the greatest common divisor is 2.
Dividing the top and the bottom by 2 creates a new fraction, \(3/4\) (see Listing 7 ).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6&gt;&gt;&gt; f1=Fraction(1,4) &gt;&gt;&gt; f2=Fraction(1,2) &gt;&gt;&gt; f3=f1+f2 &gt;&gt;&gt; print(f3 ) 3/4 &gt;&gt;&gt; 1 2 3 4 5 6def __add__(self,otherfraction): newnum = self.num* otherfraction.den + \ self.den*otherfraction.num newden = self.den * otherfraction.den common = gcd(newnum,newden) return Fraction(newnum//common, newden//common) An Instance of the Fraction Class with Two Methods Our Fraction object now has two very useful methods and looks like Figure 6 .
An additional group of methods that we need to include in our exampleFraction class will allow two fractions to compare themselves to one another.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Assume we have twoFraction objects, f1 and f2. f1==f2 will only be True if they are references to the same object.
Two different objects with the same numerators and denominators would not be equal under this implementation.
This is called shallow equality (see Figure 7 ).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Shallow Equality Versus Deep Equality We can create deep equality (see Figure 7 )–equality by the same value, not the same reference–by overriding the__eq__ method.
The__eq__ method is another standard method available in any class.
The __eq__ method compares two objects and returns True if their values are the same,False otherwise.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In the Fraction class, we can implement the __eq__ method by again putting the two fractions in common terms and then comparing the numerators (seeListing 8 ).
It is important to note that there are other relational operators that can be overridden.
For example, the__le__ method provides the less than or equal functionality.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5def __eq__(self, other): firstnum = self.num * other.den secondnum = other.num * self.den return firstnum == secondnum The complete Fraction class, up to this point, is shown inListing 9 .
We leave the remaining arithmetic and relational methods as exercises.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>class Fraction: def __init__(self,top,bottom): self.num = top self.den = bottom def __str__(self): return str(self.num)+&quot;/&quot;+str(self.den) def show(self): print(self.num,&quot;/&quot;,self.den) def __add__(self,otherfraction): newnum = self.num*otherfraction.den + \ self.den*otherfraction.num newden = self.den * otherfraction.den common = gcd(newnum,newden) return Fraction(newnum//common,newden//common) def __eq__(self, other): firstnum = self.num * other.den secondnum = other.num * self.den return firstnum == secondnum x = Fraction(1,2) y = Fraction(2,3) print(x+y) print(x == y) (fraction_class)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load Self Check To make sure you understand how operators are implemented in Python classes, and how to properly write methods, write some methods to implement*, /, and - .
Also implement comparison operators &gt; and &lt; Open Editor No supported video types Inheritance: Logic Gates and Circuits¶ Our final section will introduce another important aspect of object-oriented programming.Inheritance is the ability for one class to be related to another class in much the same way that people can be related to one another.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Children inherit characteristics from their parents.
Similarly, Python child classes can inherit characteristic data and behavior from a parent class.
These classes are often referred to assubclasses and superclasses.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Figure 8 shows the built-in Python collections and their relationships to one another.
We call a relationship structure such as this aninheritance hierarchy.
For example, the list is a child of the sequential collection.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In this case, we call the list the child and the sequence the parent (or subclass list and superclass sequence).
This is often referred to as anIS-A Relationship (the list IS-A sequential collection).
This implies that lists inherit important characteristics from sequences, namely the ordering of the underlying data and operations such as concatenation, repetition, and indexing.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An Inheritance Hierarchy for Python Collections Lists, tuples, and strings are all types of sequential collections.
They all inherit common data organization and operations.
However, each of them is distinct based on whether the data is homogeneous and whether the collection is immutable.
The children all gain from their parents but distinguish themselves by adding additional characteristics.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By organizing classes in this hierarchical fashion, object-oriented programming languages allow previously written code to be extended to meet the needs of a new situation.
In addition, by organizing data in this hierarchical manner, we can better understand the relationships that exist.
We can be more efficient in building our abstract representations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To explore this idea further, we will construct a simulation, an application to simulate digital circuits.
The basic building block for this simulation will be the logic gate.
These electronic switches represent boolean algebra relationships between their input and their output.
In general, gates have a single output line.
The value of the output is dependent on the values given on the input lines.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>AND gates have two input lines, each of which can be either 0 or 1 (representingFalse or True, repectively).
If both of the input lines have the value 1, the resulting output is 1.
However, if either or both of the input lines is 0, the result is 0.
OR gates also have two input lines and produce a 1 if one or both of the input values is a 1.
In the case where both input lines are 0, the result is 0.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>NOT gates differ from the other two gates in that they only have a single input line.
The output value is simply the opposite of the input value.
If 0 appears on the input, 1 is produced on the output.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Similarly, 1 produces 0.
Figure 9 shows how each of these gates is typically represented.
Each gate also has a truth table of values showing the input-to-output mapping that is performed by the gate.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Three Types of Logic Gates By combining these gates in various patterns and then applying a set of input values, we can build circuits that have logical functions.Figure 10 shows a circuit consisting of two AND gates, one OR gate, and a single NOT gate.
The output lines from the two AND gates feed directly into the OR gate, and the resulting output from the OR gate is given to the NOT gate.
If we apply a set of input values to the four input lines (two for each AND gate), the values are processed and a result appears at the output of the NOT gate.Figure 10 also shows an example with values.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Circuit In order to implement a circuit, we will first build a representation for logic gates.
Logic gates are easily organized into a class inheritance hierarchy as shown inFigure 11 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>At the top of the hierarchy, theLogicGate class represents the most general characteristics of logic gates: namely, a label for the gate and an output line.
The next level of subclasses breaks the logic gates into two families, those that have one input line and those that have two.
Below that, the specific logic functions of each appear.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An Inheritance Hierarchy for Logic Gates We can now start to implement the classes by starting with the most general, LogicGate.
As noted earlier, each gate has a label for identification and a single output line.
In addition, we need methods to allow a user of a gate to ask the gate for its label.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The other behavior that every logic gate needs is the ability to know its output value.
This will require that the gate perform the appropriate logic based on the current input.
In order to produce output, the gate needs to know specifically what that logic is.
This means calling a method to perform the logic computation.
The complete class is shown inListing 10 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>class LogicGate: def __init__(self,n): self.label = n self.output = None def getLabel(self): return self.label def getOutput(self): self.output = self.performGateLogic() return self.output (logicgate_class)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load At this point, we will not implement the performGateLogic function.
The reason for this is that we do not know how each gate will perform its own logic operation.
Those details will be included by each individual gate that is added to the hierarchy.
This is a very powerful idea in object-oriented programming.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We are writing a method that will use code that does not exist yet.
The parameterself is a reference to the actual gate object invoking the method.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Any new logic gate that gets added to the hierarchy will simply need to implement theperformGateLogic function and it will be used at the appropriate time.
Once done, the gate can provide its output value.
This ability to extend a hierarchy that currently exists and provide the specific functions that the hierarchy needs to use the new class is extremely important for reusing existing code.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We categorized the logic gates based on the number of input lines.
The AND gate has two input lines.
The OR gate also has two input lines.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>NOT gates have one input line.
TheBinaryGate class will be a subclass of LogicGate and will add two input lines.
TheUnaryGate class will also subclass LogicGate but will have only a single input line.
In computer circuit design, these lines are sometimes called “pins&quot; so we will use that terminology in our implementation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>class BinaryGate(LogicGate): def __init__(self,n): LogicGate.__init__(self,n) self.pinA = None self.pinB = None def getPinA(self): return int(input(&quot;Enter Pin A input for gate &quot;+ \ self.getLabel()+&quot;--&gt;&quot;)) def getPinB(self): return int(input(&quot;Enter Pin B input for gate &quot;+ \ self.getLabel()+&quot;--&gt;&quot;)) (binarygate_class)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load 1 2 3 4 5 6 7 8 9 10class UnaryGate(LogicGate): def __init__(self,n): LogicGate.__init__(self,n) self.pin = None def getPin(self): return int(input( &quot;Enter Pin input for gate &quot;+ \ self.getLabel()+&quot;--&gt;&quot;)) Listings binarygateclass andunarygateclass implement these two classes.
The constructors in both of these classes start with an explicit call to the constructor of the parent class using thesuper function.
When creating an instance of the BinaryGate class, we first want to initialize any data items that are inherited from LogicGate.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In this case, that means the label for the gate.
The constructor then goes on to add the two input lines (pinA and pinB).
This is a very common pattern that you should always use when building class hierarchies.
Child class constructors need to call parent class constructors and then move on to their own distinguishing data.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The only behavior that the BinaryGate class adds is the ability to get the values from the two input lines.
Since these values come from some external place, we will simply ask the user via an input statement to provide them.
The same implementation occurs for theUnaryGate class except that there is only one input line.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Now that we have a general class for gates depending on the number of input lines, we can build specific gates that have unique behavior.
For example, the AndGate class will be a subclass of BinaryGate since AND gates have two input lines.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>As before, the first line of the constructor calls upon the parent class constructor (BinaryGate), which in turn calls its parent class constructor ( LogicGate).
Note that the AndGate class does not provide any new data since it inherits two input lines, one output line, and a label.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>class AndGate(BinaryGate): def __init__(self,n): BinaryGate.__init__(self,n) def performGateLogic(self): a = self.getPinA() b = self.getPinB() if a==1 and b==1: return 1 else: return 0 (andgate_class)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load The only thing AndGate needs to add is the specific behavior that performs the boolean operation that was described earlier.
This is the place where we can provide theperformGateLogic method.
For an AND gate, this method first must get the two input values and then only return 1 if both input values are 1.
The complete class is shown inListing 11 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can show the AndGate class in action by creating an instance and asking it to compute its output.
The following session shows anAndGate object, g1, that has an internal label&quot;G1&quot;.
When we invoke the getOutput method, the object must first call itsperformGateLogic method which in turn queries the two input lines.
Once the values are provided, the correct output is shown.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>g1 = AndGate(&quot;G1&quot;) print(g1.getOutput()) (andgate_test)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Run Save Load The same development can be done for OR gates and NOT gates.
The OrGate class will also be a subclass ofBinaryGate and the NotGate class will extend the UnaryGate class.
Both of these classes will need to provide their own performGateLogic functions, as this is their specific behavior.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We can use a single gate by first constructing an instance of one of the gate classes and then asking the gate for its output (which will in turn need inputs to be provided).
For example:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10 11 12 13&gt;&gt;&gt; g2 = OrGate(&quot;G2&quot;) &gt;&gt;&gt; g2.getOutput() Enter Pin A input for gate G2--&gt;1 Enter Pin B input for gate G2--&gt;1 1 &gt;&gt;&gt; g2.getOutput () Enter Pin A input for gate G2--&gt;0 Enter Pin B input for gate G2--&gt;0 0 &gt;&gt;&gt; g3 = NotGate(&quot;G3&quot;) &gt;&gt;&gt; g3.getOutput() Enter Pin input for gate G3--&gt;0 1 Now that we have the basic gates working, we can turn our attention to building circuits.
In order to create a circuit, we need to connect gates together, the output of one flowing into the input of another.
To do this, we will implement a new class calledConnector.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Connector class will not reside in the gate hierarchy.
It will, however, use the gate hierarchy in that each connector will have two gates, one on either end (seeFigure 12 ).
This relationship is very important in object-oriented programming.
It is called theHAS-A Relationship.
Recall earlier that we used the phrase “IS-A Relationship&quot; to say that a child class is related to a parent class, for exampleUnaryGate IS-A LogicGate.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A Connector Connects the Output of One Gate to the Input of Another Now, with the Connector class, we say that a Connector HAS-A LogicGate meaning that connectors will have instances of theLogicGate class within them but are not part of the hierarchy.
When designing classes, it is very important to distinguish between those that have the IS-A relationship (which requires inheritance) and those that have HAS-A relationships (with no inheritance).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Listing 12 shows theConnector class.
The two gate instances within each connector object will be referred to as thefromgate and the togate, recognizing that data values will “flow&quot; from the output of one gate into an input line of the next.
The call tosetNextPin is very important for making connections (see Listing x ).
We need to add this method to our gate classes so that eachtogate can choose the proper input line for the connection.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8 9 10 11 12 13class Connector: def __init__(self, fgate, tgate ): self.fromgate = fgate self.togate = tgate tgate.setNextPin(self) def getFrom( self): return self.fromgate def getTo(self): return self.togate In the BinaryGate class, for gates with two possible input lines, the connector must be connected to only one line.
If both of them are available, we will choosepinA by default.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>IfpinA is already connected, then we will choose pinB.
It is not possible to connect to a gate with no available input lines.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7 8def setNextPin(self,source): if self.pinA == None: self.pinA = source else: if self.pinB == None: self.pinB = source else: raise RuntimeError( &quot;Error: NO EMPTY PINS&quot;) Now it is possible to get input from two places: externally, as before, and from the output of a gate that is connected to that input line.
This requires a change to thegetPinA and getPinB methods (see Listing 13 ).
If the input line is not connected to anything (None), then ask the user externally as before.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>However, if there is a connection, the connection is accessed andfromgate’s output value is retrieved.
This in turn causes that gate to process its logic.
This continues until all input is available and the final output value becomes the required input for the gate in question.
In a sense, the circuit works backwards to find the input necessary to finally produce output.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6def getPinA(self): if self.pinA == None: return input(&quot;Enter Pin A input for gate &quot;+ \ self.getName()+&quot;--&gt;&quot;) else: return self.pinA.getFrom(). getOutput() The following fragment constructs the circuit shown earlier in the section:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7&gt;&gt;&gt; g1 = AndGate(&quot;G1&quot;) &gt;&gt;&gt; g2 = AndGate(&quot;G2&quot;) &gt;&gt;&gt; g3 = OrGate( &quot;G3&quot;) &gt;&gt;&gt; g4 = NotGate(&quot;G4&quot;) &gt;&gt;&gt; c1 = Connector(g1,g3) &gt;&gt;&gt; c2 = Connector(g2,g3) &gt;&gt;&gt;c3 = Connector(g3,g4) The outputs from the two AND gates (g1 and g2) are connected to the OR gate (g3) and that output is connected to the NOT gate (g4 ).
The output from the NOT gate is the output of the entire circuit.
For example:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 2 3 4 5 6 7&gt;&gt;&gt; g4.getOutput() Pin A input for gate G1--&gt;0 Pin B input for gate G1--&gt;1 Pin A input for gate G2--&gt;1 Pin B input for gate G2--&gt;1 0 &gt;&gt;&gt; A complete listing of the circuit simulation classes is available on the companion website for this bookhttp://www.pythonworks.org.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Self Check Create a two new gate clasess one called NorGate the other called NandGate.
NandGates work like AndGates that have a Not attached to the output.
NorGates work lake OrGates that have a Not attached to the output.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Create a series of gates that prove the following equality NOT (( A and B) or (C and D)) is that same as NOT( A and B ) and NOT (C and D).
Make sure to use some of your new gates in the simulation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Open Editor No supported video types Summary¶ * Computer science is the study of problem solving. * Computer science uses abstraction as a tool for representing both processes and data. * Abstract data types allow programmers to manage the complexity of a problem domain by hiding the details of the data. * Python is a powerful, yet easy-to-use, object-oriented language. * Lists, tuples, and strings are built in Python sequential collections. * Dictionaries and sets are nonsequential collections of data. * Classes allow programmers to implement abstract data types. * Programmers can override standard methods as well as create new methods. * Classes can be organized into hierarchies. * A class constructor should always invoke the constructor of its parent before continuing on with its own data and behavior.
Key Terms¶ abstract data type abstraction algorithm class computable data abstraction data structure data type deep equality dictionary encapsulation exception format operator formatted strings HAS-A relationship implementation-independent information hiding inheritance inheritance hierarchy interface IS-A relationship list list comprehension method mutability object procedural abstraction programming prompt self shallow equality simulation string subclass superclass truth table {tab:keywords} Discussion Questions¶ * Construct a class hierarchy for people on a college campus.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Include faculty, staff, and students.
What do they have in common?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>What distinguishes them from one another? * Construct a class hierarchy for bank accounts. * Construct a class hierarchy for different types of computers. * Using the classes provided in the chapter, interactively construct a circuit and test it.
Programming Exercises¶ * Implement the simple methods getNum and getDen that will return the numerator and denominator of a fraction. * In many ways it would be better if all fractions were maintained in lowest terms right from the start.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Modify the constructor for theFraction class so that GCD is used to reduce fractions immediately.
Notice that this means the __add__ function no longer needs to reduce.
Make the necessary modifications. * Implement the remaining simple arithmetic operators (__sub__, __mul__, and __truediv__). * Implement the remaining relational operators (__gt__, __ge__, __lt__, __le__ , and__ne__) * Modify the constructor for the fraction class so that it checks to make sure that the numerator and denominator are both integers.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>If either is not an integer the constructor should raise an exception. * In the definition of fractions we assumed that negative fractions have a negative numerator and a positive denominator.
Using a negative denominator would cause some of the relational operators to give incorrect results.
In general, this is an unnecessary constraint.
Modify the constructor to allow the user to pass a negative denominator so that all of the operators continue to work properly. * Research the __radd__ method.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>How does it differ from __add__?
When is it used?
Implement__radd__. * Repeat the last question but this time consider the __iadd__ method. * Research the __repr__ method.
How does it differ from __str__?
When is it used?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Implement__repr__. * Research other types of gates that exist (such as NAND, NOR, and XOR).
Add them to the circuit hierarchy.
How much additional coding did you need to do? * The most simple arithmetic circuit is known as the half-adder.
Research the simple half-adder circuit.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Implement this circuit. * Now extend that circuit and implement an 8 bit full-adder. * The circuit simulation shown in this chapter works in a backward direction.
In other words, given a circuit, the output is produced by working back through the input values, which in turn cause other outputs to be queried.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This continues until external input lines are found, at which point the user is asked for values.
Modify the implementation so that the action is in the forward direction; upon receiving inputs the circuit produces an output. * Design a class to represent a playing card.
Now design a class to represent a deck of cards.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Using these two classes, implement a favorite card game. * Find a Sudoku puzzle in the local newspaper.
Write a program to solve the puzzle.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Navigation * index * next | * previous | * Problem Solving with Algorithms and Data Structures » * logout | © Copyright 2012, Brad Miller, David Ranum.
Created usingSphinx 1.1.3.
ES 103: Data Structure and Algorithms 2012 - Atul Gupta Atul Gupta Search this site About Him * Personal * Home Research * Publications * Research Work * Projects Current Academics * CS 308: Software Engineering Summer 2013 * CS306/CS 204: Design and Analysis of Algorithms 2012/13 * CS 504 Object-Oriented Software Engineering, 2012 * IT 203-Object-Oriented Programming in Java 2012 * ES 103: Data Structure and Algorithms 2012 * Advanced Topics in Software Engineering, Fall 2011 * CS 413: Design and Validation of Software Systems, 2011 * All courses .....
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Resources * Resources For Students * Resources For Teachers * Other Resources Other Links * Software Engineering Resources * Experimental Software Engineering * Software Testing Learning Resources * Presentation Tips courses ‎ &gt; ‎ ES 103: Data Structure and Algorithms 2012 Preamble For a engineer, problem solving is not about just solving a problem somehow but about solving the problem in the most effective and efficient way.
One of the sophisticated skills that a software professional needs is to choose suitable data structures for developing programming solution of a given problem.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Selection of a particular data structure greatly influences the characteristics of the obtained solution that include efficiency (performance, or speed), space (memory) requirements, scalability, reuse, and robustness (or reliability).
The other equally important skill is to choose a suitable problem solving technique to apply to a particular problem.
Acquiring these skills, early during the curriculum, greatly enhances the problem solving skills of the learner.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>List of Students Enrolled  for the course Course Contents (syllabus for the course)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In this course, we cover  Topics  Lecture Slides Suggested Readings  Remarks  Introduction to Data Structures  Pointer Basics  Structures in C  Algorithmic Complexity  Recursion and Applications  Programming Data Structures (C, C++, Java)  Lecture #1  Lecture #2 ,#3  Lecture #4  Lecture #5 and#6  Lecture #7 and #8  Pointer Basics-1  Algorithmic efficiency -1 Some slides are animated and hence may be difficult to follow.
The slides can be obtained for non commercial use by making a request to the course instructor  Abstract data types, Classification, Arrays  Stack and Queues  Stack Applications  Linked Lists (and variants)  Applications  Lecture #9  Lecture #10 #11 #12  Lecture #13  Lecture #14,15  Stack@Wikipedia  Stack Applications-1    Trees, Types and Representations  Binary Trees, Tree traversals  Threaded Binary Tree  Applications    Lecture #21,22  Lecture #23,24     Graphs, Types and Representations  Graph Traversal  Spanning Trees  Shortest Paths    Lecture #33,34  Lecture #35,36  Lecture #37,38    Search Data Structures:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Binary Search Tree, Optimal Binary Search Tree, Balanced Tree, AVL Tree; Hashing    Lecture #25,26  Lecture #  Lecture #     Sorting -     Insertion sort,     Merge sort     Quick sort     Heap, Heap sort, and Priority Queue  Searching, Sequential and Binary Search    Lecture #16  Lecture #17  Lecture #27  Lecture #31,32  Lecture #14,15    Basic Algorithm Design Paradigms:    Divide &amp; Conquer,   Greedy method,   Backtracking,   Dynamic Programming  Lecture #19, 20  See lectures 35,37  See lectures 33,34   --Quick Sort, Merge Sort, Binary Search are the examples of Divide and Conquer Approach --Huffman's coding, Prim's and Kruskal's algorithms for MST, Diskestra's algorithm for shortest path are the examples of Greedy approach --Depth-First Search (Traversal) in Binary Tree and Graphs are the example of Backtracking   Main Reference     Introduction to Algorithms (2nd Edition) by Thomas H.
Cormen, Charles E.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Leiserson, Ronald L.
Rivest, and Cliff Stein, PHI Press.    
Student learning resources for the book are here   Additional References     1.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Data Structures and Program Design in C by Robert L Cruise, 2nd Ed., Pearson Education India     2.
Data Structures and Algorithms in C++ by Michael T. Goodrich, Roberto Tamassia, and David M. Mount Wiley Publications Web Resources on Data Structures and Algorithms     1.
Dictionary of Algorithms and data Structures (NIST site ): See Definitions of various data structures here     2.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Wikipedia on Algorithms     3.
Wikipedia on Data Structures , List of Data Structures     4.
Algorithm and Data Structures Links     5.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Stony Brook Algorithm Repository Other Course sites on Data Structures     1.
CS CS: 308: Data Structures (Spring 2003) University of Nevada Reno     2.
DSS T26 - Data Structure Course , University of Ottawa     3.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>CS 61B Data Structures , University of Berkeley     4.
CMSC 420 Data Structures Spring 2001 , University of Maryland     5.
COP 3530 Data Structures and Algorithms , University of Florida     6.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Computer Science 226, Data Structures and Algorithms, Spring 2007 , Princeton University     7.
CS210a Data Structures and Algorithms Fall 2007 , University of Western Ontario     8.
CS 161Design and Analysis of Algorithms Fall 2008 , Stanford University     9.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>CS 2005 Algorithms and Data Structures University of Aberdeen '10.
CIS 680: Data Structures Ohio-State University  11.
CS261 Data Structures , Spring 2001, Oregon State University.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>On-line Course Material / Book sites     1. http://courses.cs.vt.edu/~csonline/DataStructures/Lessons/index.html     2. http://www.cs.auckland.ac.nz/software/AlgAnim/ds_ToC.html     3. http://cpp.datastructures.net/index.html     4. http://mitpress.mit.edu/algorithms/     5. http://www.brpreiss.com/books/opus4/     6.
The Algorithms Design Manual     7. http://www.personal.kent.edu/~rmuhamma/Algorithms/algorithm.html     8. http://lcm.csa.iisc.ernet.in/dsa/ Data Structures Animations/Visualizations     1 Binary Trees and Graphs     2 Sorting and other algorithms Meeting Time     TUE WED 9.00 -- 10.00 AM     THU 10.00 --11.00 AM     Theory Assignments     Assignment #1 on Algorithmic Complexity     Assignment #2 on Linear Data Structures     Assignment #3 on Trees and Graphs Example Codes    Topics   C Example Code  Menu Driven Programs in c  Basics of Programming Pointers Memory Allocations Arrays Structures  Example-1  Static Memory Allocation     Dynamic Memory Allocation  Array of Pointers  Array of Structures    Linear Structures   Arrays  Linked Lists * Singly Linked List * Doubly Linked List  Stack Queues * Simple Queue * Circular Queue * Dqueue        Array Implementation Merging Two Arrays Singly Linked List Doubly Linked List Static Implementation   Dynamic Implementation Static Implementation   Dynamic Implementation Static Implementation   Dynamic Implementation Static Implementation    Dynamic Implementation    Singly Linked List  Static Implementation Semester Exams     Quiz-1     Mid Semester Exam     Solution Suggested Exercises  Exercise 1 Evaluation Two Quizzes (10% each) Mid Semester Exam (20%) End Semester Exam (20%) Programming Assignments (30%) Attendance (10%) .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Announcements Subpages (1): supporting material Sign in |Report Abuse |Print Page |Remove Access |Powered By Google Sites Algorithm - Wikipedia, the free encyclopedia Algorithm From Wikipedia, the free encyclopedia Jump to: navigation , search Flow chart of an algorithm (Euclid's algorithm ) for calculating the greatest common divisor (g.c.d.) of two numbersa and b in locations named A and B.
The algorithm proceeds by successive subtractions in two loops: IF the test B ≥ A yields &quot;yes&quot; (or true) (more accurately thenumber b in location B is greater than or equal to thenumber a in location A) THEN, the algorithm specifies B ← B − A (meaning the numberb − a replaces the old b).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Similarly, IF A &gt; B, THEN A ← A − B.
The process terminates when (the contents of) B is 0, yielding the g.c.d. in A.
(Algorithm derived from Scott 2009:13; symbols and drawing style from Tausworthe 1977).
In mathematics and computer science , an algorithm ( i / ˈ æ l ɡ ə r ɪ ð əm / ) is a step-by-step procedure for calculations.
Algorithms are used forcalculation , data processing , and automated reasoning .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>More precisely, an algorithm is an effective method expressed as a finite list[1] of well-defined instructions[2] for calculating afunction .[3]
Starting from an initial state and initial input (perhapsempty ),[4] the instructions describe acomputation that, when executed , proceeds through a finite[5] number of well-defined successive states, eventually producing &quot;output&quot;[6] and terminating at a final ending state.
The transition from one state to the next is not necessarily deterministic ; some algorithms, known asrandomized algorithms , incorporate random input.[ 7]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Though al-Khwārizmī 's algorism referred to the rules of performing arithmetic using Hindu-Arabic numerals and the systematic solution of linear andquadratic equations , a partial formalization of what would become the modernalgorithm began with attempts to solve the Entscheidungsproblem (the &quot;decision problem&quot;) posed byDavid Hilbert in 1928.
Subsequent formalizations were framed as attempts to define &quot;effective calculability &quot;[8] or &quot;effective method&quot;;[9] those formalizations included theGödel –Herbrand –Kleene recursive functions of 1930, 1934 and 1935,Alonzo Church 's lambda calculus of 1936, Emil Post 's &quot;Formulation 1 &quot; of 1936, and Alan Turing 's Turing machines of 1936–7 and 1939.
Giving a formal definition of algorithms, corresponding to the intuitive notion, remains a challenging problem.[10]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Contents * 1 Informal definition * 2 Formalization * 2.1 Expressing algorithms * 3 Implementation * 4 Computer algorithms * 5 Examples * 5.1 Algorithm example * 5.2 Euclid’s algorithm * 5.2.1 Example * 5.2.2 Computer language for Euclid's algorithm * 5.2.3 An inelegant program for Euclid's algorithm * 5.2.4 An elegant program for Euclid's algorithm * 5.3 Testing the Euclid algorithms * 5.4 Measuring and improving the Euclid algorithms * 6 Algorithmic analysis * 6.1 Formal versus empirical * 6.1.1 FFT speedup * 7 Classification * 7.1 By implementation * 7.2 By design paradigm * 7.3 By field of study * 7.4 By complexity * 8 Continuous algorithms * 9 Legal issues * 10 Etymology * 11 History: Development of the notion of &quot;algorithm&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 11.1 Origin * 11.2 Discrete and distinguishable symbols * 11.3 Manipulation of symbols as &quot;place holders&quot; for numbers: algebra * 11.4 Mechanical contrivances with discrete states * 11.5 Mathematics during the 19th century up to the mid-20th century * 11.6 Emil Post (1936) and Alan Turing (1936–37, 1939)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 11.7 J.
B. Rosser (1939) and S.
C. Kleene (1943)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 11.8 History after 1950 * 12 See also * 13 Notes * 14 References * 14.1 Secondary references * 15 Further reading * 16 External links [ edit ]
Informal definition For a detailed presentation of the various points of view around the definition of &quot;algorithm&quot;, seeAlgorithm characterizations .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For examples of simple addition algorithms specified in the detailed manner described in Algorithm characterizations, seeAlgorithm examples .
While there is no generally acceptedformal definition of &quot;algorithm,&quot; an informal definition could be &quot;a set of rules that precisely defines a sequence of operations.&quot;[11]
For some people, a program is only an algorithm if it stops eventually; for others, a program is only an algorithm if it stops before a given number of calculation steps.[12]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A prototypical example of an algorithm is Euclid's algorithm to determine the maximum common divisor of two integers; an example (there are others) is described by theflow chart above and as an example in a later section.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Boolos &amp; Jeffrey (1974, 1999 ) offer an informal meaning of the word in the following quotation:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>No human being can write fast enough, or long enough, or small enough† ( †&quot;smaller and smaller without limit ...you'd be trying to write on molecules, on atoms, on electrons&quot;) to list all members of an enumerably infinite set by writing out their names, one after another, in some notation.
But humans can do something equally useful, in the case of certain enumerably infinite sets: They can giveexplicit instructions for determining the nth member of the set, for arbitrary finiten.
Such instructions are to be given quite explicitly, in a form in whichthey could be followed by a computing machine, or by a human who is capable of carrying out only very elementary operations on symbols.[13]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The term &quot;enumerably infinite&quot; means &quot;countable using integers perhaps extending to infinity.&quot;
Thus, Boolos and Jeffrey are saying that an algorithm implies instructions for a process that &quot;creates&quot; output integers from an arbitrary &quot;input&quot; integer or integers that, in theory, can be chosen from 0 to infinity.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Thus an algorithm can be an algebraic equation such asy = m + n—two arbitrary &quot;input variables&quot;m and n that produce an output y.
But various authors' attempts to define the notion indicate that the word implies much more than this, something on the order of (for the addition example):
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Precise instructions (in language understood by &quot;the computer&quot;)[14] for a fast, efficient, &quot;good&quot;[15] process that specifies the &quot;moves&quot; of &quot;the computer&quot; (machine or human, equipped with the necessary internally contained information and capabilities)[16] to find, decode, and then process arbitrary input integers/symbolsm and n, symbols + and = ... and &quot;effectively&quot;[17] produce, in a &quot;reasonable&quot; time,[18] output-integer y at a specified place and in a specified format.
The concept of algorithm is also used to define the notion ofdecidability .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>That notion is central for explaining howformal systems come into being starting from a small set ofaxioms and rules.
In logic , the time that an algorithm requires to complete cannot be measured, as it is not apparently related with our customary physical dimension.
From such uncertainties, that characterize ongoing work, stems the unavailability of a definition ofalgorithm that suits both concrete (in some sense) and abstract usage of the term.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Formalization Algorithms are essential to the way computers process data.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Many computer programs contain algorithms that detail the specific instructions a computer should perform (in a specific order) to carry out a specified task, such as calculating employees' paychecks or printing students' report cards.
Thus, an algorithm can be considered to be any sequence of operations that can be simulated by aTuring-complete system.
Authors who assert this thesis include Minsky (1967), Savage (1987) and Gurevich (2000):
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Minsky: &quot;But we will also maintain, with Turing . . . that any procedure which could &quot;naturally&quot; be called effective, can in fact be realized by a (simple) machine.
Although this may seem extreme, the arguments . . . in its favor are hard to refute&quot;.[19]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Gurevich: &quot;...Turing's informal argument in favor of his thesis justifies a stronger thesis: every algorithm can be simulated by a Turing machine ... according to Savage [1987], an algorithm is a computational process defined by a Turing machine&quot;.[20]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Typically, when an algorithm is associated with processing information, data is read from an input source, written to an output device, and/or stored for further processing.
Stored data is regarded as part of the internal state of the entity performing the algorithm.
In practice, the state is stored in one or moredata structures .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For some such computational process, the algorithm must be rigorously defined: specified in the way it applies in all possible circumstances that could arise.
That is, any conditional steps must be systematically dealt with, case-by-case; the criteria for each case must be clear (and computable).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Because an algorithm is a precise list of precise steps, the order of computation is always critical to the functioning of the algorithm.
Instructions are usually assumed to be listed explicitly, and are described as starting &quot;from the top&quot; and going &quot;down to the bottom&quot;, an idea that is described more formally byflow of control .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>So far, this discussion of the formalization of an algorithm has assumed the premises ofimperative programming .
This is the most common conception, and it attempts to describe a task in discrete, &quot;mechanical&quot; means.
Unique to this conception of formalized algorithms is theassignment operation , setting the value of a variable.
It derives from the intuition of &quot;memory &quot; as a scratchpad.
There is an example below of such an assignment.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For some alternate conceptions of what constitutes an algorithm see functional programming and logic programming .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Expressing algorithms Algorithms can be expressed in many kinds of notation, including natural languages , pseudocode , flowcharts , programming languages or control tables (processed by interpreters ).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Natural language expressions of algorithms tend to be verbose and ambiguous, and are rarely used for complex or technical algorithms.
Pseudocode, flowcharts and control tables are structured ways to express algorithms that avoid many of the ambiguities common in natural language statements.
Programming languages are primarily intended for expressing algorithms in a form that can be executed by a computer, but are often used as a way to define or document algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There is a wide variety of representations possible and one can express a givenTuring machine program as a sequence of machine tables (see more atfinite state machine , state transition table and control table ), as flowcharts (see more at state diagram ), or as a form of rudimentarymachine code or assembly code called &quot;sets of quadruples&quot; (see more atTuring machine ).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Representations of algorithms can be classed into three accepted levels of Turing machine description:[21]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* 1 High-level description: &quot;...prose to describe an algorithm, ignoring the implementation details.
At this level we do not need to mention how the machine manages its tape or head.&quot; * 2 Implementation description: &quot;...prose used to define the way the Turing machine uses its head and the way that it stores data on its tape.
At this level we do not give details of states or transition function.&quot; * 3 Formal description: Most detailed, &quot;lowest level&quot;, gives the Turing machine's &quot;state table&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For an example of the simple algorithm &quot;Add m+n&quot; described in all three levels seeAlgorithm examples . [edit ]
Implementation Most algorithms are intended to be implemented as computer programs .
However, algorithms are also implemented by other means, such as in a biologicalneural network (for example, the human brain implementing arithmetic or an insect looking for food), in an electrical circuit , or in a mechanical device.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Computer algorithms Flowchart examples of the canonicalBöhm-Jacopini structures : the SEQUENCE (rectangles descending the page), the WHILE-DO and the IF-THEN-ELSE.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The three structures are made of the primitive conditional GOTO (IFtest=true THEN GOTO step xxx) (a diamond), the unconditional GOTO (rectangle), various assignment operators (rectangle), and HALT (rectangle).
Nesting of these structures inside assignment-blocks result in complex diagrams (cf Tausworthe 1977:100,114).
In computer systems , an algorithm is basically an instance oflogic written in software by software developers to be effective for the intended &quot;target&quot; computer(s) for the target machines to produceoutput from given input (perhaps null).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;Elegant&quot; (compact) programs, &quot;good&quot; (fast) programs : The notion of &quot;simplicity and elegance&quot; appears informally in Knuth and precisely in Chaitin:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Knuth: &quot;. . .we want good algorithms in some loosely defined aesthetic sense.
One criterion . . . is the length of time taken to perform the algorithm . . ..
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Other criteria are adaptability of the algorithm to computers, its simplicity and elegance, etc&quot;[22]
Chaitin: &quot; . . . a program is 'elegant,' by which I mean that it's the smallest possible program for producing the output that it does&quot;[23]
Chaitin prefaces his definition with: &quot;I'll show you can't prove that a program is 'elegant'&quot;—such a proof would solve theHalting problem (ibid).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithm versus function computable by an algorithm: For a given function multiple algorithms may exist.
This is true, even without expanding the available instruction set available to the programmer.
Rogers observes that &quot;It is . . . important to distinguish between the notion ofalgorithm, i.e. procedure and the notion offunction computable by algorithm, i.e. mapping yielded by procedure.
The same function may have several different algorithms&quot;.[ 24]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Unfortunately there may be a tradeoff between goodness (speed) and elegance (compactness)—an elegant program may take more steps to complete a computation than one less elegant.
An example that uses Euclid's algorithm appears below.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Computers (and computors), models of computation: A computer (or human &quot;computor&quot;[25] ) is a restricted type of machine, a &quot;discrete deterministic mechanical device&quot;[26] that blindly follows its instructions.[27]
Melzak's and Lambek's primitive models[28] reduced this notion to four elements: (i) discrete, distinguishablelocations, (ii) discrete, indistinguishablecounters[29] (iii) an agent, and (iv) a list of instructions that areeffective relative to the capability of the agent.[30]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Minsky describes a more congenial variation of Lambek's &quot;abacus&quot; model in his &quot;Very Simple Bases forComputability &quot;.[31]
Minsky's machine proceeds sequentially through its five (or six depending on how one counts) instructions unless either a conditional IF–THEN GOTO or an unconditional GOTO changes program flow out of sequence.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Besides HALT, Minsky's machine includes threeassignment (replacement, substitution)[32] operations: ZERO (e.g. the contents of location replaced by 0: L ← 0), SUCCESSOR (e.g. L ← L+1), and DECREMENT (e.g. L ← L − 1).[33]
Rarely must a programmer write &quot;code&quot; with such a limited instruction set.
But Minsky shows (as do Melzak and Lambek) that his machine isTuring complete with only four general types of instructions: conditional GOTO, unconditional GOTO, assignment/replacement/substitution, and HALT.[34]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Simulation of an algorithm: computer (computor) language: Knuth advises the reader that &quot;the best way to learn an algorithm is to try it . . . immediately take pen and paper and work through an example&quot;.[35]
But what about a simulation or execution of the real thing?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The programmer must translate the algorithm into a language that the simulator/computer/computor caneffectively execute.
Stone gives an example of this: when computing the roots of a quadratic equation the computor must know how to take a square root.
If they don't then for the algorithm to be effective it must provide a set of rules for extracting a square root.[36]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This means that the programmer must know a &quot;language&quot; that is effective relative to the target computing agent (computer/computor).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But what model should be used for the simulation?
Van Emde Boas observes &quot;even if we basecomplexity theory on abstract instead of concrete machines, arbitrariness of the choice of a model remains.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is at this point that the notion ofsimulation enters&quot;.[37]
When speed is being measured, the instruction set matters.
For example, the subprogram in Euclid's algorithm to compute the remainder would execute much faster if the programmer had a &quot;modulus&quot; (division) instruction available rather than just subtraction (or worse: just Minsky's &quot;decrement&quot;).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Structured programming, canonical structures: Per the Church-Turing thesis any algorithm can be computed by a model known to beTuring complete , and per Minsky's demonstrations Turing completeness requires only four instruction types—conditional GOTO, unconditional GOTO, assignment, HALT.
Kemeny and Kurtz observe that while &quot;undisciplined&quot; use of unconditional GOTOs and conditional IF-THEN GOTOs can result in &quot;spaghetti code &quot; a programmer can write structured programs using these instructions; on the other hand &quot;it is also possible, and not too hard, to write badly structured programs in a structured language&quot;.[38]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Tausworthe augments the threeBöhm-Jacopini canonical structures :[39]
SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE.[40]
An additional benefit of a structured program is that it lends itself toproofs of correctness using mathematical induction .[41]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Canonical flowchart symbols[42] : The graphical aide called aflowchart offers a way to describe and document an algorithm (and a computer program of one).
Like program flow of a Minsky machine, a flowchart always starts at the top of a page and proceeds down.
Its primary symbols are only 4: the directed arrow showing program flow, the rectangle (SEQUENCE, GOTO), the diamond (IF-THEN-ELSE), and the dot (OR-tie).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Böhm-Jacopini canonical structures are made of these primitive shapes.
Sub-structures can &quot;nest&quot; in rectangles but only if a single exit occurs from the superstructure.
The symbols and their use to build the canonical structures are shown in the diagram.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Examples Further information: Algorithm examples [edit ]
Algorithm example An animation of thequicksort algorithm sorting an array of randomized values.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The red bars mark the pivot element; at the start of the animation, the element farthest to the right hand side is chosen as the pivot.
One of the simplest algorithms is to find the largest number in an (unsorted) list of numbers.
The solution necessarily requires looking at every number in the list, but only once at each.
From this follows a simple algorithm, which can be stated in a high-level description English prose, as:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>High-level description:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Assume the first item is largest. * Look at each of the remaining items in the list and if it is larger than the largest item so far, make a note of it. * The last noted item is the largest in the list when the process is complete.
(Quasi-)formal description: Written in prose but much closer to the high-level language of a computer program, the following is the more formal coding of the algorithm inpseudocode or pidgin code :
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithm LargestNumber Input: A non-empty list of numbers L.
Output: The largest number in the list L. largest ← L0 for each item in the list (Length(L)≥1), do if the item &gt; largest, then largest ← the item return largest * &quot;←&quot; is a shorthand for &quot;changes to&quot;.
For instance, &quot;largest ← item&quot; means that the value oflargest changes to the value of item. * &quot;return&quot; terminates the algorithm and outputs the value that follows. [edit ]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Euclid’s algorithm The example-diagram of Euclid's algorithm from T.L. Heath 1908 with more detail added.
Euclid does not go beyond a third measuring and gives no numerical examples.
Nicomachus gives the example of 49 and 21: &quot;I subtract the less from the greater; 28 is left; then again I subtract from this the same 21 (for this is possible); 7 is left; I subtact this from 21, 14 is left; from which I again subtract 7 (for this is possible); 7 is left, but 7 cannot be subtracted from 7.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Heath comments that, &quot;The last phrase is curious, but the meaning of it is obvious enough, as also the meaning of the phrase about ending 'at one and the same number'.&quot;(Heath 1908:300).
Euclid ’s algorithm appears as Proposition II in Book VII (&quot;Elementary Number Theory&quot;) of hisElements .[43]
Euclid poses the problem: &quot;Given two numbers not prime to one another, to find their greatest common measure&quot;.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>He defines &quot;A number [to be] a multitude composed of units&quot;: a counting number, a positive integer not including 0.
And to &quot;measure&quot; is to place a shorter measuring lengths successively (q times) along longer length l until the remaining portionr is less than the shorter length s.[44]
In modern words, remainder r = l − q*s, q being the quotient, or remainder r is the &quot;modulus&quot;, the integer-fractional part left over after the division.[45]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For Euclid’s method to succeed, the starting lengths must satisfy two requirements: (i) the lengths must not be 0, AND (ii) the subtraction must be “proper&quot;, a test must guarantee that the smaller of the two numbers is subtracted from the larger (alternately, the two can be equal so their subtraction yields 0).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Euclid's original proof adds a third: the two lengths are not prime to one another.
Euclid stipulated this so that he could construct areductio ad absurdum proof that the two numbers' common measure is in fact thegreatest.[46]
While Nicomachus' algorithm is the same as Euclid's, when the numbers are prime to one another it yields the number &quot;1&quot; for their common measure.
So to be precise the following is really Nicomachus' algorithm.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Example A graphical expression on Euclid's algorithm using example with 1599 and 650.
Example of 1599 and 650:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Step 1 1599 = 650*2 + 299 Step 2 650 = 299*2 + 52 Step 3 299 = 52*5 + 39 Step 4 52 = 39*1 + 13 Step 5 39 = 13*3 + 0 [edit ]
Computer language for Euclid's algorithm Only a few instruction types are required to execute Euclid's algorithm—some logical tests (conditional GOTO), unconditional GOTO, assignment (replacement), and subtraction.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* A location is symbolized by upper case letter(s), e.g. S, A, etc. * The varying quantity (number) in a location is written in lower case letter(s) and (usually) associated with the location's name.
For example, location L at the start might contain the numberl = 3009. [edit ]
An inelegant program for Euclid's algorithm &quot;Inelegant&quot; is a translation of Knuth's version of the algorithm with a subtraction-based remainder-loop replacing his use of division (or a &quot;modulus&quot; instruction).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Derived from Knuth 1973:2–4.
Depending on the two numbers &quot;Inelegant&quot; may compute the g.c.d. in fewer steps than &quot;Elegant&quot;.
The following algorithm is framed as Knuth's 4-step version of Euclid's and Nichomachus', but rather than using division to find the remainder it uses successive subtractions of the shorter lengths from the remaining length r until r is less thans.
The high-level description, shown in boldface, is adapted from Knuth 1973:2–4:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>1 [Into two locations L and S put the numbers l and s that represent the two lengths]: INPUT L, S 2 [Initialize R: make the remaining length r equal to the starting/initial/input lengthl]
R ← L E0: [Ensure r ≥ s.]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>3 [Ensure the smaller of the two numbers is in S and the larger in R]: IF R &gt; S THEN the contents of L is the larger number so skip over the exchange-steps 4, 5 and 6: GOTO step 6 ELSE swap the contents of R and S.
4 L ← R (this first step is redundant, but is useful for later discussion).
5 R ← S 6 S ← L E1:[Find remainder]: Until the remaining length r in R is less than the shorter lengths in S, repeatedly subtract the measuring number s in S from the remaining lengthr in R.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>7 IF S &gt; R THEN done measuring so GOTO 10 ELSE measure again, 8 R ← R − S 9 [Remainder-loop]: GOTO 7.
E2: [Is the remainder 0?]: EITHER (i) the last measure was exact and the remainder in R is 0 program can halt, OR (ii) the algorithm must continue: the last measure left a remainder in R less than measuring number in S.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>10 IF R = 0 then done so GOTO step 15 ELSE continue to step 11, E3: [Interchanges and r ]: The nut of Euclid's algorithm.
Use remainder r to measure what was previously smaller numbers:; L serves as a temporary location.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>11 L ← R 12 R ← S 13 S ← L 14 [Repeat the measuring process]: GOTO 7 OUTPUT:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>15 [Done.
S contains the greatest common divisor]: PRINT S DONE:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>16 HALT, END, STOP. [edit ]
An elegant program for Euclid's algorithm The following version of Euclid's algorithm requires only 6 core instructions to do what 13 are required to do by &quot;Inelegant&quot;; worse, &quot;Inelegant&quot; requires moretypes of instructions.
The flowchart of &quot;Elegant&quot; can be found at the top of this article.
In the (unstructured) Basic language the steps are numbered, and the instruction LET [ ] = [ ] is the assignment instruction symbolized by ←.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>5 REM Euclid's algorithm for greatest common divisor 6 PRINT &quot;Type two integers greater than 0&quot; 10 INPUT A,B 20 IF B=0 THEN GOTO 80 30 IF A &gt; B THEN GOTO 60 40 LET B=B-A 50 GOTO 20 60 LET A=A-B 70 GOTO 20 80 PRINT A 90 END How &quot;Elegant&quot; works: In place of an outer &quot;Euclid loop&quot;, &quot;Elegant&quot; shifts back and forth between two &quot;co-loops&quot;, an A &gt; B loop that computes A ← A − B, and a B ≤ A loop that computes B ← B − A.
This works because, when at last the minuend M is less than or equal to the subtrahend S ( Difference = Minuend − Subtrahend), the minuend can becomes (the new measuring length) and the subtrahend can become the newr (the length to be measured); in other words the &quot;sense&quot; of the subtraction reverses.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Testing the Euclid algorithms Does an algorithm do what its author wants it to do?
A few test cases usually suffice to confirm core functionality.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>One source[47] uses 3009 and 884.
Knuth suggested 40902, 24140.
Another interesting case is the tworelatively prime numbers 14157 and 5950.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But exceptional cases must be identified and tested.
Will &quot;Inelegant&quot; perform properly when R &gt; S, S &gt; R, R = S?
Ditto for &quot;Elegant&quot;: B &gt; A, A &gt; B, A = B?
(Yes to all).
What happens when one number is zero, both numbers are zero?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(&quot;Inelegant&quot; computes forever in all cases; &quot;Elegant&quot; computes forever when A = 0.)
What happens ifnegative numbers are entered?
Fractional numbers?
If the input numbers, i.e. thedomain of the function computed by the algorithm/program, is to include only positive integers including zero, then the failures at zero indicate that the algorithm (and the program that instantiates it) is a partial function rather than a total function .
A notable failure due to exceptions is theAriane V rocket failure.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Proof of program correctness by use of mathematical induction: Knuth demonstrates the application ofmathematical induction to an &quot;extended&quot; version of Euclid's algorithm, and he proposes &quot;a general method applicable to proving the validity of any algorithm&quot;.[48]
Tausworthe proposes that a measure of the complexity of a program be the length of its correctness proof. [49]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Measuring and improving the Euclid algorithms Elegance (compactness) versus goodness (speed) : With only 6 core instructions, &quot;Elegant&quot; is the clear winner compared to &quot;Inelegant&quot; at 13 instructions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>However, &quot;Inelegant&quot; isfaster (it arrives at HALT in fewer steps).
Algorithm analysis [50] indicates why this is the case: &quot;Elegant&quot; doestwo conditional tests in every subtraction loop, whereas &quot;Inelegant&quot; only does one.
As the algorithm (usually) requires many loop-throughs,on average much time is wasted doing a &quot;B = 0?&quot; test that is needed only after the remainder is computed.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Can the algorithms be improved?: Once the programmer judges a program &quot;fit&quot; and &quot;effective&quot;—that is, it computes the function intended by its author—then the question becomes, can it be improved?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The compactness of &quot;Inelegant&quot; can be improved by the elimination of 5 steps.
But Chaitin proved that compacting an algorithm cannot be automated by a generalized algorithm;[51] rather, it can only be doneheuristically , i.e. by exhaustive search (examples to be found atBusy beaver ), trial and error, cleverness, insight, application ofinductive reasoning , etc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Observe that steps 4, 5 and 6 are repeated in steps 11, 12 and 13.
Comparison with &quot;Elegant&quot; provides a hint that these steps together with steps 2 and 3 can be eliminated.
This reduces the number of core instructions from 13 to 8, which makes it &quot;more elegant&quot; than &quot;Elegant&quot; at 9 steps.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The speed of &quot;Elegant&quot; can be improved by moving the B=0? test outside of the two subtraction loops.
This change calls for the addition of 3 instructions (B=0?, A=0?, GOTO).
Now &quot;Elegant&quot; computes the example-numbers faster; whether for any given A, B and R, S this is always the case would require a detailed analysis.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Algorithmic analysis Main article: Analysis of algorithms It is frequently important to know how much of a particular resource (such as time or storage) is theoretically required for a given algorithm.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Methods have been developed for theanalysis of algorithms to obtain such quantitative answers (estimates); for example, the sorting algorithm above has a time requirement of O(n), using the big O notation with n as the length of the list.
At all times the algorithm only needs to remember two values: the largest number found so far, and its current position in the input list.
Therefore it is said to have a space requirement ofO(1), if the space required to store the input numbers is not counted, or O(n) if it is counted.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Different algorithms may complete the same task with a different set of instructions in less or more time, space, or 'effort ' than others.
For example, abinary search algorithm usually outperforms abrute force sequential search when used fortable lookups on sorted lists.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Formal versus empirical Main articles: Empirical algorithmics , Profiling (computer programming) , andProgram optimization The analysis and study of algorithms is a discipline of computer science , and is often practiced abstractly without the use of a specificprogramming language or implementation.
In this sense, algorithm analysis resembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm and not on the specifics of any particular implementation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Usuallypseudocode is used for analysis as it is the simplest and most general representation.
However, ultimately, most algorithms are usually implemented on particular hardware / software platforms and their algorithmic efficiency is eventually put to the test using real code.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For the solution of a &quot;one off&quot; problem, the efficiency of a particular algorithm may not have significant consequences (unless n is extremely large) but for algorithms designed for fast interactive, commercial or long life scientific usage it may be critical.
Scaling from small n to large n frequently exposes inefficient algorithms that are otherwise benign.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Empirical testing is useful because it may uncover unexpected interactions that affect performance.Benchmarks may be used to compare before/after potential improvements to an algorithm after program optimization.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
FFT speedup Main article: Algorithmic efficiency To illustrate the potential improvements possible even in some extremely &quot;well established&quot; algorithms, a recent significant innovation, relating toFFT algorithms (used very heavily in the field of image processing), may have decreased processing times by a factor as high as 10,000 .
The impact of this speedup enables, for example, portable computing devices (as well as other devices) to consume less power[52]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Classification There are various ways to classify algorithms, each with its own merits.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
By implementation One way to classify algorithms is by implementation means.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Recursion or iteration: A recursive algorithm is one that invokes (makes reference to) itself repeatedly until a certain condition matches, which is a method common tofunctional programming .
Iterative algorithms use repetitive constructs likeloops and sometimes additional data structures likestacks to solve the given problems.
Some problems are naturally suited for one implementation or the other.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example,towers of Hanoi is a well understood in recursive implementation.
Every recursive version has an equivalent (but possibly more or less complex) iterative version, and vice versa. * Logical: An algorithm may be viewed as controlled logical deduction .
This notion may be expressed as:Algorithm = logic + control.[53]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The logic component expresses the axioms that may be used in the computation and the control component determines the way in which deduction is applied to the axioms.
This is the basis for thelogic programming paradigm.
In pure logic programming languages the control component is fixed and algorithms are specified by supplying only the logic component.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The appeal of this approach is the elegantsemantics : a change in the axioms has a well-defined change in the algorithm. * Serial or parallel or distributed: Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time.
Those computers are sometimes called serial computers.
Analgorithm designed for such an environment is called a serial algorithm, as opposed toparallel algorithms or distributed algorithms .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Parallel algorithms take advantage of computer architectures where several processors can work on a problem at the same time, whereas distributed algorithms utilize multiple machines connected with anetwork .
Parallel or distributed algorithms divide the problem into more symmetrical or asymmetrical subproblems and collect the results back together.
The resource consumption in such algorithms is not only processor cycles on each processor but also the communication overhead between the processors.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sorting algorithms can be parallelized efficiently, but their communication overhead is expensive.
Iterative algorithms are generally parallelizable.
Some problems have no parallel algorithms, and are called inherently serial problems. * Deterministic or non-deterministic: Deterministic algorithms solve the problem with exact decision at every step of the algorithm whereasnon-deterministic algorithms solve problems via guessing although typical guesses are made more accurate through the use ofheuristics . * Exact or approximate: While many algorithms reach an exact solution, approximation algorithms seek an approximation that is close to the true solution.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Approximation may use either a deterministic or a random strategy.
Such algorithms have practical value for many hard problems. * Quantum algorithm run on a realistic model ofquantum computation .
The term is usually used for those algorithms which seem inherently quantum, or use some essential feature of quantum computation such asquantum superposition or quantum entanglement . [edit ]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By design paradigm Another way of classifying algorithms is by their design methodology or paradigm.
There is a certain number of paradigms, each different from the other.
Furthermore, each of these categories includes many different types of algorithms.
Some commonly found paradigms include:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Brute-force or exhaustive search.
This is the naive method of trying every possible solution to see which is best.[54] * Divide and conquer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usuallyrecursively ) until the instances are small enough to solve easily.
One such example of divide and conquer ismerge sorting .
Sorting can be done on each segment of data after dividing data into segments and sorting of entire data can be obtained in the conquer phase by merging the segments.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A simpler variant of divide and conquer is called adecrease and conquer algorithm , that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem.
Divide and conquer divides the problem into multiple subproblems and so the conquer stage is more complex than decrease and conquer algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An example of decrease and conquer algorithm is thebinary search algorithm . * Dynamic programming .
When a problem showsoptimal substructure , meaning the optimal solution to a problem can be constructed from optimal solutions to subproblems, andoverlapping subproblems , meaning the same subproblems are used to solve many different problem instances, a quicker approach calleddynamic programming avoids recomputing solutions that have already been computed.
For example,Floyd–Warshall algorithm , the shortest path to a goal from a vertex in a weightedgraph can be found by using the shortest path to the goal from all adjacent vertices.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Dynamic programming and memoization go together.
The main difference between dynamic programming and divide and conquer is that subproblems are more or less independent in divide and conquer, whereas subproblems overlap in dynamic programming.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The difference between dynamic programming and straightforward recursion is in caching or memoization of recursive calls.
When subproblems are independent and there is no repetition, memoization does not help; hence dynamic programming is not a solution for all complex problems.
By using memoization or maintaining atable of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity. * The greedy method.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A greedy algorithm is similar to a dynamic programming algorithm , but the difference is that solutions to the subproblems do not have to be known at each stage; instead a &quot;greedy&quot; choice can be made of what looks best for the moment.
The greedy method extends the solution with the best possible decision (not all feasible decisions) at an algorithmic stage based on the current local optimum and the best decision (not all possible decisions) made in a previous stage.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It is not exhaustive, and does not give an accurate answer to many problems.
But when it works, it is the fastest method.
The most popular greedy algorithm is finding the minimal spanning tree as given byHuffman Tree , Kruskal , Prim , Sollin . * Linear programming.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>When solving a problem using linear programming , specific inequalities involving the inputs are found and then an attempt is made to maximize (or minimize) some linear function of the inputs.
Many problems (such as themaximum flow for directed graphs) can be stated in a linear programming way, and then be solved by a 'generic' algorithm such as thesimplex algorithm .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A more complex variant of linear programming is called integer programming, where the solution space is restricted to theintegers . * Reduction .
This technique involves solving a difficult problem by transforming it into a better known problem for which we have (hopefully)asymptotically optimal algorithms.
The goal is to find a reducing algorithm whosecomplexity is not dominated by the resulting reduced algorithm's.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For example, oneselection algorithm for finding the median in an unsorted list involves first sorting the list (the expensive portion) and then pulling out the middle element in the sorted list (the cheap portion).
This technique is also known astransform and conquer. * Search and enumeration.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Many problems (such as playing chess ) can be modeled as problems on graphs .
A graph exploration algorithm specifies rules for moving around a graph and is useful for such problems.
This category also includessearch algorithms , branch and bound enumeration and backtracking . * Randomized algorithms are those that make some choices randomly (or pseudo-randomly); for some problems, it can in fact be proven that the fastest solutions must involve some randomness .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>There are two large classes of such algorithms: * Monte Carlo algorithms return a correct answer with high-probability.
E.g.RP is the subclass of these that run inpolynomial time ) * Las Vegas algorithms always return the correct answer, but their running time is only probabilistically bound, e.g.ZPP . * In optimization problems , heuristic algorithms do not try to find an optimal solution, but an approximate solution where the time or resources are limited.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>They are not practical to find perfect solutions.
An example of this would belocal search , tabu search , or simulated annealing algorithms, a class of heuristic probabilistic algorithms that vary the solution of a problem by a random amount.
The name &quot;simulated annealing&quot; alludes to the metallurgic term meaning the heating and cooling of metal to achieve freedom from defects.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The purpose of the random variance is to find close to globally optimal solutions rather than simply locally optimal ones, the idea being that the random element decreases as the algorithm settles down to a solution.Approximation algorithms are those heuristic algorithms that additionally provide some bounds on the error.Genetic algorithms attempt to find solutions to problems by mimicking biologicalevolutionary processes, with a cycle of random mutations yielding successive generations of &quot;solutions&quot;.
Thus, they emulate reproduction and &quot;survival of the fittest&quot;.
Ingenetic programming , this approach is extended to algorithms, by regarding the algorithm itself as a &quot;solution&quot; to a problem. [ edit ]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By field of study See also: List of algorithms Every field of science has its own problems and needs efficient algorithms.
Related problems in one field are often studied together.
Some example classes aresearch algorithms , sorting algorithms , merge algorithms , numerical algorithms , graph algorithms , string algorithms , computational geometric algorithms , combinatorial algorithms , medical algorithms , machine learning , cryptography , data compression algorithms and parsing techniques .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Fields tend to overlap with each other, and algorithm advances in one field may improve those of other, sometimes completely unrelated, fields.
For example, dynamic programming was invented for optimization of resource consumption in industry, but is now used in solving a broad range of problems in many fields.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
By complexity See also: Complexity class  and Parameterized complexity Algorithms can be classified by the amount of time they need to complete compared to their input size.
There is a wide variety: some algorithms complete in linear time relative to input size, some do so in an exponential amount of time or even worse, and some never halt.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Additionally, some problems may have multiple algorithms of differing complexity, while other problems might have no algorithms or no known efficient algorithms.
There are also mappings from some problems to other problems.
Owing to this, it was found to be more suitable to classify the problems themselves instead of the algorithms into equivalence classes based on the complexity of the best possible algorithms for them.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Burgin (2005, p. 24) uses a generalized definition of algorithms that relaxes the common requirement that the output of the algorithm that computes a function must be determined after a finite number of steps.
He defines a super-recursive class of algorithms as &quot;a class of algorithms in which it is possible to compute functions not computable by any Turing machine&quot; (Burgin 2005, p. 107).
This is closely related to the study of methods of hypercomputation .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Continuous algorithms The adjective &quot;continuous&quot; when applied to the word &quot;algorithm&quot; can mean:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* An algorithm operating on data that represents continuous quantities, even though this data is represented by discrete approximations—such algorithms are studied innumerical analysis ; or * An algorithm in the form of a differential equation that operates continuously on the data, running on ananalog computer .[55] [edit ]
Legal issues See also: Software patents for a general overview of the patentability of software, including computer-implemented algorithms.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithms, by themselves, are not usually patentable.
In the United States, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals does not constitute &quot;processes&quot; (USPTO 2006), and hence algorithms are not patentable (as in Gottschalk v.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Benson ).
However, practical applications of algorithms are sometimes patentable.
For example, inDiamond v.
Diehr , the application of a simplefeedback algorithm to aid in the curing ofsynthetic rubber was deemed patentable.
The patenting of software is highly controversial, and there are highly criticized patents involving algorithms, especiallydata compression algorithms, such as Unisys ' LZW patent .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Additionally, some cryptographic algorithms have export restrictions (see export of cryptography ).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Etymology The word &quot;Algorithm&quot;, or &quot;Algorism &quot; in some other writing versions, comes from the nameal-Khwārizmī , pronounced in classical Arabic as Al-Khwarithmi.
Al-Khwārizmī (Persian : الخوارزمي‎, c.
780-850) was a Persian mathematician , astronomer , geographer and a scholar in the House of Wisdom in Baghdad , whose name means &quot;the native of Khwarezm &quot;, a city that was part of the Greater Iran during his era and now is in modern dayUzbekistan [56]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[57] [58]
He wrote a treatise in the Arabic language during the 9th century, which was translated intoLatin in the 12th century under the title Algoritmi de numero Indorum.
This title means &quot;Algoritmi on the numbers of the Indians&quot;, where &quot;Algoritmi&quot; was the translator's Latinization of Al-Khwarizmi's name.[59]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Al-Khwarizmi was the most widely read mathematician in Europe in the late Middle Ages, primarily through his other book, theAlgebra .[60]
In late medieval Latin, algorismus, the corruption of his name, simply meant the &quot;decimal number system&quot; that is still the meaning of modern Englishalgorism .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In 17th century French the word's form, but not its meaning, changed toalgorithme.
English adopted the French very soon afterwards, but it wasn't until the late 19th century that &quot;Algorithm&quot; took on the meaning that it has in modern English.[61]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
History: Development of the notion of &quot;algorithm&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Origin The word algorithm comes from the name of the 9th century Persian Muslim mathematician Abu Abdullah Muhammad ibn Musa Al-Khwarizmi.
The word algorism originally referred only to the rules of performing arithmetic using Hindu-Arabic numerals but evolved via European Latin translation of Al-Khwarizmi's name into algorithm by the 18th century.
The use of the word evolved to include all definite procedures for solving problems or performing tasks.[62]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Discrete and distinguishable symbols Tally-marks: To keep track of their flocks, their sacks of grain and their money the ancients used tallying: accumulating stones or marks scratched on sticks, or making discrete symbols in clay.
Through the Babylonian and Egyptian use of marks and symbols, eventuallyRoman numerals and the abacus evolved (Dilson, p. 16–41).
Tally marks appear prominently inunary numeral system arithmetic used in Turing machine and Post–Turing machine computations.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Manipulation of symbols as &quot;place holders&quot; for numbers: algebra The work of the ancient Greek geometers (Euclidean algorithm ), Persian mathematician Al-Khwarizmi (from whose name the terms &quot;algorism &quot; and &quot;algorithm&quot; are derived), and Western European mathematicians culminated in Leibniz 's notion of the calculus ratiocinator (ca 1680):
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A good century and a half ahead of his time, Leibniz proposed an algebra of logic, an algebra that would specify the rules for manipulating logical concepts in the manner that ordinary algebra specifies the rules for manipulating numbers.[63] [edit ]
Mechanical contrivances with discrete states The clock: Bolter credits the invention of the weight-driven clock as &quot;The key invention [of Europe in the Middle Ages]&quot;, in particular theverge escapement [64] that provides us with the tick and tock of a mechanical clock.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;The accurate automatic machine&quot;[65] led immediately to &quot;mechanicalautomata &quot; beginning in the 13th century and finally to &quot;computational machines&quot;—thedifference engine and analytical engines of Charles Babbage and Countess Ada Lovelace , mid-19th century.[66]
Lovelace is credited with the first creation of an algorithm intended for processing on a computer - Babbage's analytical engine, the first device considered a realTuring-complete computer instead of just a calculator - and is sometimes called &quot;history's first programmer&quot; as a result, though a full implementation of Babbage's second device would not be realized until decades after her lifetime.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Logical machines 1870—Stanley Jevons ' &quot;logical abacus&quot; and &quot;logical machine&quot;: The technical problem was to reduce Boolean equations when presented in a form similar to what are now known asKarnaugh maps .
Jevons (1880) describes first a simple &quot;abacus&quot; of &quot;slips of wood furnished with pins, contrived so that any part or class of the [logical] combinations can be picked out mechanically . . .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>More recently however I have reduced the system to a completely mechanical form, and have thus embodied the whole of the indirect process of inference in what may be called aLogical Machine&quot; His machine came equipped with &quot;certain moveable wooden rods&quot; and &quot;at the foot are 21 keys like those of a piano [etc] . . .&quot;.
With this machine he could analyze a &quot;syllogism or any other simple logical argument&quot;.[ 67]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>This machine he displayed in 1870 before the Fellows of the Royal Society.[68]
Another logician John Venn , however, in his 1881 Symbolic Logic, turned a jaundiced eye to this effort: &quot;I have no high estimate myself of the interest or importance of what are sometimes called logical machines ... it does not seem to me that any contrivances at present known or likely to be discovered really deserve the name of logical machines&quot;; see more atAlgorithm characterizations .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But not to be outdone he too presented &quot;a plan somewhat analogous, I apprehend, to Prof. Jevon'sabacus ... [And] [a]gain, corresponding to Prof. Jevons's logical machine, the following contrivance may be described.
I prefer to call it merely a logical-diagram machine ... but I suppose that it could do very completely all that can be rationally expected of any logical machine&quot;.[69]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Jacquard loom, Hollerith punch cards, telegraphy and telephony—the electromechanical relay: Bell and Newell (1971) indicate that the Jacquard loom (1801), precursor to Hollerith cards (punch cards, 1887), and &quot;telephone switching technologies&quot; were the roots of a tree leading to the development of the first computers.[70]
By the mid-19th century thetelegraph , the precursor of the telephone, was in use throughout the world, its discrete and distinguishable encoding of letters as &quot;dots and dashes&quot; a common sound.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>By the late 19th century theticker tape (ca 1870s) was in use, as was the use of Hollerith cards in the 1890 U.S. census.
Then came theteleprinter (ca.
1910) with its punched-paper use ofBaudot code on tape.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Telephone-switching networks of electromechanical relays (invented 1835) was behind the work of George Stibitz (1937), the inventor of the digital adding device.
As he worked in Bell Laboratories, he observed the &quot;burdensome' use of mechanical calculators with gears.
&quot;He went home one evening in 1937 intending to test his idea...
When the tinkering was over, Stibitz had constructed a binary adding device&quot;.[71]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Davis (2000) observes the particular importance of the electromechanical relay (with its two &quot;binary states&quot;open and closed):
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>It was only with the development, beginning in the 1930s, of electromechanical calculators using electrical relays, that machines were built having the scope Babbage had envisioned.&quot;[72] [edit ]
Mathematics during the 19th century up to the mid-20th century Symbols and rules: In rapid succession the mathematics of George Boole (1847, 1854), Gottlob Frege (1879), and Giuseppe Peano (1888–1889) reduced arithmetic to a sequence of symbols manipulated by rules.
Peano'sThe principles of arithmetic, presented by a new method (1888) was &quot;the first attempt at an axiomatization of mathematics in a symbolic language&quot;.[73]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>But Heijenoort gives Frege (1879) this kudos: Frege's is &quot;perhaps the most important single work ever written in logic. ... in which we see a &quot; 'formula language', that is alingua characterica, a language written with special symbols, &quot;for pure thought&quot;, that is, free from rhetorical embellishments ... constructed from specific symbols that are manipulated according to definite rules&quot;.[74]
The work of Frege was further simplified and amplified byAlfred North Whitehead and Bertrand Russell in their Principia Mathematica (1910–1913).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The paradoxes: At the same time a number of disturbing paradoxes appeared in the literature, in particular theBurali-Forti paradox (1897), the Russell paradox (1902–03), and the Richard Paradox .[75]
The resultant considerations led toKurt Gödel 's paper (1931)—he specifically cites the paradox of the liar—that completely reduces rules ofrecursion to numbers.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Effective calculability: In an effort to solve the Entscheidungsproblem defined precisely by Hilbert in 1928, mathematicians first set about to define what was meant by an &quot;effective method&quot; or &quot;effective calculation&quot; or &quot;effective calculability&quot; (i.e., a calculation that would succeed).
In rapid succession the following appeared:Alonzo Church , Stephen Kleene and J.B. Rosser 's λ-calculus [76] a finely honed definition of &quot;general recursion&quot; from the work of Gödel acting on suggestions ofJacques Herbrand (cf.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Gödel's Princeton lectures of 1934) and subsequent simplifications by Kleene.[77]
Church's proof[78] that the Entscheidungsproblem was unsolvable,Emil Post 's definition of effective calculability as a worker mindlessly following a list of instructions to move left or right through a sequence of rooms and while there either mark or erase a paper or observe the paper and make a yes-no decision about the next instruction.[79]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Alan Turing's proof of that the Entscheidungsproblem was unsolvable by use of his &quot;a- [automatic-] machine&quot;[80] —in effect almost identical to Post's &quot;formulation&quot;,J.
Barkley Rosser 's definition of &quot;effective method&quot; in terms of &quot;a machine&quot;.[81]
S.
C. Kleene 's proposal of a precursor to &quot; Church thesis &quot; that he called &quot;Thesis I&quot;,[82] and a few years later Kleene's renaming his Thesis &quot;Church's Thesis&quot;[83] and proposing &quot;Turing's Thesis&quot;.[84]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
Emil Post (1936) and Alan Turing (1936–37, 1939)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Here is a remarkable coincidence of two men not knowing each other but describing a process of men-as-computers working on computations—and they yield virtually identical definitions.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Emil Post (1936) described the actions of a &quot;computer&quot; (human being) as follows:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;...two concepts are involved: that of a symbol space in which the work leading from problem to answer is to be carried out, and a fixed unalterableset of directions.
His symbol space would be &quot;a two way infinite sequence of spaces or boxes...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The problem solver or worker is to move and work in this symbol space, being capable of being in, and operating in but one box at a time.... a box is to admit of but two possible conditions, i.e., being empty or unmarked, and having a single mark in it, say a vertical stroke.
&quot;One box is to be singled out and called the starting point. ...a specific problem is to be given in symbolic form by a finite number of boxes [i.e., INPUT] being marked with a stroke.
Likewise the answer [i.e., OUTPUT] is to be given in symbolic form by such a configuration of marked boxes....
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;A set of directions applicable to a general problem sets up a deterministic process when applied to each specific problem.
This process terminates only when it comes to the direction of type (C ) [i.e., STOP]&quot;.[85]
See more at Post–Turing machine Alan Turing's statue at Bletchley Park .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Alan Turing 's work[86] preceded that of Stibitz (1937); it is unknown whether Stibitz knew of the work of Turing.
Turing's biographer believed that Turing's use of a typewriter-like model derived from a youthful interest: &quot;Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a typewriter; and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'&quot;.[87]
Given the prevalence of Morse code and telegraphy, ticker tape machines, and teletypewriters we might conjecture that all were influences.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Turing—his model of computation is now called a Turing machine —begins, as did Post, with an analysis of a human computer that he whittles down to a simple set of basic motions and &quot;states of mind&quot;.
But he continues a step further and creates a machine as a model of computation of numbers.[88]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;Computing is normally done by writing certain symbols on paper.
We may suppose this paper is divided into squares like a child's arithmetic book....I assume then that the computation is carried out on one-dimensional paper, i.e., on a tape divided into squares.
I shall also suppose that the number of symbols which may be printed is finite....
&quot;The behavior of the computer at any moment is determined by the symbols which he is observing, and his &quot;state of mind&quot; at that moment.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We may suppose that there is a bound B to the number of symbols or squares which the computer can observe at one moment.
If he wishes to observe more, he must use successive observations.
We will also suppose that the number of states of mind which need be taken into account is finite...
&quot;Let us imagine that the operations performed by the computer to be split up into 'simple operations' which are so elementary that it is not easy to imagine them further divided.&quot;[89]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Turing's reduction yields the following:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;The simple operations must therefore include: &quot;(a) Changes of the symbol on one of the observed squares &quot;(b) Changes of one of the squares observed to another square within L squares of one of the previously observed squares.
&quot;It may be that some of these change necessarily invoke a change of state of mind.
The most general single operation must therefore be taken to be one of the following:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;(A) A possible change (a) of symbol together with a possible change of state of mind.
&quot;(B) A possible change (b) of observed squares, together with a possible change of state of mind&quot; &quot;We may now construct a machine to do the work of this computer.&quot;[89]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A few years later, Turing expanded his analysis (thesis, definition) with this forceful expression of it:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;A function is said to be &quot;effectively calculable&quot; if its values can be found by some purely mechanical process.
Though it is fairly easy to get an intuitive grasp of this idea, it is nevertheless desirable to have some more definite, mathematical expressible definition . . . [he discusses the history of the definition pretty much as presented above with respect to Gödel, Herbrand, Kleene, Church, Turing and Post] . . .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We may take this statement literally, understanding by a purely mechanical process one which could be carried out by a machine.
It is possible to give a mathematical description, in a certain normal form, of the structures of these machines.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The development of these ideas leads to the author's definition of a computable function, and to an identification of computability † with effective calculability . . . .
&quot;† We shall use the expression &quot;computable function&quot; to mean a function calculable by a machine, and we let &quot;effectively calculable&quot; refer to the intuitive idea without particular identification with any one of these definitions&quot;.[90] [edit ]
J.
B. Rosser (1939) and S.
C. Kleene (1943)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>J.
Barkley Rosser defined an 'effective [mathematical] method' in the following manner (boldface added):
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;'Effective method' is used here in the rather special sense of a method each step of which is precisely determined and which is certain to produce the answer in a finite number of steps.
With this special meaning, three different precise definitions have been given to date. [his footnote #5; see discussion immediately below].
The simplest of these to state (due to Post and Turing) says essentially thatan effective method of solving certain sets of problems exists if one can build a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>All three definitions are equivalent, so it doesn't matter which one is used.
Moreover, the fact that all three are equivalent is a very strong argument for the correctness of any one.&quot;
(Rosser 1939:225–6) Rosser's footnote #5 references the work of (1) Church and Kleene and their definition of λ-definability, in particular Church's use of it in hisAn Unsolvable Problem of Elementary Number Theory (1936); (2) Herbrand and Gödel and their use of recursion in particular Gödel's use in his famous paperOn Formally Undecidable Propositions of Principia Mathematica and Related Systems I (1931); and (3) Post (1936) and Turing (1936–7) in their mechanism-models of computation.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Stephen C. Kleene defined as his now-famous &quot;Thesis I&quot; known as theChurch–Turing thesis .
But he did this in the following context (boldface in original):
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;12.
Algorithmic theories...
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>In setting up a complete algorithmic theory, what we do is to describe a procedure, performable for each set of values of the independent variables, which procedure necessarily terminates and in such manner that from the outcome we can read a definite answer, &quot;yes&quot; or &quot;no,&quot; to the question, &quot;is the predicate value true?&quot;&quot; (Kleene 1943:273) [edit ]
History after 1950 A number of efforts have been directed toward further refinement of the definition of &quot;algorithm&quot;, and activity is on-going because of issues surrounding, in particular,foundations of mathematics (especially the Church–Turing thesis ) andphilosophy of mind (especially arguments aroundartificial intelligence ).
For more, see Algorithm characterizations .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>[edit ]
See also * Abstract machine * Algorithm engineering * Algorithmic composition * Algorithmic trading * Garbage in, garbage out * Algorithmic synthesis * List of important publications in theoretical computer science - Algorithms * Introduction to Algorithms * List of algorithm general topics * Numerical Mathematics Consortium * Theory of computation * Computability theory * Computational complexity theory [edit ]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Notes * &lt;s&gt; &quot;Any classical mathematical algorithm, for example, can be described in a finite number of English words&quot; (Rogers 1987:2). * &lt;s&gt; Well defined with respect to the agent that executes the algorithm: &quot;There is a computing agent, usually human, which can react to the instructions and carry out the computations&quot; (Rogers 1987:2). * &lt;s&gt; &quot;an algorithm is a procedure for computing afunction (with respect to some chosen notation for integers) ... this limitation (to numerical functions) results in no loss of generality&quot;, (Rogers 1987:1). * &lt;s&gt; &quot;An algorithm has zero or more inputs, i.e., quantities which are given to it initially before the algorithm begins&quot; (Knuth 1973:5). * &lt;s&gt; &quot;A procedure which has all the characteristics of an algorithm except that it possibly lacks finiteness may be called a 'computational method'&quot; (Knuth 1973:5). * &lt;s&gt; &quot;An algorithm has one or more outputs, i.e. quantities which have a specified relation to the inputs&quot; (Knuth 1973:5). * &lt;s&gt; Whether or not a process with random interior processes (not including the input) is an algorithm is debatable.
Rogers opines that: &quot;a computation is carried out in a discrete stepwise fashion, without use of continuous methods or analogue devices . . . carried forward deterministically, without resort to random methods or devices, e.g., dice&quot; Rogers 1987:2. * &lt;s&gt; Kleene 1943 in Davis 1965:274 * &lt;s&gt; Rosser 1939 in Davis 1965:225 * &lt;s&gt; Moschovakis, Yiannis N. (2001).&quot;What is an algorithm?&quot; .
In Engquist, B.; Schmid, W.Mathematics Unlimited — 2001 and beyond.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Springer. pp. 919–936 (Part II).ISBN  9783540669135
.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>  * &lt;s&gt; Stone 1973:4 * &lt;s&gt; Stone simply requires that &quot;it must terminate in a finite number of steps&quot; (Stone 1973:7–8). * &lt;s&gt; Boolos and Jeffrey 1974,1999:19 * &lt;s&gt; cf Stone 1972:5 * &lt;s&gt; Knuth 1973:7 states: &quot;In practice we not only want algorithms, we wantgood agorithms ... one criterion of goodness is the length of time taken to perform the algorithm ... other criteria are the adaptability of the algorithm to computers, its simplicty and elegance, etc.&quot; * &lt;s&gt; cf Stone 1973:6 * &lt;s&gt; Stone 1973:7–8 states that there must be, &quot;...a procedure that a robot [i.e., computer] can follow in order to determine pecisely how to obey the instruction.&quot;
Stone adds finiteness of the process, and definiteness (having no ambiguity in the instructions) to this definition. * &lt;s&gt; Knuth, loc. cit * &lt;s&gt; Minsky 1967:105 * &lt;s&gt; Gurevich 2000:1, 3 * &lt;s&gt; Sipser 2006:157 * &lt;s&gt; Knuth 1973:7 * &lt;s&gt; Chaitin 2005:32 * &lt;s&gt; Rogers 1987:1–2 * &lt;s&gt; In his essay &quot;Calculations by Man and Machine: Conceptual Analysis&quot; Seig 2002:390 credits this distinction to Robin Gandy, cf Wilfred Seig, et. al., 2002Reflections on the foundations of mathematics: Essays in honor of Solomon Feferman, Association for Symbolic Logic, A.
K Peters Ltd, Natick, MA. * &lt;s&gt; cf Gandy 1980:126, Robin GandyChurch's Thesis and Principles for Mechanisms appearing on pp. 123–148 in J.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Barwise et. al.
1980The Kleene Symposium, North-Holland Publishing Company. * &lt;s&gt; A &quot;robot&quot;: &quot;A computer is a robot that performs any task that can be described as a sequence of instructions.&quot; cf Stone 1972:3 * &lt;s&gt; Lambek’s &quot;abacus&quot; is a &quot;countably infinite number of locations (holes, wires etc.) together with an unlimited supply of counters (pebbles, beads, etc).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The locations are distinguishable, the counters are not&quot;.
The holes have unlimited capacity, and standing by is an agent who understands and is able to carry out the list of instructions&quot; (Lambek 1961:295).
Lambek references Melzak who defines his Q-machine as &quot;an indefinitely large number of locations . . . an indefinitely large supply of counters distributed among these locations, a program, and an operator whose sole purpose is to carry out the program&quot; (Melzak 1961:283).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>B-B-J (loc. cit.) add the stipulation that the holes are &quot;capable of holding any number of stones&quot; (p.
46).
Both Melzak and Lambek appear inThe Canadian Mathematical Bulletin, vol.
4, no.
3, September 1961. * &lt;s&gt; If no confusion results, the word &quot;counters&quot; can be dropped, and a location can be said to contain a single &quot;number&quot;. * &lt;s&gt; &quot;We say that an instruction iseffective if there is a procedure that the robot can follow in order to determine precisely how to obey the instruction.&quot;
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(Stone 1972:6) * &lt;s&gt; cf Minsky 1967: Chapter 11 &quot;Computer models&quot; and Chapter 14 &quot;Very Simple Bases for Computability&quot; pp. 255–281 in particular * &lt;s&gt; cf Knuth 1973:3. * &lt;s&gt; But always preceded by IF–THEN to avoid improper subtraction. * &lt;s&gt; However, a few different assignment instructions (e.g.
DECREMENT, INCREMENT and ZERO/CLEAR/EMPTY for a Minsky machine) are also required for Turing-completeness; their exact specification is somewhat up to the designer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The unconditional GOTO is a convenience; it can be constructed by initializing a dedicated location to zero e.g. the instruction &quot; Z ← 0 &quot;; thereafter the instruction IF Z=0 THEN GOTO xxx is unconditional. * &lt;s&gt; Knuth 1973:4 * &lt;s&gt; Stone 1972:5.
Methods for extracting roots are not trivial: seeMethods of computing square roots . * &lt;s&gt; Cf page 875 in Peter van Emde Boas's &quot;Machine Models and Simulation&quot; inJan van Leeuwen ed., 1990, &quot;Handbook of Theoretical Computer Science.
Volume A: algorithms and Complexity&quot;, The MIT Press/Elsevier,ISBN 0-444-88071-2 (Volume A). * &lt;s&gt; John G. Kemeny and Thomas E. Kurtz 1985 Back to Basic: The History, Corruption, and Future of the Language, Addison-Wesley Publishing Company, Inc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reading, MA,ISBN 0-201-13433-0 . * &lt;s&gt; Tausworthe 1977:101 * &lt;s&gt; Tausworthe 1977:142 * &lt;s&gt; Knuth 1973 section 1.2.1, expanded by Tausworthe 1977 at pages 100ff and Chapter 9.1 * &lt;s&gt; cf Tausworthe 1977 * &lt;s&gt; Heath 1908:300; Hawking’s Dover 2005 edition derives from Heath. * &lt;s&gt; &quot; 'Let CD, measuring BF, leave FA less than itself.'
This is a neat abbreviation for saying, measure along BA successive lengths equal to CD until a point F is reached such that the length FA remaining is less than CD; in other words, let BF be the largest exact multiple of CD contained in BA&quot; (Heath 1908:297 * &lt;s&gt; For modern treatments using division in the algorithm see Hardy and Wright 1979:180, Knuth 1973:2 (Volume 1), plus more discussion of Euclid's algorithm in Knuth 1969:293-297 (Volume 2). * &lt;s&gt; Euclid covers this question in his Proposition 1. * &lt;s&gt; &quot;Euclid's Elements, Book VII, Proposition 2&quot; .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Aleph0.clarku.edu.
Retrieved 2012-05-20.  * &lt;s&gt; Knuth 1973:13–18.
He credits &quot;the formulation of algorithm-proving in terms of asertions and induction&quot; to R.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>W. Floyd, Peter Naur, C. A. R. Hoare, H. H. Goldstine and J. von Neumann.
Tausworth 1977 borrows Knuth's Euclid example and extends Knuth's method in section 9.1Formal Proofs (pages 288–298). * &lt;s&gt; Tausworthe 1997:294 * &lt;s&gt; cf Knuth 1973:7 (Vol.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>I), and his more-detailed analyses on pp. 1969:294-313 (Vol II). * &lt;s&gt; Breakdown occurs when an algorithm tries to compact itself.
Success would solve theHalting problem . * &lt;s&gt; Haitham Hassanieh, Piotr Indyk, Dina Katabi, and Eric Price, &quot;Simple and Practical Algorithm for Sparse Fourier Transform [dead link ],&quot; ACM-SIAM Symposium On Discrete Algorithms (SODA), Kyoto, January 2012.
See also thesFFT Web Page . * &lt;s&gt; Kowalski 1979 * &lt;s&gt; Sue Carroll, Taz Daughtrey (2007-07-04).Fundamental Concepts for the Software Quality Engineer . pp. 282 et seq.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>ISBN   978-0-87389-720-4 .  * &lt;s&gt; Adaptation and learning in automatic systems , page 54, Ya.
Z. Tsypkin, Z. J. Nikolic, Academic Press, 1971,ISBN 978-0-12-702050-1 * &lt;s&gt; Toomer 1990 ,[ citation not found ]. * &lt;s&gt; Hogendijk, Jan P. (1998).&quot;al-Khwarzimi&quot; .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Pythagoras 38 (2): 4–5. [dead link ] * &lt;s&gt; Oaks, Jeffrey A.&quot;Was al-Khwarizmi an applied algebraist?&quot; .
University of Indianapolis .
Retrieved 2008-05-30.   * &lt;s&gt; Al-Khwarizmi: The Inventor of Algebra , by Corona Brezina (2006) * &lt;s&gt; Foremost mathematical texts in history , according toCarl B. Boyer . * &lt;s&gt; Etymology of algorithm atDictionary.Reference.com * &lt;s&gt; &quot;History of Algorithms and Algorithmics&quot; .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Scriptol.com.
Retrieved 2012-11-07.  * &lt;s&gt; Davis 2000:18 * &lt;s&gt; Bolter 1984:24 * &lt;s&gt; Bolter 1984:26 * &lt;s&gt; Bolter 1984:33–34, 204–206. * &lt;s&gt; All quotes from W.
Stanley Jevons 1880Elementary Lessons in Logic: Deductive and Inductive, Macmillan and Co., London and New York.
Republished as a googlebook; cf Jevons 1880:199–201.
Louis Couturat 1914the Algebra of Logic, The Open Court Publishing Company, Chicago and London.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Republished as a googlebook; cf Couturat 1914:75–76 gives a few more details; interestingly he compares this to a typewriter as well as a piano.
Jevons states that the account is to be found at Jan .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>20, 1870The Proceedings of the Royal Society. * &lt;s&gt; Jevons 1880:199–200 * &lt;s&gt; All quotes from John Venn 1881Symbolic Logic, Macmillan and Co., London.
Republished as a googlebook. cf Venn 1881:120–125.
The interested reader can find a deeper explanation in those pages. * &lt;s&gt; Bell and Newell diagram 1971:39, cf.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Davis 2000 * &lt;s&gt; * Melina Hill, Valley News Correspondent,A Tinkerer Gets a Place in History, Valley News West Lebanon NH, Thursday March 31, 1983, page 13. * &lt;s&gt; Davis 2000:14 * &lt;s&gt; van Heijenoort 1967:81ff * &lt;s&gt; van Heijenoort's commentary on Frege'sBegriffsschrift, a formula language, modeled upon that of arithmetic, for pure thought in van Heijenoort 1967:1 * &lt;s&gt; Dixon 1906, cf.
Kleene 1952:36–40 * &lt;s&gt; cf. footnote in Alonzo Church 1936a in Davis 1965:90 and 1936b in Davis 1965:110 * &lt;s&gt; Kleene 1935–6 in Davis 1965:237ff, Kleene 1943 in Davis 1965:255ff * &lt;s&gt; Church 1936 in Davis 1965:88ff * &lt;s&gt; cf.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;Formulation I&quot;, Post 1936 in Davis 1965:289–290 * &lt;s&gt; Turing 1936–7 in Davis 1965:116ff * &lt;s&gt; Rosser 1939 in Davis 1965:226 * &lt;s&gt; Kleene 1943 in Davis 1965:273–274 * &lt;s&gt; Kleene 1952:300, 317 * &lt;s&gt; Kleene 1952:376 * &lt;s&gt; Turing 1936–7 in Davis 1965:289–290 * &lt;s&gt; Turing 1936 in Davis 1965, Turing 1939 in Davis 1965:160 * &lt;s&gt; Hodges, p.
96 * &lt;s&gt; Turing 1936–7:116 * &lt;s&gt; a b Turing 1936–7 in Davis 1965:136 * &lt;s&gt; Turing 1939 in Davis 1965:160 [edit ]
References * Axt, P. (1959) On a Subrecursive Hierarchy and Primitive Recursive Degrees, Transactions of the American Mathematical Society 92, pp. 85–105 * Bell, C. Gordon and Newell, Allen (1971), Computer Structures: Readings and Examples, McGraw-Hill Book Company, New York.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>ISBN 0-07-004357-4 . * Blass, Andreas ; Gurevich, Yuri (2003).
&quot;Algorithms: A Quest for Absolute Definitions&quot; .
Bulletin of European Association for Theoretical Computer Science 81.  Includes an excellent bibliography of 56 references. * Boolos, George ; Jeffrey, Richard (1974, 1980, 1989, 1999).
Computability and Logic (4th ed.).
Cambridge University Press, London.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>ISBN  0-521-20402-X . More than one of|author= and |last1= specified (help ): cf.
Chapter 3Turing machines where they discuss &quot;certain enumerable sets not effectively (mechanically) enumerable&quot;. * Burgin, M. Super-recursive algorithms, Monographs in computer science, Springer, 2005.ISBN 0-387-95569-0 * Campagnolo, M.L., Moore, C. , and Costa, J.F.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(2000) An analog characterization of the subrecursive functions.
In Proc. of the 4th Conference on Real Numbers and Computers, Odense University, pp. 91–109 * Church, Alonzo (1936a).
&quot;An Unsolvable Problem of Elementary Number Theory&quot;.The American Journal of Mathematics 58 (2): 345–363. doi :10.2307/2371045 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>JSTOR  2371045 .  Reprinted in The Undecidable, p. 89ff.
The first expression of &quot;Church's Thesis&quot;.
See in particular page 100 (The Undecidable) where he defines the notion of &quot;effective calculability&quot; in terms of &quot;an algorithm&quot;, and he uses the word &quot;terminates&quot;, etc. * Church, Alonzo (1936b).
&quot;A Note on the Entscheidungsproblem&quot;.The Journal of Symbolic Logic 1 (1): 40–41. doi :10.2307/2269326 .
JSTOR  2269326 . More than one of |number= and |issue= specified (help ) Church, Alonzo (1936).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>&quot;Correction to a Note on the Entscheidungsproblem&quot;.The Journal of Symbolic Logic 1 (3): 101–102. doi :10.2307/2269030 .
JSTOR  2269030 . More than one of |number= and |issue= specified (help ) Reprinted inThe Undecidable, p. 110ff.
Church shows that the Entscheidungsproblem is unsolvable in about 3 pages of text and 3 pages of footnotes. * Daffa', Ali Abdullah al- (1977).
The Muslim contribution to mathematics.
London: Croom Helm.ISBN  0-85664-464-1 .  * Davis, Martin (1965).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The Undecidable: Basic Papers On Undecidable Propositions, Unsolvable Problems and Computable Functions.
New York: Raven Press.
ISBN  0-486-43228-9 .  Davis gives commentary before each article.
Papers ofGödel , Alonzo Church , Turing , Rosser , Kleene , and Emil Post are included; those cited in the article are listed here by author's name. * Davis, Martin (2000).
Engines of Logic: Mathematicians and the Origin of the Computer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>New York: W. W. Nortion.ISBN   0-393-32229-7 .  Davis offers concise biographies ofLeibniz , Boole , Frege , Cantor , Hilbert , Gödel and Turing with von Neumann as the show-stealing villain.
Very brief bios ofJoseph-Marie Jacquard , Babbage , Ada Lovelace , Claude Shannon , Howard Aiken , etc. * Paul E. Black, algorithm at theNIST Dictionary of Algorithms and Data Structures . * Dennett, Daniel (1995).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Darwin's Dangerous Idea.
New York: Touchstone/Simon &amp; Schuster.
ISBN  0-684-80290-2 .  * Yuri Gurevich , Sequential Abstract State Machines Capture Sequential Algorithms , ACM Transactions on Computational Logic, Vol 1, no 1 (July 2000), pages 77–111.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Includes bibliography of 33 sources. * Kleene C., Stephen (1936).
&quot;General Recursive Functions of Natural Numbers&quot;.Mathematische Annalen 112 (5): 727–742.doi : 10.1007/BF01565439 .  Presented to the American Mathematical Society, September 1935.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reprinted inThe Undecidable, p. 237ff.
Kleene's definition of &quot;general recursion&quot; (known now as mu-recursion) was used by Church in his 1935 paperAn Unsolvable Problem of Elementary Number Theory that proved the &quot;decision problem&quot; to be &quot;undecidable&quot; (i.e., a negative result). * Kleene C., Stephen (1943).
&quot;Recursive Predicates and Quantifiers&quot;.American Mathematical Society Transactions 54 (1): 41–73. doi :10.2307/1990131 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>JSTOR  1990131 . More than one of |number= and |issue= specified (help ) Reprinted inThe Undecidable, p. 255ff.
Kleene refined his definition of &quot;general recursion&quot; and proceeded in his chapter &quot;12.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithmic theories&quot; to posit &quot;Thesis I&quot; (p. 274); he would later repeat this thesis (in Kleene 1952:300) and name it &quot;Church's Thesis&quot;(Kleene 1952:317) (i.e., theChurch thesis ). * Kleene, Stephen C. (First Edition 1952).Introduction to Metamathematics (Tenth Edition 1991 ed.).
North-Holland Publishing Company.ISBN  0-7204-2103-9 .  Excellent—accessible, readable—reference source for mathematical &quot;foundations&quot;. * Knuth, Donald (1997).
Fundamental Algorithms, Third Edition.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Reading, Massachusetts: Addison–Wesley.
ISBN   0-201-89683-4 .  * Knuth, Donald (1969).
Volume 2/Seminumerical Algorithms, The Art of Computer Programming First Edition.
Reading, Massachusetts: Addison–Wesley.  * Kosovsky, N. K. Elements of Mathematical Logic and its Application to the theory of Subrecursive Algorithms, LSU Publ., Leningrad, 1981 * Kowalski, Robert (1979).
&quot;Algorithm=Logic+Control&quot;.Communications of the ACM 22 (7): 424–436. doi :10.1145/359131.359136 .  * A.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>A. Markov (1954) Theory of algorithms. [Translated by Jacques J. Schorr-Kon and PST staff]
Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e., Jerusalem, Israel Program for Scientific Translations, 1961; available from the Office of Technical Services, U.S. Dept. of Commerce, Washington]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Description 444 p. 28 cm.
Added t.p. in Russian Translation of Works of the Mathematical Institute, Academy of Sciences of the USSR, v.
42. Original title: Teoriya algerifmov. [QA248.M2943 Dartmouth College library.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>U.S. Dept. of Commerce, Office of Technical Services, number OTS 60-51085.] * Minsky, Marvin (1967).
Computation: Finite and Infinite Machines (First ed.).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Prentice-Hall, Englewood Cliffs, NJ.ISBN  0-13-165449-7 .  Minsky expands his &quot;...idea of an algorithm—an effective procedure...&quot; in chapter 5.1 Computability, Effective Procedures and Algorithms.
Infinite machines.&quot; * Post, Emil (1936).
&quot;Finite Combinatory Processes, Formulation I&quot;.The Journal of Symbolic Logic 1 (3): 103–105.doi : 10.2307/2269031 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>JSTOR  2269031 .  Reprinted in The Undecidable, p.
289ff.
Post defines a simple algorithmic-like process of a man writing marks or erasing marks and going from box to box and eventually halting, as he follows a list of simple instructions.
This is cited by Kleene as one source of his &quot;Thesis I&quot;, the so-calledChurch–Turing thesis . * Rogers, Jr, Hartley (1987).
Theory of Recursive Functions and Effective Computability.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The MIT Press.
ISBN  0-262-68052-1 (pbk.)
Check|isbn= value (help ) .  * Rosser, J.B.
(1939).
&quot;An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem&quot;.Journal of Symbolic Logic 4.  Reprinted in The Undecidable, p. 223ff.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Herein is Rosser's famous definition of &quot;effective method&quot;: &quot;...a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps... a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer&quot; (p. 225–226,The Undecidable) * Scott, Michael L. (2009).
Programming Language Pragmatics (3rd ed.).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Morgan Kaufmann Publishers/Elsevier.ISBN   978-0-12-374514-9 .  * Sipser, Michael (2006).
Introduction to the Theory of Computation.
PWS Publishing Company.ISBN  0-534-94728-X .  * Stone, Harold S. (1972).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Introduction to Computer Organization and Data Structures (1972 ed.).
McGraw-Hill, New York.
ISBN  0-07-061726-0 .  Cf. in particular the first chapter titled:Algorithms, Turing Machines, and Programs.
His succinct informal definition: &quot;...any sequence of instructions that can be obeyed by a robot, is called analgorithm&quot; (p. 4). * Tausworthe, Robert C (1977).
Standardized Development of Computer Software Part 1 Methods.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Englewood Cliffs NJ: Prentice-Hall, Inc.
ISBN  0-13-842195-1 .  * Turing, Alan M. (1936–7).
&quot;On Computable Numbers, With An Application to the Entscheidungsproblem&quot;.
Proceedings of the London Mathematical Society , Series 2 42: 230–265. doi : 10.1112/plms/s2-42.1.230 . .
Corrections, ibid, vol.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>43(1937) pp. 544–546.
Reprinted inThe Undecidable, p. 116ff.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Turing's famous paper completed as a Master's dissertation while at King's College Cambridge UK. * Turing, Alan M. (1939).
&quot;Systems of Logic Based on Ordinals&quot;.Proceedings of the London Mathematical Society, Series 2 45: 161–228. doi : 10.1112/plms/s2-45.1.161 .  Reprinted inThe Undecidable, p. 155ff.
Turing's paper that defined &quot;the oracle&quot; was his PhD thesis while at Princeton USA. * United States Patent and Trademark Office (2006), 2106.02 **&gt;Mathematical Algorithms: 2100 Patentability , Manual of Patent Examining Procedure (MPEP).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Latest revision August 2006 [edit ]
Secondary references * Bolter, David J. (1984).
Turing's Man: Western Culture in the Computer Age (1984 ed.).
The University of North Carolina Press, Chapel Hill NC.ISBN  0-8078-1564-0 . , ISBN 0-8078-4108-0 pbk. * Dilson, Jesse (2007).
The Abacus ((1968,1994) ed.).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>St. Martin's Press, NY.
ISBN  0-312-10409-X . , ISBN 0-312-10409-X (pbk.) * van Heijenoort, Jean (2001).From Frege to Gödel, A Source Book in Mathematical Logic, 1879–1931 ((1967) ed.).
Harvard University Press, Cambridge, MA.ISBN  0-674-32449-8 . , 3rd edition 1976[?],ISBN 0-674-32449-8 (pbk.) * Hodges, Andrew (1983).
Alan Turing: The Enigma ((1983) ed.).
Simon and Schuster, New York.ISBN  0-671-49207-1 . , ISBN 0-671-49207-1 .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Cf.
Chapter &quot;The Spirit of Truth&quot; for a history leading to, and a discussion of, his proof. [edit ]
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Further reading * Jean-Luc Chabert, Évelyne Barbin, A history of algorithms: from the pebble to the microchip, Springer, 1999, ISBN 3-540-63369-3 . * David Harel, Yishai A. Feldman, Algorithmics: the spirit of computing, Edition 3, Pearson Education, 2004,ISBN 0-321-11784-0 * Knuth, Donald E. (2000).
Selected Papers on Analysis of Algorithms .
Stanford, California: Center for the Study of Language and Information. * Knuth, Donald E. (2010).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Selected Papers on Design of Algorithms .
Stanford, California: Center for the Study of Language and Information. * David Berlinski , The Advent of the Algorithm: The 300-Year Journey from an Idea to the Computer, Mariner Books, 2001,ISBN 978-0-15-601391-8 . [edit ]
External links Look up algorithm in Wiktionary, the free dictionary.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Wikibooks has a book on the topic of: Algorithms At Wikiversity you can learn more and teach others aboutAlgorithm at: The Department of Algorithm * Hazewinkel, Michiel, ed. (2001), &quot;Algorithm&quot; , Encyclopedia of Mathematics , Springer , ISBN   978-1-55608-010-4   * Algorithms at the Open Directory Project * Weisstein, Eric W. , &quot; Algorithm &quot; from MathWorld . * Dictionary of Algorithms and Data Structures — National Institute of Standards and Technology * Algorithms and Data Structures by Dr Nikolai Bezroukov Algorithm repositories * The Stony Brook Algorithm Repository — State University of New York at Stony Brook * Netlib Repository —University of Tennessee and Oak Ridge National Laboratory * Collected Algorithms of the ACM —Association for Computing Machinery * The Stanford GraphBase — Stanford University * Combinatorica —University of Iowa and State University of New York at Stony Brook * Library of Efficient Datastructures and Algorithms (LEDA) —previously from Max-Planck-Institut für Informatik Lecture notes * Algorithms Course Materials .
Jeff Erickson.
University of Illinois .
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Retrieved from &quot; http://en.wikipedia.org/w/index.php?
title=Algorithm&amp;oldid=549291456 &quot; Categories : * Algorithms * Mathematical logic * Theoretical computer science Hidden categories: * All articles with dead external links * Articles with dead external links from March 2013 * All articles with broken links to citations * Articles with dead external links from March 2010 * Articles containing Persian language text * Pages with citations having redundant parameters * Pages with ISBN errors * Use mdy dates from August 2010 * Articles with example pseudocode Navigation menu Personal tools * Create account * Log in Namespaces * Article * Talk Variants Views * Read * Edit * View history Actions Search Navigation * Main page * Contents * Featured content * Current events * Random article * Donate to Wikipedia Interaction * Help * About Wikipedia * Community portal * Recent changes * Contact Wikipedia Toolbox * What links here * Related changes * Upload file * Special pages * Permanent link * Page information * Cite this page Print/export * Create a book * Download as PDF * Printable version Languages * Afrikaans * العربية * Aragonés * অসমীয়া * Asturianu * Azərbaycanca * বাংলা * Bân-lâm-gú * Беларуская * Беларуская (тарашкевіца)‎ * Български * Bosanski * Català * Česky * Dansk * Deutsch * Eesti * Ελληνικά * Español * Esperanto * Euskara * فارسی * Français * Galego * 한국어 * Հայերեն * हिन्दी * Hrvatski * Ido * Bahasa Indonesia * Interlingua * Íslenska * Italiano * עברית * ქართული * Қазақша * Kurdî * Кыргызча * ລາວ * Latina * Latviešu * Lëtzebuergesch * Lietuvių * Magyar * Македонски * മലയാളം * मराठी * مصرى * Bahasa Melayu * Монгол * မြန်မာဘာသာ * Nederlands * नेपाली * 日本語 * Norsk bokmål * Norsk nynorsk * Occitan * Олык марий * Oʻzbekcha * پنجابی * Polski * Português * Qaraqalpaqsha * Română * Русиньскый * Русский * Саха тыла * Shqip * Sicilianu * සිංහල * Simple English * Slovenčina * Slovenščina * Српски / srpski * Srpskohrvatski / српскохрватски * Basa Sunda * Suomi * Svenska * Tagalog * தமிழ் * Татарча/tatarça * తెలుగు * ไทย * Тоҷикӣ * Türkçe * Українська * اردو * Tiếng Việt * Walon * Winaray * ייִדיש * 粵語 * 中文 * Edit links * This page was last modified on 8 April 2013 at 08:28.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Text is available under the Creative Commons Attribution-ShareAlike License ; additional terms may apply.
By using this site, you agree to theTerms of Use and Privacy Policy.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Contact us * Privacy policy * About Wikipedia * Disclaimers * Mobile view * * Data Structures and Algorithms with Perl Data Structures and Algorithms, with examples in Perl Algorithms An algorithm is a method for solving a problem, with or without a computer.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>We'll examine, code, and run some algorithms.
We'll consider three issues:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Correctness: does it produce the right answer? * Implementation: how do you code it? * Performance: is it fast enough?
Understanding programming You can distinguish three levels of understanding programming: * Imitative: copy some code, change it around until it works. * Operational: picture how the computer executes each statement. * Deductive: derive code from intended solution, analyze correctness and performance.
We'll work at levels 2 and 3.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>To find the best solution among alternatives, you need to work at level 3.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Programming in general These lessons apply to any programming language. * The distinction between a problem (requirements or specification) and a particular method for solving that problem (algorithm).
There can be different algorithms that solve the same problem. * The distinction between an algorithm and its realization in one particular programming language. * Working from specifications and designs expressed in natural language, pseudocode, or diagrams. * Different algorithms (that solve the same problem) can have wildly different performances. * Analysis of performance (using counting).
The role of analysis versus experiment (testing). * Quantification of performance: Big-O notation, the function concept, sums, powers, logs, growth of functions. * Analysis of correctness (using assertions).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Analysis versus testing again. * Design: the distinction between the core algorithms and data structures, and the driver (main program).
Modularity, reuse, libraries.
Perl programming * Arrays and lists * Subroutines and parameter passing (getting data in and out) * References * Associative arrays (hashes) Case study: Maximum section sum Problem statement Input: a list of integers Output: the largest sum found in any contiguous sublist Example Input: (31, -41, 59, 26, -53, 58, 97, -93, -23, 84) Output: 187 The maximum section sum occurs in the sublist (59, 26, -53, 58, 97).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Motivation Pattern matching: find the largest sublist that has a particular property.
Algorithms Obvious solution: examine all possible sublists, test each for the property.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text># Given list a[0 .. max] foreach lower in 0 .. max foreach upper in lower .. max test property on sublist a[lower .. upper]
Can we do better?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Algorithm 1 Algorithm 2 Algorithm 4 Sources Jon Bentley, Programming Pearls: Algorithm Design Techniques, Communications of the ACM, 27(9) 865 - 871, Sept.
1984. Jon Bentley, Programming Pearls , Addison Wesley, 1986 (first edition, chapter 7), 2000 (second edition, chapter 8).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Jon Bentley's notes (PS , PDF )
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Performance How can we characterize the performance of the algorithm itself, independently from a particular input data set or operating environment?
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Big-O analysis describes how the running time increases as the size of the input data increases.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>O(n) means the running time is proportional to the size of the input, O(n2) means the running time is proportional to the square of the input, etc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Recall n2 = n ·   n, n3 = n · n · n,   etc.
(draw graphs on whiteboard)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Lower orders are good, higher orders are bad.
Algorithms with high orders cannot process large data sets in reasonable time.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>For sufficiently large n, the lower order algorithm outperforms the higher order in any operating environment.
The TRS-80 running theO(n) algorithm beats the Cray supercomputer running theO(n3) algorithm when n is greater than a few thousand (Bentley Table 2, p.
868, Fig. 1, p 869).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Estimating big-O Each nested loop adds one to the order: * One loop (Bentley Algorithm 4 ): O(n), linear * Two nested loops (Bentley Algorithms 2 , 2a): O(n2), quadratic * Three nested loops (Bentley Algorithm 1 ): O(n3), cubic Algorithms that can ignore some of the input data are sub-linear: * Eliminate half the input on each step (binary search): O(log n), logarithmic Be careful of hiddenO(n) operations that copy lists: * Assignments with lists, in subroutine calls for example:   my ($x, $y, @a) = @_   etc. * Splice into the middle of a list (Perl moves elements down) You can often avoid copying lists by usingreferences.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Binary search Searching a list can be quite fast if the list is already sorted.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Example: looking up a number in the phone book.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>(Explain binary search)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>An important principle: invest in building a data structure that makes subsequent operations much more efficient.
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Searching an unsorted list is O(n).
You must examine each element until you find the one you want (sequential search).
</text>
                    <manualLabel>1</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Searching a sorted list is O(log n).
At each step, you can eliminate half the elements, so the number of steps in the worst case islog2n.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>log2n is the number of times you must divide a list of n in half to reach a single element.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>The log function grows very slowly.
Recall 2n = x means log2x = n.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>n 2n x log2x 0 1 1 0 1 2 2 1 2 4 4 2 3 8 8 3 4 16 16 4 . .
10 1024 1024 10 . .
20 1048576 1048576 20 . .
A thousandfold increase in list size (from a thousand to a million) only doubles the search time!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Example: binary search with a thousand, then a million elements.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Be careful - the performance gained by a log n algorithm can be wasted by linear copy operations (in subroutine calls, for example).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Avoid linear copy operations by using references.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Sorting Naive sort (bubble sort, but also insertion sort etc.) is O(n2)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Efficient sort (quicksort etc.) is O(n log n): split the list, sort the halves, merge the sorted halves --recursively!
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Example of big performance gain from unobvious algorithm.
Split is O(log n), merge isO(n).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Associative arrays (hashes)
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Hashes are like tables or dictionaries that associate keys with values.
The key can be any scalar.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Almost as fast and compact as regular arrays (15 percent more time, 40 percent more space).
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Syntax Hash variable is indicated by percent sign prefix:   %hashname Access by key value using curly brackets:   $hashname{$keyvalue} Example Word frequency count : keys are words, values are numbers of occurrences References Some Perl limitations:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* array and hash elements must be scalars * subroutine arguments are just a list What to do?
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>References enable you to access large structures (lists, hashes, subroutines) through scalars.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Variables are containers.
References are addresses of containers (explanation with figures at the whiteboard).
References are calledpointers in some programming languages.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Uses for references in Perl:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Putting lists etc. in arrays and hashes * Passing multiple lists to a subroutine * Passing subroutine arguments efficiently (without list copy) * Object-oriented programming also:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* Sharing (accessing the same variable from multiple locations, for example from multiple arrays or hashes) Syntax Create a reference by prefixing variable or constant with a backslash:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>$const_ref = \42; $x_ref = \$x; $a_ref = \@a; # $a_ref is scalar reference to array @a $h_ref = \%h; There is special syntax for references to anonymous structured values:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>$a2_ref = [ 2, 4, 6, 8 ] # square brackets $h2_ref = { red =&gt; &quot;stop&quot;, green =&gt; &quot;go&quot; } # curly braces Retrieve (dereference) the item by using the appropriate prefix for the data type:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>$$const_ref $$x_ref @$a_ref # @$a_ref dereferences $a_ref to retrieve @a %$h_ref There is special arrow notation for dereferencing array or hash elements.
The following three expressions are equivalent:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>$$a_ref[0] # see above ${$a_ref}[0] # also acceptable, maybe a bit clearer $a_ref-&gt;[0] # most prefer this way, used in object-oriented programming Example Binary search with referencesReadings perlref -- Perl references and nested data structures perlreftut -- Understand references today Associative arrays with references Hash values must be scalars, so storing structures (lists, hashes) in a hash requires references.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Example Text concordance : keys are words, values are (references to) list of lines where word occurs.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Correctness Use loop invariants to reason about correctness.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Perl and other languages Perl advantages, from a data structures point of view:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* automatic memory management (structures created/grow/shrink as needed) * hashes are built in, convenient Perl disadvantages:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* References needed for rich data structures, adds irregularity, complexity Other important languages with automatic memory management:
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>* awk: much like Perl but simpler, excellent textbook * Lisp: language of the gods , steep learning curve, good choice for really deep problems * Python: many of Lisp's advantages, may be more accessible Other resources Links to books, tools, other course web pages etc.
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
                <section>
                    <text>Jon Jacky , jon@u.washington.edu
</text>
                    <manualLabel>0</manualLabel>
                    <svmLabel>0</svmLabel>
                    <interrogativeFeature>0.0</interrogativeFeature>
                    <wordAbsenceFeature>0.0</wordAbsenceFeature>
                </section>
            </sectionList>
        </query>
    </topic>
</data>
